<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycjBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yimchengjie.github.io/"/>
  <updated>2020-06-01T15:33:03.574Z</updated>
  <id>https://yimchengjie.github.io/</id>
  
  <author>
    <name>yanchengjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java线程间通信</title>
    <link href="https://yimchengjie.github.io/2020/05/31/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Java%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>https://yimchengjie.github.io/2020/05/31/Java并发编程/Java线程间通信/</id>
    <published>2020-05-31T08:03:31.000Z</published>
    <updated>2020-06-01T15:33:03.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java线程间通信"><a href="#Java线程间通信" class="headerlink" title="Java线程间通信"></a>Java线程间通信</h2><h3 id="synchronized同步关键字"><a href="#synchronized同步关键字" class="headerlink" title="synchronized同步关键字"></a>synchronized同步关键字</h3><p>使用synchronized关键字,同步线程,可以让线程按照一定顺序去执行;</p><p>synchronized关键字,线程需要不断尝试获取锁,这会耗费CPU资源</p><h3 id="等待-通知-wait-notify"><a href="#等待-通知-wait-notify" class="headerlink" title="等待/通知-wait()/notify()"></a>等待/通知-wait()/notify()</h3><p>Java线程的等待/通知机制,是使用Object类的wait()方法和notify(),notifyAll()方法;</p><p>当一个线程A获取锁,并开始执行,业务执行完成后调用notifyAll()和wait()方法,使自己进入等待状态,并唤醒其他线程,被唤醒的线程B就会获取锁, 并执行;</p><p>wait()和notify()是针对锁对象, 而不是线程的方法, 是锁来调用wait()和notify()</p><h3 id="信号量通信volatile关键字"><a href="#信号量通信volatile关键字" class="headerlink" title="信号量通信volatile关键字"></a>信号量通信volatile关键字</h3><p>volatile关键字保证数据的可见性, 如果一个变量使用了volatile关键字, 那么它一改变, 其他线程的内存就会立马更新成改变后的数据。</p><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><p>join()方法是Thread的一个实例方法,它的作用是使当前所在的线程等待调用join()方法的线程执行完后在执行。</p><p>比如子线程有许多耗时操作， 而主线程要获取子线程得到的数据， 那就需要让主线程去等待子线程。</p><h3 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h3><p>使用ThreadLocal在线程中创建线程本地变量，内部是一个Map来维护数据，ThreadLocal可以让每个线程都拥有自己独立的ThreadLocal副本，使每个线程可以访问自己的独立副本变量。</p><p>使用时，可以利用构造方法，给多个线程传递同一个ThreadLocal实例， 多个线程会创建出独立的副本， 而不影响其他线程中的ThreadLocal。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java线程间通信&quot;&gt;&lt;a href=&quot;#Java线程间通信&quot; class=&quot;headerlink&quot; title=&quot;Java线程间通信&quot;&gt;&lt;/a&gt;Java线程间通信&lt;/h2&gt;&lt;h3 id=&quot;synchronized同步关键字&quot;&gt;&lt;a href=&quot;#synchron
      
    
    </summary>
    
    
      <category term="Java并发编程" scheme="https://yimchengjie.github.io/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://yimchengjie.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kafka入门</title>
    <link href="https://yimchengjie.github.io/2020/05/27/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/05/27/消息中间件/Kafka入门/</id>
    <published>2020-05-27T09:26:17.000Z</published>
    <updated>2020-06-17T20:34:31.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka入门"><a href="#Kafka入门" class="headerlink" title="Kafka入门"></a>Kafka入门</h2><p>Kafka是一款分布式、分区的、多副本的、多订阅者的，基于Zookeeper协调的分布式日志系统（MQ系统），主要应用场景为日志收集系统和消息系统。</p><h2 id="Kafka消息系统"><a href="#Kafka消息系统" class="headerlink" title="Kafka消息系统"></a>Kafka消息系统</h2><p>一个消息系统, 负责将数据从一个应用发送到另一个应用, 应用只关心数据, 无需关注数据是如何传递的. 分布式消息传递基于可靠的消息队列. 通过消息队列实现异步,削峰, 解耦.</p><p>消息队列一般分为两种模式, 点对点传输和发布订阅模式. Kafka是一种发布订阅模式的消息队列.</p><h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h3><p>在发布-订阅模式中, 服务方将消息发布到一个Topic,可以看成是频道. 消费者只要订阅了该频道, 就可以消费其中的数据, 频道中的数据被消费后不会马上删除.</p><h3 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h3><h4 id="服务器-broker"><a href="#服务器-broker" class="headerlink" title="服务器: broker"></a>服务器: broker</h4><p>borker为一个Kafka节点, broker上存储了Topic的数据</p><h4 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h4><p>Topic, 主题 频道, 即消息所属的类别. 该类别称作Topic, 物理上Topic可能分布于多台服务器, 但是逻辑上是同一个, 用户只需要指定Topic即可</p><h4 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h4><p>一个Topic会被分割为多个Partition, Partition的数量可以为1</p><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><p>生产者, 生产者将消息发布到Topic, broker接收到消息后,存到Partition中</p><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消费者, 消费者可以从broker中读取数据, 只需要订阅topic</p><h4 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h4><p>每个Partition可以有多个副本, 但是只有一个Leader, 该Leader负责数据读写</p><h4 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h4><p>Follower即其他的Partition, 它们跟随Leader,当Leader数据变更时, Follower的数据就位同步, 如果Leader失效, 则会在Follower中重新选取Leader</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kafka入门&quot;&gt;&lt;a href=&quot;#Kafka入门&quot; class=&quot;headerlink&quot; title=&quot;Kafka入门&quot;&gt;&lt;/a&gt;Kafka入门&lt;/h2&gt;&lt;p&gt;Kafka是一款分布式、分区的、多副本的、多订阅者的，基于Zookeeper协调的分布式日志系统（M
      
    
    </summary>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="Kafka" scheme="https://yimchengjie.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯分类器的Java实现</title>
    <link href="https://yimchengjie.github.io/2020/03/30/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%84Java%E5%AE%9E%E7%8E%B0/"/>
    <id>https://yimchengjie.github.io/2020/03/30/自然语言处理/贝叶斯分类器的Java实现/</id>
    <published>2020-03-30T12:38:54.000Z</published>
    <updated>2020-06-17T20:17:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贝叶斯分类器的Java实现"><a href="#贝叶斯分类器的Java实现" class="headerlink" title="贝叶斯分类器的Java实现"></a>贝叶斯分类器的Java实现</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ycj.publicOpinionAnalysisSystem.nlp.utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hankcs.hanlp.classification.tokenizers.*;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.dom.DOMCryptoContext;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: yanchengjie</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BayesClassifier</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8338342007460341994L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库总词数</span></span><br><span class="line">    <span class="keyword">private</span> Long corpusAllWordsNum = <span class="keyword">new</span> Long(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库总文档数</span></span><br><span class="line">    <span class="keyword">private</span> Long corpusAllDocNum = <span class="keyword">new</span> Long(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库各分类文档数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Long&gt; corpusClassDocNumMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库各分类词数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Long&gt; corpusClassWordsNumMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库各分类先验概率</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Double&gt; corpusClassPriorProbabilityMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 各分类词频树</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, TreeMap&lt;String, Integer&gt;&gt; corpusClassWordFrequency = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库包含特征词的文档总数, 一篇文档包含多次计作一次</span></span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;String, Integer&gt; wordExistInAllDocNumTree;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特征映射</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, TreeMap&lt;String, Double&gt;&gt; corpusClassWordFeature = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDF映射</span></span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;String, Double&gt; corpusClassWordIDF = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分词器</span></span><br><span class="line">    <span class="keyword">private</span> ITokenizer tokenizer = <span class="keyword">new</span> BigramTokenizer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中文停用词表</span></span><br><span class="line">    <span class="keyword">private</span> TreeSet&lt;String&gt; stopWordsTree;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平滑系数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Double ALPHA = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语料库各分类文档集合,String[]表示分词后一篇文档(语料加载元数据)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Vector&lt;String[]&gt;&gt; corpusClassDocSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BayesClassifier</span><span class="params">(Map&lt;String, Vector&lt;String[]&gt;&gt; corpusClassDocSet, TreeSet&lt;String&gt; stopWordsTree)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stopWordsTree = stopWordsTree;</span><br><span class="line">        <span class="keyword">this</span>.corpusClassDocSet = corpusClassDocSet;</span><br><span class="line">        <span class="comment">// 构建 语料库包含特征词的文档数Tree</span></span><br><span class="line">        <span class="keyword">this</span>.wordExistInAllDocNumTree = createWordExistInAllDocNumTree(corpusClassDocSet);</span><br><span class="line">        <span class="keyword">if</span> (corpusClassDocSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Vector&lt;String[]&gt;&gt; entry : corpusClassDocSet.entrySet()) &#123;</span><br><span class="line">                <span class="comment">// 构建 各分类下文档数</span></span><br><span class="line">                <span class="keyword">this</span>.corpusClassDocNumMap.put(entry.getKey(), Integer.valueOf(entry.getValue().size()).longValue());</span><br><span class="line">                <span class="comment">// 构建 总文档数</span></span><br><span class="line">                <span class="keyword">this</span>.corpusAllDocNum += Integer.valueOf(entry.getValue().size()).longValue();</span><br><span class="line">                <span class="comment">// 构建 各分类的词频树</span></span><br><span class="line">                TreeMap&lt;String, Integer&gt; wordFrequencyTree = createWordFrequencyTree(entry.getValue());</span><br><span class="line">                <span class="keyword">this</span>.corpusClassWordFrequency.put(entry.getKey(), wordFrequencyTree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (corpusClassWordFrequency != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 构建 语料库各分类词数</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, TreeMap&lt;String, Integer&gt;&gt; entry : corpusClassWordFrequency.entrySet()) &#123;</span><br><span class="line">                    String className = entry.getKey();</span><br><span class="line">                    TreeMap&lt;String, Integer&gt; corpusTree = entry.getValue();</span><br><span class="line">                    Long corpusNum = <span class="keyword">new</span> Long(<span class="number">0</span>);</span><br><span class="line">                    Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = corpusTree.entrySet().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        Map.Entry&lt;String, Integer&gt; wordNum = iterator.next();</span><br><span class="line">                        <span class="comment">// 去停用词</span></span><br><span class="line">                        <span class="keyword">if</span> (stopWordsTree.contains(wordNum.getKey())) &#123;</span><br><span class="line">                            iterator.remove();</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        corpusNum += wordNum.getValue().longValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                    corpusClassWordsNumMap.put(className, corpusNum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 构建 语料库总词数</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Long&gt; entry : corpusClassWordsNumMap.entrySet()) &#123;</span><br><span class="line">                corpusAllWordsNum += entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 构建 先验概率</span></span><br><span class="line">            <span class="comment">/*for (Map.Entry&lt;String, Long&gt; entry : corpusClassDocNumMap.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                corpusClassPriorProbabilityMap.put(entry.getKey(), entry.getValue().doubleValue() / corpusAllDocNum);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">// 构建 先验概率</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Long&gt; entry : corpusClassWordsNumMap.entrySet()) &#123;</span><br><span class="line">                corpusClassPriorProbabilityMap.put(entry.getKey(), Math.log(entry.getValue().doubleValue() / corpusAllWordsNum));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 构建 特征映射 条件概率</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, TreeMap&lt;String, Integer&gt;&gt; entry : corpusClassWordFrequency.entrySet()) &#123;</span><br><span class="line">                String className = entry.getKey();</span><br><span class="line">                TreeMap&lt;String, Integer&gt; corpusTree = entry.getValue();</span><br><span class="line">                TreeMap&lt;String, Double&gt; featureTree = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; wordNum : corpusTree.entrySet()) &#123;</span><br><span class="line">                    Double featureValue = (wordNum.getValue().doubleValue() + ALPHA) / (Integer.valueOf(corpusTree.size()).doubleValue()</span><br><span class="line">                            + corpusClassWordFrequency.size() * ALPHA);</span><br><span class="line">                    <span class="comment">/*Double featureValue = (wordNum.getValue().doubleValue() + ALPHA) / (corpusClassWordsNumMap.get(className).doubleValue()</span></span><br><span class="line"><span class="comment">                                                                                        + corpusClassWordsNumMap.size() * ALPHA);*/</span></span><br><span class="line">                    <span class="comment">// Double featureValue = (wordNum.getValue().doubleValue() + ALPHA) / (corpusClassDocNumMap.get(className).doubleValue() + corpusClassDocNumMap.size() * ALPHA);</span></span><br><span class="line">                    <span class="comment">// 取对数</span></span><br><span class="line">                    featureValue = Math.log(featureValue);</span><br><span class="line">                    featureTree.put(wordNum.getKey(), featureValue);</span><br><span class="line">                &#125;</span><br><span class="line">                corpusClassWordFeature.put(className, featureTree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 构建 IDF映射</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : wordExistInAllDocNumTree.entrySet()) &#123;</span><br><span class="line">                Double idf = Math.log((ALPHA + corpusAllDocNum.doubleValue()) / (ALPHA + wordExistInAllDocNumTree.get(entry.getKey()).doubleValue()));</span><br><span class="line">                idf = Math.log(idf);</span><br><span class="line">                corpusClassWordIDF.put(entry.getKey(), idf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public BayesClassifier(Map&lt;String, TreeMap&lt;String, Integer&gt;&gt; corpusClassWordFrequency, Map&lt;String, Long&gt; corpusEachClassDocNum, TreeSet&lt;String&gt; stopWordsTree) &#123;</span></span><br><span class="line"><span class="comment">        this.corpusClassWordFrequency = corpusClassWordFrequency;</span></span><br><span class="line"><span class="comment">        this.corpusEachClassDocNum = corpusEachClassDocNum;</span></span><br><span class="line"><span class="comment">        this.stopWordsTree = stopWordsTree;</span></span><br><span class="line"><span class="comment">        if (corpusEachClassDocNum != null) &#123;</span></span><br><span class="line"><span class="comment">            corpusEachClassDocNum.entrySet();</span></span><br><span class="line"><span class="comment">            for (Map.Entry&lt;String, Long&gt; entry : corpusEachClassDocNum.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                corpusAllDocNum += entry.getValue();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (corpusClassWordFrequency != null) &#123;</span></span><br><span class="line"><span class="comment">            // 计算语料库各分类总词数</span></span><br><span class="line"><span class="comment">            for (Map.Entry&lt;String, TreeMap&lt;String, Integer&gt;&gt; entry : corpusClassWordFrequency.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                String className = entry.getKey();</span></span><br><span class="line"><span class="comment">                TreeMap&lt;String, Integer&gt; corpusTree = entry.getValue();</span></span><br><span class="line"><span class="comment">                Long corpusNum = new Long(0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator=corpusTree.entrySet().iterator();</span></span><br><span class="line"><span class="comment">                while (iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">                    Map.Entry&lt;String, Integer&gt; wordNum= iterator.next();</span></span><br><span class="line"><span class="comment">                    // 去停用词</span></span><br><span class="line"><span class="comment">                    if (stopWordsTree.contains(wordNum.getKey()))&#123;</span></span><br><span class="line"><span class="comment">                        iterator.remove();</span></span><br><span class="line"><span class="comment">                        continue;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    corpusNum += wordNum.getValue().longValue();</span></span><br><span class="line"><span class="comment">                    // 合并词数 构建全词频树</span></span><br><span class="line"><span class="comment">                    if (!corpusWordFrequency.containsKey(wordNum.getKey()))&#123;</span></span><br><span class="line"><span class="comment">                        corpusWordFrequency.put(wordNum.getKey(),wordNum.getValue());</span></span><br><span class="line"><span class="comment">                    &#125;else &#123;</span></span><br><span class="line"><span class="comment">                        corpusWordFrequency.replace(wordNum.getKey(),wordNum.getValue()+corpusWordFrequency.get(wordNum.getKey()));</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                corpusEachClassWordsNumMap.put(className, corpusNum);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // 计算语料库总词数</span></span><br><span class="line"><span class="comment">            for (Map.Entry&lt;String, Long&gt; entry : corpusEachClassWordsNumMap.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                corpusAllWordsNum += entry.getValue();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // 计算先验概率</span></span><br><span class="line"><span class="comment">            for (Map.Entry&lt;String, Long&gt; entry : corpusEachClassWordsNumMap.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                corpusClassPriorProbabilityMap.put(entry.getKey(), entry.getValue().doubleValue() / corpusAllWordsNum);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // 计算TF-IDF</span></span><br><span class="line"><span class="comment">            for (Map.Entry&lt;String, TreeMap&lt;String, Integer&gt;&gt; entry : corpusClassWordFrequency.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                String className = entry.getKey();</span></span><br><span class="line"><span class="comment">                TreeMap&lt;String, Integer&gt; corpusTree = entry.getValue();</span></span><br><span class="line"><span class="comment">                TreeMap&lt;String, Double&gt; tfIDFTree = new TreeMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">                for (Map.Entry&lt;String, Integer&gt; wordNum : corpusTree.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">                    Double alpha=1.0;</span></span><br><span class="line"><span class="comment">                    Double tf = (wordNum.getValue().doubleValue()+alpha) / (corpusEachClassWordsNumMap.get(className).doubleValue()+corpusEachClassDocNum.size()*alpha);</span></span><br><span class="line"><span class="comment">                    //Double idf = Math.log((1 + corpusAllDocNum) / corpusWordFrequency.get(wordNum.getKey()).doubleValue());</span></span><br><span class="line"><span class="comment">                    //Double tf_idf = tf * idf;</span></span><br><span class="line"><span class="comment">                    //Double tf_idf = tf;</span></span><br><span class="line"><span class="comment">                    tfIDFTree.put(wordNum.getKey(), tf);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                corpusClassWordTFIDF.put(className, tfIDFTree);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeMap&lt;String, Integer&gt; <span class="title">createWordFrequencyTree</span><span class="params">(Vector&lt;String[]&gt; docSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (docSet == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"docSet为空"</span>);</span><br><span class="line">        TreeMap&lt;String, Integer&gt; wordFrequencyTree = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        Iterator&lt;String[]&gt; iterator = docSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            String[] strings = iterator.next();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (wordFrequencyTree.containsKey(strings[i])) &#123;</span><br><span class="line">                    wordFrequencyTree.replace(strings[i], wordFrequencyTree.get(strings[i]) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    wordFrequencyTree.put(strings[i], <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordFrequencyTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeMap&lt;String, Integer&gt; <span class="title">createWordExistInAllDocNumTree</span><span class="params">(Map&lt;String, Vector&lt;String[]&gt;&gt; corpusClassDocSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corpusClassDocSet == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"corpusClassDocSet为空"</span>);</span><br><span class="line">        TreeMap&lt;String, Integer&gt; wordExistInAllDocNumTree = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Vector&lt;String[]&gt;&gt; entry : corpusClassDocSet.entrySet()) &#123;</span><br><span class="line">            Vector&lt;String[]&gt; docSet = entry.getValue();</span><br><span class="line">            Iterator&lt;String[]&gt; iterator = docSet.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                String[] strings = iterator.next();</span><br><span class="line">                List&lt;String&gt; stringDifferent = <span class="keyword">new</span> ArrayList&lt;&gt;(strings.length);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!stringDifferent.contains(strings[i])) stringDifferent.add(strings[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringDifferent.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (wordExistInAllDocNumTree.containsKey(stringDifferent.get(i))) &#123;</span><br><span class="line">                        wordExistInAllDocNumTree.replace(stringDifferent.get(i), wordExistInAllDocNumTree.get(strings[i]) + <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        wordExistInAllDocNumTree.put(stringDifferent.get(i), <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordExistInAllDocNumTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">featureExtraction</span><span class="params">(String classification, String word)</span> </span>&#123;</span><br><span class="line">        Double featureValue = corpusClassWordFeature.get(classification).get(word);</span><br><span class="line">        <span class="keyword">if</span> (featureValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            featureValue = ALPHA / (corpusClassWordsNumMap.get(classification).doubleValue() + corpusClassWordsNumMap.size() * ALPHA);</span><br><span class="line">            featureValue = Math.log(featureValue);</span><br><span class="line">            corpusClassWordFeature.get(classification).put(word, featureValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> featureValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">idfExtraction</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Double idfValue = corpusClassWordIDF.get(word);</span><br><span class="line">        <span class="keyword">if</span> (idfValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            idfValue = Math.log((ALPHA + corpusAllDocNum.doubleValue()) / ALPHA);</span><br><span class="line">            idfValue = Math.log(idfValue);</span><br><span class="line">            corpusClassWordIDF.put(word, idfValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idfValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Double, String&gt; <span class="title">calculateProbability</span><span class="params">(String[] strings)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; tempForTF = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tempForTF.containsKey(strings[i])) &#123;</span><br><span class="line">                tempForTF.replace(strings[i], tempForTF.get(strings[i]) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tempForTF.put(strings[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Double, String&gt; probabilityMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : corpusClassPriorProbabilityMap.entrySet()) &#123;</span><br><span class="line">            Double probability = corpusClassPriorProbabilityMap.get(entry.getKey());</span><br><span class="line">            Double feature;</span><br><span class="line">            Double idf;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stopWordsTree.contains(strings[i])) <span class="keyword">continue</span>;</span><br><span class="line">                    feature = featureExtraction(entry.getKey(), strings[i]);</span><br><span class="line">                    idf = idfExtraction(strings[i]);</span><br><span class="line">                    probability = probability</span><br><span class="line">                            + feature + idf</span><br><span class="line">                            + Math.log(tempForTF.get(strings[i]).doubleValue() / Integer.valueOf(strings.length).doubleValue());</span><br><span class="line">                    <span class="comment">//if (probability == 0.0 || probability &lt; Double.MIN_VALUE) probability = Double.MIN_VALUE;</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            probabilityMap.put(probability, entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> probabilityMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">classify</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        String[] strings = tokenizer.segment(text);</span><br><span class="line">        Map&lt;Double, String&gt; probabilityMap = calculateProbability(strings);</span><br><span class="line">        Double maxProbability = -Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Double, String&gt; entry : probabilityMap.entrySet()) &#123;</span><br><span class="line">            Double probability = entry.getKey() + Double.MIN_VALUE;</span><br><span class="line">            System.out.println(<span class="string">"分类:"</span>+entry.getValue()+<span class="string">" 概率:"</span>+probability);</span><br><span class="line">            <span class="keyword">if</span> (probability &gt; maxProbability) &#123;</span><br><span class="line">                maxProbability = probability;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.print("概率:" + (maxProbability - Double.MIN_VALUE) + ",");</span></span><br><span class="line">        String result = probabilityMap.get(maxProbability - Double.MIN_VALUE);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">classify</span><span class="params">(String[] strings)</span> </span>&#123;</span><br><span class="line">        Map&lt;Double, String&gt; probabilityMap = calculateProbability(strings);</span><br><span class="line">        Double maxProbability = -Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Double, String&gt; entry : probabilityMap.entrySet()) &#123;</span><br><span class="line">            Double probability = entry.getKey() + Double.MIN_VALUE;</span><br><span class="line">            System.out.println(<span class="string">"分类: 【"</span>+entry.getValue()+<span class="string">"】 概率:"</span>+probability);</span><br><span class="line">            <span class="keyword">if</span> (probability &gt; maxProbability) &#123;</span><br><span class="line">                maxProbability = probability;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println("概率:" + (maxProbability - Double.MIN_VALUE) + ",");</span></span><br><span class="line">        String result = probabilityMap.get(maxProbability - Double.MIN_VALUE);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;贝叶斯分类器的Java实现&quot;&gt;&lt;a href=&quot;#贝叶斯分类器的Java实现&quot; class=&quot;headerlink&quot; title=&quot;贝叶斯分类器的Java实现&quot;&gt;&lt;/a&gt;贝叶斯分类器的Java实现&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯分类器</title>
    <link href="https://yimchengjie.github.io/2020/03/17/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://yimchengjie.github.io/2020/03/17/自然语言处理/朴素贝叶斯分类器/</id>
    <published>2020-03-17T15:09:54.000Z</published>
    <updated>2020-03-20T10:57:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朴素贝叶斯分类器"><a href="#朴素贝叶斯分类器" class="headerlink" title="朴素贝叶斯分类器"></a>朴素贝叶斯分类器</h2><p>朴素贝叶斯分类是一种简单的分类算法: 对于给出的待分类对象,求解此对象出现的条件下各个类别出现的概率,哪个最大,该对象就属于哪个类别</p><h3 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h3><p>词向量一般是布尔类型的集合,即该集合中每个元素都表示其对应的单词是否在语料库中出现.<br>比如<code>I am student</code>在语料库<code>{&quot;I&quot;,&quot;student&quot;}</code>下的词向量是<code>{1,0,1}</code>,这种模型通常称为<strong>词集模型</strong>,如果词向量元素是整形类型,每个元素表示相应单词在语料库中出现的次数(0代表没有出现),那么这种模型就叫做<strong>词袋模型</strong></p><h3 id="朴素贝叶斯分类"><a href="#朴素贝叶斯分类" class="headerlink" title="朴素贝叶斯分类"></a>朴素贝叶斯分类</h3><p>已知词向量, 就要计算,在当前词向量特征的情况下,分入类别1 2..的概率</p><p>词向量 X={x1,x2,x3,x4…}<br>分类 C1 , C2<br>求概率  P(C1|X) , P(C2|X)</p><p>P(Ci|X)=(P(X|Ci)P(Ci))/P(X)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;朴素贝叶斯分类器&quot;&gt;&lt;a href=&quot;#朴素贝叶斯分类器&quot; class=&quot;headerlink&quot; title=&quot;朴素贝叶斯分类器&quot;&gt;&lt;/a&gt;朴素贝叶斯分类器&lt;/h2&gt;&lt;p&gt;朴素贝叶斯分类是一种简单的分类算法: 对于给出的待分类对象,求解此对象出现的条件下各个类别出
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>面试题集02</title>
    <link href="https://yimchengjie.github.io/2020/03/16/Java%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/"/>
    <id>https://yimchengjie.github.io/2020/03/16/Java面试专题/面试题集02/</id>
    <published>2020-03-16T11:07:00.000Z</published>
    <updated>2020-06-01T15:38:54.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题集02"><a href="#面试题集02" class="headerlink" title="面试题集02"></a>面试题集02</h2><hr><ol><li><p><strong>RESTful调用和RPC调用有什么区别?如果让你设计一个RPC服务治理框架,你会设计那些模块?是否了解过Service Mesh,如果了解Service Mesh是用来解决什么问题的?</strong></p><p> RESTful是表达性状态传递, 是一种软件架构风格.REST通过Http协议定义的动词方法(GET-查,PUT-改,DELETE-删,POST-增)来表示对资源的操作,用唯一的URL地址作为资源的标识符, 基于Http协议,但是Http调用效率低.RESTful也是RPC,只是消息的组织方式和协议不同<br> RPC是远程过程调用, 它的意图是像调用本地方法一样调用远程服务,RPC调用基于TCP/UDP连接,使用XML-RPC或者JSON-RPC或者SOAP(基于XML数据的Http协议)等,这使得RPC调用效率更高, 减少网络开销,RPC是基于方法而不是资源的,在本地使用代理,通过序列化与反序列化,将服务当做本地方法来调用.</p><p> 设计一个RPC服务治理框架,分为两个部分,RPC部分有接口描述语言(描述接口的统一标识符),客户端,服务端,协议层(JSON-RPC),数据传输层(socket);服务治理部分有注册中心,服务监控,服务容灾,服务鉴权(用户认证)</p><p> Service Mesh即服务网络, 是为了处理服务间通信,屏蔽分布式系统通信的复杂性,解决跨语言远程调用,实现语言无关, 对应用透明,组件可以单独升级而不必升级服务.</p></li><li><p><strong>请描述避免多线程竞争时有哪些手段?</strong></p><p> 多线程竞争是指,多线程同时访问一个资源,即所谓的线程安全问题<br> 解决多线程安全问题的方法: 不可变对象, 互斥锁, ThreadLocal对象, CAS</p></li><li><p><strong>请简述HTTP的5个常用Method及其含义,以及5个常用的Status Code及其含义,HTTP和HTTPS的区别是什么,简述一下HTTPS的原理.</strong></p><p> POST: 增<br> DELETE: 删<br> PUT: 改<br> GET: 查<br> OPTIONS: 可用性检查</p><p> 100: 握手成功<br> 200: 请求处理成功<br> 300: 重定向<br> 400: 服务器无资源<br> 500: 服务器无法正常响应</p><p> HTTP是一种超文本网络传输协议,一个HTTP协议数据包包含: 请求/响应行,请求/响应头,空行,请求/响应正文.<br> HTTPS在HTTP的基础上增加了数据加密,在数据传输之前进行加密<br> HTTPS=HTTP+SSL<br> HTTPS协议先与服务器建立连接, 然后服务器发送公钥到客户端,客户端验证合法后,客户端根据公钥生成加密密钥,然后对数据进行加密,再将加密后数据发给服务器,服务器用私钥对其进行解密.</p></li><li><p><strong>JAVA中如何确保N个线程可以访问N个资源，但同时又不导致死锁？</strong></p><p> 使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面试题集02&quot;&gt;&lt;a href=&quot;#面试题集02&quot; class=&quot;headerlink&quot; title=&quot;面试题集02&quot;&gt;&lt;/a&gt;面试题集02&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RESTful调用和RPC调用有什么区别?如果让你设计一个RPC
      
    
    </summary>
    
    
      <category term="Java面试专题" scheme="https://yimchengjie.github.io/categories/Java%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="Java" scheme="https://yimchengjie.github.io/tags/Java/"/>
    
      <category term="面试" scheme="https://yimchengjie.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试题集01</title>
    <link href="https://yimchengjie.github.io/2020/03/11/Java%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/"/>
    <id>https://yimchengjie.github.io/2020/03/11/Java面试专题/面试题集01/</id>
    <published>2020-03-11T07:39:00.000Z</published>
    <updated>2020-03-16T11:07:39.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题集01"><a href="#面试题集01" class="headerlink" title="面试题集01"></a>面试题集01</h2><hr><ol><li><p><strong>什么是Java虚拟机? 为什么Java被称作是”平台无关的编程语言”</strong></p><p> Java虚拟机是一个可以运行Java字节码文件的虚拟机进程,Java源文件被编译成能被Java虚拟机执行的字节码文件; Java程序编写一次就能在不同平台执行,只需要在平台上安装Java虚拟机.由JVM负责和底层通信,把java字节码文件翻译成平台认识的机器码.</p></li><li><p><strong>JDK和JRE的区别是什么?</strong></p><p> JRE是Java运行时所需要的环境, 包含了java虚拟机,java基础类;JDK是Java开发工具包,JDK包含了JRE,此外还有编译Java源文件的javac,还包含了一些调试分析工具,比如jconsole,jvisualvm等.</p></li><li><p><strong>static关键字是什么意思? Java中是否可以覆盖(override)一个private或者static方法?</strong></p><p> static关键字用来声明静态的意思,可以修饰成员变量和成员函数,还能修饰内部类.被static修饰的静态方法,只能访问静态成员,不能访问非静态成员.静态是随着类的加载而加载,因此可以直接用类名访问<br> override覆盖是重写的意思,重写就是指子类重写父类方法,方法名返回值以及参数都相同; 但子类的访问权限不能低于父类的,private是私有修饰符,该方法不能被继承因此无法重写,static修饰的静态方法也不能重写,因为重写的方法是基于运行状态绑定的, 由实例化后的对象来决定执行那个方法,而static是编译时就静态绑定在类上的,static静态方法与任何对象都无关,所以概念上不适用</p></li><li><p><strong>Java支持的数据类型有那些? 什么是自动拆箱装箱</strong></p><p> Java语言支持的8种基础数据:<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>float</code>,<code>double</code>,<code>boolean</code>,<code>char</code><br> 自动拆箱装箱是指Java编译器在基本数据类型和对应的对象包装类型之间的自动转换.</p></li><li><p><strong>进程和线程的区别是什么</strong></p><p> 进程是执行着的应用程序,而线程是进程内部的一个执行序列, 一个进程可以有多个线程</p></li><li><p><strong>创建线程有几种不同的方式?你喜欢哪一种?为什么?</strong></p><p> 创建线程有四种方式</p><ol><li><p>继承Thread类</p></li><li><p>实现Runable接口</p></li><li><p>实现Callable接口</p></li><li><p>使用Executor创建线程池</p><p>喜欢实现Runable接口, 因为这不需要继承类, java不支持类的多继承,一旦继承Thread就无法在继承其他类了.</p></li></ol></li><li><p>概括解释线程的几种可用状态</p><ol><li>新建(new): 新建了一个线程对象</li><li>可运行(runable): 线程创建后,其他线程调用了该线程对象的start()方法,该状态的线程位于可运行线程池中,等待被线程调度选中,获得CPU使用权</li><li>运行(running): 可运行状态的线程获得了CPU执行权,执行程序代码</li><li>阻塞(block): 阻塞状态是线程因为某种原因放弃了CPU使用权,暂停运行,知道线程重新进入可运行(runable)状态;阻塞情况有三种<ol><li>等待阻塞: 运行(running)线程执行o.wait()方法, JVM会把该线程放入等待队列中</li><li>同步阻塞: 运行(running)的线程在获取对象的同步锁时,若该同步锁被别的线程占用,则JVM会把该线程放入锁池.</li><li>其他阻塞: 运行(running)的线程执行Thread.sleep()或t.join()方法时,或者发生I/O请求时,JVM会把该线程设成阻塞状态,当sleep()超时,join()等待线程终止或超时,io处理完,线程重新进入可运行(runable)状态</li></ol></li><li>死亡(dead): 线程run(),main()方法结束时,或者因异常退出run()方法,则线程结束生命周期,死亡的线程不可再次复生.</li></ol></li><li><p><strong>同步方法和同步代码块的区别是什么?</strong></p><p> 同步方法默认用this或者当前类class对象作为锁.<br> 同步代码块可以选择以什么来加锁,比同步方法要更细颗粒度,可以使用同步代码块来修饰可能发生同步问题的部分代码, 而不是整个方法<br> 同步方法使用synchronized修饰词<br> 同步代码块使用synchronized(object){}, 括号中的object指的是锁对象, 用this代表调用该方法的对象.</p></li><li><p><strong>在监视器(Monitor)内部,是如何做到线程同步的? 程序应该做那种级别的同步?</strong></p><p> 在一个对象的头部信息中,保存了锁状态,锁状态存放了一个线程ID,一个锁状态位,还有一个锁监视器标记位,其指针指向Monitor对象,每个对象都拥有对应的Monitor对象.Monitor中有一个执行当前锁持有者线程的指针,还有两个队列,EntryList和WaitList,当线程执行wait时,进入WaitList队列,唤醒后,进入EntryList; 当持有锁的线程释放锁后,指针会执行EntryList中下一个要持有锁的线程.只有Monitor执行的锁持有者才能执行锁中的代码.</p></li><li><p><strong>什么是死锁</strong></p><p>死锁是指多个线程因争夺资源进入一种僵持状态,若无外力,这些线程都无法继续执行<br>线程争夺互斥资源,且该资源被占有后无法被抢,在一个线程获得互斥资源后,又请求其他资源,而其他资源已被占有,又不释放自己的资源,且整个程序中存在线程资源循环等待链, 比如一个占据了A请求B 而另一个占据了B请求A.</p></li><li><p><strong>如何确保N个线程访问N个资源,同时不导致死锁</strong></p><p>指定线程获取锁的顺序, 如果所有线程都按照指定的顺序获取锁,就不会导致死锁了</p></li><li><p><strong>Java集合框架中的基本接口有</strong><br>Collection:代表一组对象的集合,每一个对象都是它的子元素</p><pre><code>List:继承Collection,是有顺序的Collection,可以包含重复元素Vector: 线程安全的ListSet: 不包含重复元素的CollectionQueue: 用于实现队列的数据结构</code></pre><p>Map:key-value对象,把(键)key映射到值(value)的对象,键不能重复.</p></li><li><p><strong>为什么集合类接口没有实现Cloneable和Serializable接口</strong></p><p>接口没有实现, 但是具体的实现类实现了这两个接口,比如HashMap,HashSet,LinkedList,ArrayList.<br>Cloneable用于实现克隆; Serializable用于实现序列化,用于网络传输或者写入</p></li><li><p><strong>什么是迭代器</strong></p><p>迭代器Iterator接口提供了很多对集合元素进行迭代的方法, 每个集合类都包含了可以返回迭代器的迭代方法,迭代器可以在迭代的过程中操作底层集合的元素,如删除</p></li><li><p><strong>Iterator和ListIterator的区别是什么?</strong></p><p>Iterator可以依赖遍历Set和List集合,但是ListIterator只能依赖遍历List<br>Iterator对集合只能前序遍历, ListIterator既可以前序也可以后序<br>ListIterator实现了Iterator接口,并扩展了以下功能, 如增加元素,替换元素,获取前一个和后一个元素的索引等.</p></li><li><p><strong>fail-fast(快速失败)和fail-safe(安全失败)的区别是什么</strong></p><ol><li>fail-fast:<br> 在使用迭代器遍历一个集合对象时,如果遍历过程中对集合对象的结构进行了修改,(增加,删除),则会抛出ConcurrentModifficationException.<br> 原理是 迭代器在遍历时直接访问集合中的内容,且在遍历过程中使用一个modCount变量,集合在被遍历期间如果结构发生变化,就会改变modCount的值,每当迭代器使用hashNext(),next()方法时,都会监测modCount变量是否为expectedmodCount值,是的话返回遍历,否则抛出异常.要删除元素是使用iterator中的remove()而不要直接使用集合的remove方法<br> java.util下的集合类都是使用fail-fast, 不能在多线程下发生并发迭代中的修改</li><li>fail-safe:<br> 采用安全失败机制的集合容器,在遍历时不是直接在集合内容上访问的,而是先复制一份集合内容, 在拷贝的集合上操作, 但是只能访问拷贝时的元素, 拷贝后发生的修改是不能访问的</li></ol></li><li><p><strong>Java中的HashMap的工作原理是什么?</strong></p><p>HashMap是以键值对的形式存储元素,HashMap在jdk1.8中使用数组+链表+红黑树的形式来存放数据, 每个数据都封装成节点, 节点中保存了key-value,HashMap使用链地址法来解决hash冲突,数据的key通过计算hash值映射到数组上,数组的每个位置存放了一个链表头结点,相同hash值存放在相同数组下表里的链表中.<br>put方法第一步, 计算元素key对应的hash值对应的索引位置,判断是红黑树还是链表,链表在尾部插入,(链表长度大于8时转成红黑树), 如果是红黑树插入完后进行自平衡. 插入完如果当前容器容量大于阈值,要进行扩容操作, 扩容操作是新建一个长度2倍的数组, 因此每个节点的hash值都要重新计算, 所以扩容操作将耗费巨大资源</p></li><li><p><strong>hashCode()和equals()方法的重要性体现在什么地方</strong></p><p>Java中的HashMap使用hashCode和equals方法来确定节点索引,根据键计算hash值,然后与内部数组长度取余,得到在数组中的索引,然后用equals来判断key是否相等,查找,添加,删除中, 都需要进行判断key是否相等,而equals比较的正式hashCode计算的值,hashCode默认实现是返回对象地址.</p></li><li><p><strong>HashMap和HashTable有什么区别</strong></p><p>HashMap和HashTable都实现了Map接口,但是有以下区别<br>HashMap允许键和值是null,而HashTable不允许键或值为null<br>HashTable是同步的,线程安全,而HashMap不是<br>由于HashTable需要维持线程安全,所以效率低于HashMap<br>HashTable是遗留类,不推荐使用, 目前有ConcurrentHashMap替代</p></li><li><p><strong>数组Array和列表ArrayList有什么区别,什么时候要用Array而不用ArrayList</strong></p><p>Array可以包含基本类型和对象类型, ArrayList只能包含对象类型(基本类型用包装类型来替代)<br>Array大小固定,ArrayList可以动态扩容<br>ArrayList提供了更多方法和特性<br>对于固定长度的数据,可以使用Array,它的效率比ArrayList高</p></li><li><p><strong>ArrayList和LinkedList有什么区别?</strong></p><p>ArrayList是基于数组实现的集合,LinkedList是使用节点来实现的集合,节点通过指针连接起来<br>ArrayList有动态扩容机制, 扩容的时候才会开辟内存,LinkedList添加一次开辟一次内存<br>LinkedList的删除,插入,添加操作更快<br>LinkedList实现了链表,队列,栈数据结构 ArrayList只是动态数组</p></li><li><p><strong>Comparable和Comparator接口是干什么的,有什么区别</strong></p><p>Comparable接口提供了一个compareTo()方法, 类实现这个接口后, 可以判断该类的实例化对象间的大小<br>Comparator提供了compare()和equals()两个方法,compare()接收两个参数,用来判断大小,equals()方法需要一个对象作为参数,它用来决定输入的参数是否和comparator(Comparator实例对象)相等<br>在集合创建中, 构造函数往往接收Comparator对象,用于定义如何比较元素大小<br>或者直接让元素实现Comparable接口,定义比较方法. 一个是创建集合是定义, 一个是直接在元素中定义.</p></li><li><p><strong>什么是Java优先级队列(PriorityQueue)</strong></p><p>PriorityQueue是一个基于优先级堆的无界队列,它的元素是按照自然顺序排序的,在创建的时候,可以传入比较器定义如何排序,PriorityQueue不允许null值,因为null无法排序, PriorityQueue可以按照任何顺序插入, 但取出是保持排序顺序,它内部使用自我调整二叉树,所以检索的时间复杂度是O(logn); 二分查找</p></li><li><p><strong>你了解大O符号嘛,你能给出不同数据结构的例子嘛?</strong></p><p>大O符号描述了一个程序运行时所需要的时间复杂度上界<br>大O还可以用来描述空间复杂度</p></li><li><p><strong>如何权衡是使用无序的数组还是有序的数组</strong></p><p>有序数组的最大好处是查找的时间复杂度是O(logn)(二分查找),而无序数组是O(n)(遍历查找),<br>有序数组的缺点是插入时需要比较数据,找到合适的位置,复杂度O(n),而无序数组可以插入到最后位置,复杂度O(1)</p></li><li><p><strong>Java集合类框架的最佳实践有哪些</strong></p><p>图来自<a href="https://blog.csdn.net/qq_36711757/article/details/80464499" target="_blank" rel="noopener">https://blog.csdn.net/qq_36711757/article/details/80464499</a><br><img src="/2020/03/11/Java%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/Java%E9%9B%86%E5%90%88%E7%B1%BB%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9.png" alt="Java集合类如何选择"></p></li><li><p><strong>Enumeration接口和Iterator接口有什么区别</strong></p><p>Enumeration速度是Iterator2倍,同时占用更少内存,但是Iterator远比Enumeration安全<br>Iterator支持fail-fast机制,Enumeration不行<br>Iterator可以删除底层集合元素,Enumeration只能遍历访问</p></li><li><p><strong>HashSet和TreeSet有什么区别</strong></p><p>HashSet基于HashMap实现, 把元素保存为key,实现了不重复元素; TreeSet底层是红黑树结构,<br>HashSet是无序的, TreeSet是有序的,一次TreeSet创建时要传入比较器,或者元素实现Comparable</p></li><li><p><strong>Java中垃圾回收有什么目的? 什么时候进行垃圾回收?</strong></p><p>垃圾回收的目的是识别并且回收不再使用的对象,来释放内存空间<br>触发垃圾回收的时机是当前程序空闲, 或者Java堆空间不足时, 或者人为调用GC方法时<br>JVM将部分对象分为gc root对象,如栈中引用到的对象. 没有直接或间接被root对象引用的对象,都会被GC(可达性分析)</p></li><li><p><strong>System.gc()和Runtime.gc()会做什么事?</strong></p><p>两个方法都是用来提示JVM进行垃圾回收,但是是否立即执行GC要看JVM情况, 两者的行为实际上没有什么不同</p></li><li><p><strong>finalize()方法什么时候被调用? 析构函数(finalization)的目的是什么?</strong></p><p>GC决定回收某对象时,就会运行该对象的finalize()方法,如果子类没有重写这个方法,就直接回收,不做其他事;但是在Java中,如果内存一直充足,GC可能一直不会进行,也就是说finalize()方法可能永远不会执行.<br>当你使用到native方法时, 就需要在finalization里调用C的释放函数.</p></li><li><p><strong>Java堆的结构是什么样子的?什么是堆中的永久代?</strong></p><p>JVM的堆是运行时数据区,所有类的实例和数组都是在堆上分配内存,在JVM启动时创建,JVM堆内存管理采用垃圾回收<br>永久代用于存放静态文件, 如Java类,静态变量和静态方法等,在Java8中取消了永久代, 改为了元空间(常量池), 在堆空间之外</p></li><li><p><strong>串行(serial)收集器和吞吐量(throughtput)收集器的区别是什么?</strong></p><p>串行GC, 整个垃圾回收过程采用单线程,而且它进行垃圾回收时会暂停其他所有工作,适合单CPU,或者客户端级别, 它是JVM在Client模式下的默认GC<br>吞吐量GC, 采用多线程的方式来完成GC,适合于吞吐量要求高的场景, 主要采用复制算法</p></li><li><p><strong>在Java中,对象什么时候可以被垃圾回收?</strong></p><p>当一个对象到GC Roots不可达时,进行第一次标记,第一次标记后,判断对象是否重写了finalize()方法和是否已经被调用finalize()方法,若没有重写或者已经被调用过一次了,则进行回收; 把重写了finalize()并且还没被调用过的对象仿佛F-Queue中,<br>第二次标记之前,对象如果执行finalize()方法并自救,对象不会被回收,否则完成第二次标记后,进行回收, 但是finalize()方法并不可靠,自救不一定成功</p></li><li><p><strong>JVM的永久代中会发生垃圾回收嘛?</strong></p><p>会的, 如果永久代满了或者超过了阈值,都会触发Full GC; Java8中取消了永久代</p></li><li><p><strong>Java中的两种异常类型是什么</strong></p><p>Java中的异常分为受检查异常和非检查异常(又叫运行时异常)<br>运行时异常在编译时不会检查,即使没有用try..catch也没有throws,还是会编译通过<br>受检查异常,必须要try…catch或throws才能通过编译.<br>Error是错误,由JVM生成并抛出</p></li><li><p><strong>Java中Exception和Error有什么区别?</strong></p><p>Exception和Error都是Throwable的子类,Exeception用于用户程序可以捕获的异常情况,可以捕获然后处理异常,使程序恢复运行;Error定义了不期望被用户捕获的异常,如系统崩溃,JVM错误等等</p></li><li><p><strong>throw和throws有什么区别?</strong></p><p>throw用于方法内部, throws用于方法声明上.<br>throw后跟异常对象,Throws后跟异常类型<br>Throw后只能跟一个对象,Throws后可以跟多个异常类型</p></li><li><p><strong>异常处理完成以后,Exception对象会发生声明变化</strong></p><p>Exception对象会在下一轮GC中被回收</p></li><li><p><strong>finally代码块和finalize()方法有什么区别?</strong></p><p>finally跟在try..catch代码块后面, 无论是否有异常, finally代码块都会执行,它主要用来释放资源, 比如关闭流<br>finalize()方法是Object定义的方法,它是对象被回收之前由JVM来调用的,通过重写该方法, 可以实现GC自救</p></li><li><p><strong>什么是JDBC?</strong></p><p>JDBC用来适配java代码和数据库,允许开发者用Java语言和标准SQL来写数据库应用程序,而不需要关系特定的数据库细节.</p></li><li><p><strong>Class.forNmae()方法有什么作用?</strong></p><p>加载参数指定的类的.class文件,返回参数指定的类或接口对应的Class对象,每个类对应一个class对象, class对象执行newInstance()方法会放回该类的实例化对象.<br>Class.forName()可以根据类名来动态加载类创建对象</p></li><li><p><strong>数据库连接池是什么意思</strong></p><p>数据库连接池是一个线程池, 其中维护了与数据库的连接, 连接的建立和销毁都是需要时间的, 数据库连接池维护一组数据库连接, 使用时获取一个连接,用完后归还到池中, 有效复用</p></li><li><p><strong>什么是RMI?</strong></p><p>Java远程方法调用(Java RMI)是Java API对远程过程调用(RPC)的一种实现,远程方法调用允许一个Java虚拟机上的对象调用另一个Java虚拟机上的对象的方法,从而使Java编程人员可以方便的在网络环境中作分布式计算</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面试题集01&quot;&gt;&lt;a href=&quot;#面试题集01&quot; class=&quot;headerlink&quot; title=&quot;面试题集01&quot;&gt;&lt;/a&gt;面试题集01&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;什么是Java虚拟机? 为什么Java被称作是”平台无关的编程语
      
    
    </summary>
    
    
      <category term="Java面试专题" scheme="https://yimchengjie.github.io/categories/Java%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="Java" scheme="https://yimchengjie.github.io/tags/Java/"/>
    
      <category term="面试" scheme="https://yimchengjie.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中String在jvm内存中位置</title>
    <link href="https://yimchengjie.github.io/2020/03/04/JavaSE/Java%E4%B8%ADString%E5%9C%A8jvm%E5%86%85%E5%AD%98%E4%B8%AD%E4%BD%8D%E7%BD%AE/"/>
    <id>https://yimchengjie.github.io/2020/03/04/JavaSE/Java中String在jvm内存中位置/</id>
    <published>2020-03-04T09:14:33.000Z</published>
    <updated>2020-03-04T09:19:23.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中String在jvm内存中位置"><a href="#Java中String在jvm内存中位置" class="headerlink" title="Java中String在jvm内存中位置"></a>Java中String在jvm内存中位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//intern 如果存在在常量池, 返回常量池中的,</span></span><br><span class="line">        <span class="comment">//       如果存在在堆, 返回堆中的对象引用</span></span><br><span class="line">        String a=<span class="string">"hello"</span>;  <span class="comment">//在常量池</span></span><br><span class="line">        String b=<span class="string">"hello"</span>;  <span class="comment">//在常量池</span></span><br><span class="line">        System.out.println(a==b);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        String c=<span class="keyword">new</span> String(<span class="string">"hello"</span>);  <span class="comment">//在堆</span></span><br><span class="line">        System.out.println(b==c);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        String d=<span class="string">"world"</span>; <span class="comment">//在常量池</span></span><br><span class="line"></span><br><span class="line">        String aa=a+d;  <span class="comment">//在常量池</span></span><br><span class="line">        String bb=c+d;  <span class="comment">//在堆</span></span><br><span class="line">        System.out.println(aa==bb); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        bb.intern();  <span class="comment">//将堆中引用创建到常量池</span></span><br><span class="line">        String cc=<span class="keyword">new</span> String(<span class="string">"helloworld"</span>); <span class="comment">//创建在堆中</span></span><br><span class="line">        System.out.println(bb==cc);    <span class="comment">//false</span></span><br><span class="line">        System.out.println(bb==cc.intern());  <span class="comment">//true   cc.intern()发现了在常量池中bb创建的引用,并返回</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结:<br><code>String str=new String(&quot;abc&quot;);</code> 会在常量池和堆中都创建abc, str指向堆中的abc<br><code>String str=&quot;abc&quot;;</code>只在常量池创建abc<br><code>String str=new String(&quot;abc&quot;)+&quot;def&quot;;</code>在常量池中创建abc,def;在堆中创建abc和abcdef; str指向堆中abcdef;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java中String在jvm内存中位置&quot;&gt;&lt;a href=&quot;#Java中String在jvm内存中位置&quot; class=&quot;headerlink&quot; title=&quot;Java中String在jvm内存中位置&quot;&gt;&lt;/a&gt;Java中String在jvm内存中位置&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="JavaSE" scheme="https://yimchengjie.github.io/categories/JavaSE/"/>
    
    
      <category term="JVM" scheme="https://yimchengjie.github.io/tags/JVM/"/>
    
      <category term="JavaSE" scheme="https://yimchengjie.github.io/tags/JavaSE/"/>
    
      <category term="String" scheme="https://yimchengjie.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>语言模型</title>
    <link href="https://yimchengjie.github.io/2020/02/29/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    <id>https://yimchengjie.github.io/2020/02/29/自然语言处理/语言模型/</id>
    <published>2020-02-29T13:09:54.000Z</published>
    <updated>2020-03-15T04:56:08.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语言模型"><a href="#语言模型" class="headerlink" title="语言模型"></a>语言模型</h2><p>模型指的是对事物的数学抽象,语言模型就是对语言现象的数学抽象</p><p>每个词的概率通过模拟人们说话的顺序,预测下一个单词的概率,一个单词一个单词的相乘, 就有了一句话的概率<br>一句话有多种不同的分词方式, 每种分词方式的概率都可以通过上述计算</p><p>但这样有一个问题, 遇到长的句子的时候, 概率会非常低(想象<code>(1/n)^n</code>), 都无穷接近0时, 导致无法区分, 而且</p><h3 id="马尔可夫"><a href="#马尔可夫" class="headerlink" title="马尔可夫"></a>马尔可夫</h3><p>马尔可夫链: 给定时间线上有一串时间顺序发生,假设每个事件的发生概率只取决于前一个事件,那么这船事件构成的因果链被称作马尔可夫链</p><p>在语言模型中, 马尔可夫链假设每个单词的概率只于他前一个单词有关</p><p>采用马尔可夫链的语言模型也叫<strong>二元语法模型</strong></p><p>由此我们可以得出<strong>n元语法模型</strong>,没个词的概率与它之前的n个词有关</p><p>计算词的概率为<code>P(wi|wi-1)</code>它代表在wi-1的条件下wi发生的概率</p><p>P(wi|wi-1)=c(wi-1,wi)/c(wi-1)</p><p>c(wi-1,wi)代表语料库中(wi-1 wi)这个词组出现的次数<br>c(wi-1)代表语料库中(wi-1)这个词出现的次数</p><h3 id="中文分词语料库"><a href="#中文分词语料库" class="headerlink" title="中文分词语料库"></a>中文分词语料库</h3><p>语言模型只是一个函数的骨架, 参数需要有语料库的支撑</p><p>语料库的制定需要大量人力物力, 一般使用公开的语料库</p><h4 id="语料库统计"><a href="#语料库统计" class="headerlink" title="语料库统计"></a>语料库统计</h4><p>语料库统计, 就是统计语料库字数,词语种数,总词频等</p><p>语料库种数: 不重复的词语的数量<br>总词频: 语料库中总共出现了多少个词</p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>训练: 是指给定样本集(训练集)调整模型参数的过程</p><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>预测: 指的是利用模型对样本进行推断的过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;语言模型&quot;&gt;&lt;a href=&quot;#语言模型&quot; class=&quot;headerlink&quot; title=&quot;语言模型&quot;&gt;&lt;/a&gt;语言模型&lt;/h2&gt;&lt;p&gt;模型指的是对事物的数学抽象,语言模型就是对语言现象的数学抽象&lt;/p&gt;
&lt;p&gt;每个词的概率通过模拟人们说话的顺序,预测下一个单
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>树形结构</title>
    <link href="https://yimchengjie.github.io/2020/02/23/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    <id>https://yimchengjie.github.io/2020/02/23/算法与数据结构/树形结构/</id>
    <published>2020-02-23T10:06:37.000Z</published>
    <updated>2020-03-10T08:18:45.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h2><hr><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><ul><li>节点,根节点,父节点,子节点,兄弟节点</li><li>空树: 没有任何节点</li><li>只有一个节点的树, 也就是只有根节点</li><li>子树,左子树,右子树</li><li>节点的<strong>度</strong>: 子树的个数</li><li>树的度: 所有节点度中的最大值</li><li><strong>叶子节点</strong>: 度为0的节点</li><li><strong>层数</strong>: 根节点在第一层,根节点的子节点在第二层(以此类推)</li><li>节点的<strong>深度</strong>: 从根节点到当前节点的唯一路径上的节点个数</li><li>节点的<strong>高度</strong>: 从当前节点到最远的叶子节点的路径上的节点总数</li><li>树的深度: 所有节点深度中的最大值</li><li>树的高度: 所有节点高度中的最大值</li><li>树的深度等于高度</li></ul><h3 id="有序树-无序树-森林"><a href="#有序树-无序树-森林" class="headerlink" title="有序树,无序树,森林"></a>有序树,无序树,森林</h3><p>有序树:</p><ul><li>树中任意节点的子节点之间有顺序</li></ul><p>无序树:</p><ul><li>树中任意节点的子节点之间没有顺序关系</li></ul><p>森林:</p><ul><li>由m(m&gt;=0)课互补相交的树组成的集合</li></ul><h3 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h3><p>二叉树特点</p><ul><li>每个节点的度的最大值为2(最多拥有2课子树)</li><li>左子树和右子树是有顺序的</li><li>即使某节点只有一颗子树,也要区分是左子树还是右子树</li><li>非空二叉树的第i层,最多有2^(i-1)个节点</li><li>在高度为h的二叉树上最多有2^h-1个节点</li><li>对于任何一颗非空二叉树,如果叶子节点个数为n0, 度为2的节点个数为n2,则有<strong>n0=n2+1</strong><ul><li>假设度为1的节点个数为n1,那么二叉树的节点总数为n=n0+n1+n2</li><li>二叉树的边数T=n1+2*n2=n-1=n0+n1+n2-1</li></ul></li></ul><p>真二叉树: 所有节点的度都是0或2</p><p>满二叉树: 是真二叉树,且所有的叶子节点都在最后一层</p><p>完全二叉树: 叶子节点只会出现在最后两层,且最后一层的叶子节点都靠左对齐</p><ul><li>度为1的节点只有左子树</li><li>度为1的节点要么是1个要么是0个.</li><li>同样节点数量的二叉树,完全二叉树的高度最小</li><li>一颗有n个节点的完全二叉树(n&gt;0),从上到下,从左到右对节点从1开始编号,对任意节点如果有i=1,它是更节点;如果i&gt;1,它的父节点编号为floor(i/2); 如果2i&lt;=n,它的左子节点编号为2i;如果2i&gt;n,它无左子节点; 如果2i+1&lt;=n,它的右子节点编号为2i+1; 如果2i+1&gt;n,它无右子节点</li></ul><h4 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h4><p>二叉排序树又称二叉搜索树</p><ul><li>任意一个节点的值都大于其左子树所有节点的值</li><li>任意一个节点的值都小于其右子树所有节点的值</li><li>它的左右子树也符合二叉排序树</li></ul><p>二叉搜索树可以大大提高搜索数据的效率<br>二叉搜索树存储的元素必须具备可比较性,不允许为空</p><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>访问顺序:<br>根节点-前序遍历左子树-前序遍历右子树</p><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>访问顺序:<br>中序遍历左子树-根节点-中序遍历右子树</p><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>访问顺序:<br>后序遍历左子树-后序遍历右子树-根节点</p><h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><p>访问顺序:<br>从上到下、从左到右依次访问每一个节点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;树形结构&quot;&gt;&lt;a href=&quot;#树形结构&quot; class=&quot;headerlink&quot; title=&quot;树形结构&quot;&gt;&lt;/a&gt;树形结构&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;树的基本概念&quot;&gt;&lt;a href=&quot;#树的基本概念&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://yimchengjie.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://yimchengjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="https://yimchengjie.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>词典分词</title>
    <link href="https://yimchengjie.github.io/2020/02/17/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%AF%8D%E5%85%B8%E5%88%86%E8%AF%8D/"/>
    <id>https://yimchengjie.github.io/2020/02/17/自然语言处理/词典分词/</id>
    <published>2020-02-17T05:09:54.000Z</published>
    <updated>2020-03-14T12:59:56.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词典分词"><a href="#词典分词" class="headerlink" title="词典分词"></a>词典分词</h2><hr><p>词典分词是基于规则的分词手段<br>给定一部词典,词典分词就是一个确定的查词和输出的规则系统.</p><h3 id="什么是词"><a href="#什么是词" class="headerlink" title="什么是词"></a>什么是词</h3><h4 id="词的定义"><a href="#词的定义" class="headerlink" title="词的定义"></a>词的定义</h4><p>在语言学上,词语的定义是具备独立意义的最小单位. 但是对于一些词,比如”吃饭”,有些人会认为”吃饭”是一个词, 有些人会认为,应该拆分为”吃”,”饭”;由于没有统一标准,所以语言学上的定义没有实施效果.</p><p>在中文分词当中,词的定义就是字典中的字符串;因此不在字典中的字就不属于词了.而词是不断变化的,数量也是无穷无尽的.</p><h4 id="齐夫定律"><a href="#齐夫定律" class="headerlink" title="齐夫定律"></a>齐夫定律</h4><p>齐夫定律: 一个单词的词频和它的词频排名成反比.<br>这意味着, 排面越靠后的单词, 它的词频会越来越接近 0.</p><p>所以词典把词频较高的部分收录,就能解决大部分的分词了.</p><h3 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h3><p>一般一部分词词典的其中一条数据有这样的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单词 词性 词频 --&gt;</span><br><span class="line">希望 v 386 n 96</span><br></pre></td></tr></table></figure><h3 id="切分算法"><a href="#切分算法" class="headerlink" title="切分算法"></a>切分算法</h3><ol><li><p>完全切分<br>完全切分就是将一段文本中的所有单词,中所有可能的词都切分开来, 具体的做法就是双循环遍历所有可能的词.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentFully</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; wordList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= text.length(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            String word = text.substring(i, j);</span><br><span class="line">            <span class="keyword">if</span> (dictionary.containsKey(word))</span><br><span class="line">            &#123;</span><br><span class="line">                wordList.add(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正向最长匹配<br>在完全切分的基础上, 优化为优先输出更长的单词, 正向最长指的是下标的扫描是从前往后, 二层循环中, 循环一次最多保存一个最长词.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentForwardLongest</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">     List&lt;String&gt; wordList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); )</span><br><span class="line">     &#123;</span><br><span class="line">         String longestWord = text.substring(i, i + <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= text.length(); ++j)</span><br><span class="line">         &#123;</span><br><span class="line">             String word = text.substring(i, j);</span><br><span class="line">             <span class="keyword">if</span> (dictionary.containsKey(word))</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (word.length() &gt; longestWord.length())</span><br><span class="line">                 &#123;</span><br><span class="line">                     longestWord = word;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         wordList.add(longestWord);</span><br><span class="line">         i += longestWord.length();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逆向最长匹配<br>与正向最长匹配的区别是下标扫描从后往前,正向是从短的单词扫描到长的单词,逆向是从最长的词扫描到最短的词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentBackwardLongest</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">     List&lt;String&gt; wordList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = text.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; )</span><br><span class="line">     &#123;</span><br><span class="line">         String longestWord = text.substring(i, i + <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line">         &#123;</span><br><span class="line">             String word = text.substring(j, i + <span class="number">1</span>);</span><br><span class="line">             <span class="keyword">if</span> (dictionary.containsKey(word))</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (word.length() &gt; longestWord.length())</span><br><span class="line">                 &#123;</span><br><span class="line">                     longestWord = word;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         wordList.add(<span class="number">0</span>, longestWord);</span><br><span class="line">         i -= longestWord.length();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向最长匹配<br>双向最长匹配就是将正向最长和逆向最长结合起来<br><strong>同时执行</strong>正向和逆向<br><strong>返回词数少的</strong>那个,<br>或者<strong>返回单个字少的</strong>那个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentBidirectional</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">     List&lt;String&gt; forwardLongest = segmentForwardLongest(text, dictionary);</span><br><span class="line">     List&lt;String&gt; backwardLongest = segmentBackwardLongest(text, dictionary);</span><br><span class="line">     <span class="keyword">if</span> (forwardLongest.size() &lt; backwardLongest.size())</span><br><span class="line">         <span class="keyword">return</span> forwardLongest;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (forwardLongest.size() &gt; backwardLongest.size())</span><br><span class="line">         <span class="keyword">return</span> backwardLongest;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (countSingleChar(forwardLongest) &lt; countSingleChar(backwardLongest))</span><br><span class="line">             <span class="keyword">return</span> forwardLongest;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             <span class="keyword">return</span> backwardLongest;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 统计分词结果中的单字数量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countSingleChar</span><span class="params">(List&lt;String&gt; wordList)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (String word : wordList)&#123;</span><br><span class="line">         <span class="keyword">if</span> (word.length() == <span class="number">1</span>)</span><br><span class="line">             ++size;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> size;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><p>字典树就是关于”字典”的一棵树,字典树也叫Trie树, 它是用于字典的一种存储方式,是一种数据结构<br>这个词典中的每个”单词”从根节点出发一直到某一个目标节点的路径, 路径中每条边的字连起来的就是一个词, 词的最后一个字被称为标记节点, 标记节点不一定是叶子节点<br>拥有相同前缀的词,会排列在一颗子树上 只是深度不同</p><p>依靠字典树  查词的方式就好像在使用字典的拼音查词</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;词典分词&quot;&gt;&lt;a href=&quot;#词典分词&quot; class=&quot;headerlink&quot; title=&quot;词典分词&quot;&gt;&lt;/a&gt;词典分词&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;词典分词是基于规则的分词手段&lt;br&gt;给定一部词典,词典分词就是一个确定的查词和输出的规则系统.&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理入门</title>
    <link href="https://yimchengjie.github.io/2020/02/13/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/02/13/自然语言处理/自然语言处理入门/</id>
    <published>2020-02-13T03:53:11.000Z</published>
    <updated>2020-03-02T03:52:26.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自然语言处理入门"><a href="#自然语言处理入门" class="headerlink" title="自然语言处理入门"></a>自然语言处理入门</h2><hr><p>自然语言处理是一门融合了计算机科学,人工智能以及语言学的交叉学科, 这门学科研究的是如何通过机器学习等技术,让计算机学会处理人类的语言,最终实现理解人类语言</p><h3 id="自然语言处理的层次"><a href="#自然语言处理的层次" class="headerlink" title="自然语言处理的层次"></a>自然语言处理的层次</h3><ol><li><p>语音,图像和文本<br>在自然语言处理中,语音和图像都会通过处理,如语音识别,光学字符识别等转化为文本,然后再开始自然语言处理任务</p></li><li><p>中文分词,词性标注和命名实体识别<br>这三个人物都是围绕词语进行,统称为<strong>词法分析</strong>, 其主要任务就是将文本分隔为有意义的词语(中文分词),确定每个词语的词性和浅层的歧义消除(词性标注),并且识别一些较长的专有名词(命名实体识别)</p></li><li><p>信息抽取<br>词法分析结束以后,文本呈现的是结构化的单词列表, 信息抽取通过算法抽取出需要的信息,比如抽取出文本中所有公司, 抽取出句子的关键词</p></li><li><p>文本分类和文本聚类<br>文本分类是将文本分门别类整理出来<br>文本聚类是将相似的文本归档,排除重复文档,而不关系文档具体类别</p></li><li><p>句法分析<br>词法分析只能得到零散的词汇, 还不知道词与词之间的联系, 句法分析就是得到词语词之间的关系</p></li><li><p>语义分析与篇章分析<br>语义分析区别于语法分析,侧重语义而非语法,包括词义消歧(确定一个多义词在句子中的意思),语义角色标注(标注谓语与句子其他成分的关系),语义依存分析(分析句子中词语之间的语义关系)</p></li></ol><h3 id="自然语言处理的历史"><a href="#自然语言处理的历史" class="headerlink" title="自然语言处理的历史"></a>自然语言处理的历史</h3><table><thead><tr><th>基础研究</th><th>基于规则的专家系统</th><th>基于统计的学习方法</th><th>深度学习</th></tr></thead><tbody><tr><td>1950 年首次提出”机器能否思考”</td><td>1980 年第一个基于规则的专家系统</td><td>1990 年,统计模型语料库</td><td>2010 年后,深层神经网络</td></tr></tbody></table><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习是指: 不直接编程却能赋予计算机提高能力的方法;</p><p>指计算机通过某项任务的经验数据提高了在该项任务上的能力.</p><h4 id="机器学习的重要概念"><a href="#机器学习的重要概念" class="headerlink" title="机器学习的重要概念"></a>机器学习的重要概念</h4><ol><li><p>模型: 模型是对现实问题的数学抽象,由一个假设函数以及一系列参数构成<br>在机器学习中, 算法指机器学习的方法, 模型指被机器学习的算法<br>模型参数指特征权重或特征优先级</p></li><li><p>特征: 特征是指事物的特点转化成的数值(要提取事物的哪些特征需要取决于具体的问题)<br>提取特征的过程称为特征提取<br>自动提取特征的模板称为特征模板<br>设计特征模板的过程称为特征过程</p></li><li><p>数据集: 数据集可以理解为机器学习的习题集, 在自然语言处理中称为<strong>语料库</strong>, 数据集中的一个实例称为样本</p></li><li><p>监督学习: 数据集附带标准答案,机器通过与答案的对比,慢慢修正模型参数, 迭代学习<br>迭代学习的过程称为训练<br>训练用到的数据集称为训练集<br>利用训练后的模型进行计算的过程称为预测</p></li><li><p>无监督学习: 没有答案的训练<br>无监督学习一般用于聚类和降为, 两者不需要标注数据</p></li></ol><h5 id="语料库"><a href="#语料库" class="headerlink" title="语料库"></a>语料库</h5><p>语料库作为自然语言处理的数据集, 是机器学习不可或缺的习题集, 每个语料库都有不同用途; 语料规则难以制定,规范难以执行.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自然语言处理入门&quot;&gt;&lt;a href=&quot;#自然语言处理入门&quot; class=&quot;headerlink&quot; title=&quot;自然语言处理入门&quot;&gt;&lt;/a&gt;自然语言处理入门&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;自然语言处理是一门融合了计算机科学,人工智能以及语言学的交叉学科, 这门学科研究的
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Electron+Vue入门</title>
    <link href="https://yimchengjie.github.io/2020/02/07/Vue.js/Electron+Vue%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/02/07/Vue.js/Electron+Vue入门/</id>
    <published>2020-02-07T08:24:19.000Z</published>
    <updated>2020-03-02T02:52:59.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Electron-Vue入门"><a href="#Electron-Vue入门" class="headerlink" title="Electron+Vue入门"></a>Electron+Vue入门</h2><hr><h3 id="了解Electron"><a href="#了解Electron" class="headerlink" title="了解Electron"></a>了解Electron</h3><p>Electron是由Github开发，<strong>用HTML，CSS和JavaScript来构建跨平台桌面应用程序</strong>的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><p>Electron使用Web页面来作为桌面应用的GUI,所以可以把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器</p><h3 id="Electron-Vue结合使用"><a href="#Electron-Vue结合使用" class="headerlink" title="Electron+Vue结合使用"></a>Electron+Vue结合使用</h3><p>Vue的开发环境,node.js,npm就可以进行Electron开发</p><h4 id="使用Electron-vue框架"><a href="#使用Electron-vue框架" class="headerlink" title="使用Electron-vue框架"></a>使用Electron-vue框架</h4><p>Electron-vue是基于electron和vue结合搭建的开发脚手架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/Vue.js/Electron+Vue%E5%85%A5%E9%97%A8/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="脚手架构建项目"></p><h4 id="Electron主进程和渲染进程"><a href="#Electron主进程和渲染进程" class="headerlink" title="Electron主进程和渲染进程"></a>Electron主进程和渲染进程</h4><p>Electron项目启动后,会先找到<code>package.json</code>中的main,找到主进程<code>main.js</code>,在主进程中运行的脚本通过创建Web页面来展示用户界面.Web页面运行在渲染进程. 一个Electron应用总是有且只有一个主进程.</p><p>主要模块:</p><p><img src="/2020/02/07/Vue.js/Electron+Vue%E5%85%A5%E9%97%A8/%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97.png" alt="主要模块"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Electron-Vue入门&quot;&gt;&lt;a href=&quot;#Electron-Vue入门&quot; class=&quot;headerlink&quot; title=&quot;Electron+Vue入门&quot;&gt;&lt;/a&gt;Electron+Vue入门&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;了解Electron&quot;&gt;
      
    
    </summary>
    
    
      <category term="Vue.js" scheme="https://yimchengjie.github.io/categories/Vue-js/"/>
    
    
      <category term="前端框架" scheme="https://yimchengjie.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://yimchengjie.github.io/tags/Vue-js/"/>
    
      <category term="Electron" scheme="https://yimchengjie.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Shiro权限管理</title>
    <link href="https://yimchengjie.github.io/2020/02/07/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Shiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://yimchengjie.github.io/2020/02/07/分布式开发技术/Shiro权限管理/</id>
    <published>2020-02-06T17:30:49.000Z</published>
    <updated>2020-02-27T12:27:22.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shiro权限管理"><a href="#Shiro权限管理" class="headerlink" title="Shiro权限管理"></a>Shiro权限管理</h2><p>Shiro是一款强大灵活的安全框架,可以处理身份<strong>认证</strong>,<strong>授权</strong>,<strong>加密</strong>和<strong>会话管理</strong></p><h3 id="权限管理概念"><a href="#权限管理概念" class="headerlink" title="权限管理概念"></a>权限管理概念</h3><p>一般有用户参与的系统,都需要权限管理,权限管理<strong>实现了对用户访问系统的控制</strong></p><ol><li><p>用户认证</p><p> 用户认证,即用户访问系统时,会被验证用户身份的合法性</p></li><li><p>用户授权</p><p> 在用户认证通过后,系统对用户访问资源进行控制,用户拥有资源的权限时,才可以进行访问</p></li></ol><h4 id="权限管理组成"><a href="#权限管理组成" class="headerlink" title="权限管理组成"></a>权限管理组成</h4><ol><li>主体(账号、密码)</li><li>权限(权限名称、资源名称、资源访问地址)</li><li>角色(角色名称)</li><li>角色和权限的关系(角色id、权限id)</li><li>主体和角色的关系(主体id、角色id)</li></ol><h4 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h4><p>用户需要分配相应的权限才可以访问相应资源<br>通常给用户分配资源权限需要将权限信息持久化保存,比如存到关系型数据库</p><p>然后实现访问控制</p><ol><li><p>基于角色的访问控制</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user.hasRole(<span class="string">"部门经理"</span>))&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 基于角色的访问控制,不利于代码的维护,扩展性差,因为判断角色的条件都写死在代码中</p></li><li><p>基于资源的访问控制</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user.hasPermission (<span class="string">'用户报表查看（权限标识符）'</span>))&#123;</span><br><span class="line">    <span class="comment">//系统资源内容</span></span><br><span class="line">    <span class="comment">//用户报表查看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 资源在系统中不变,建议使用基于资源的访问控制</p></li></ol><h3 id="Shiro架构"><a href="#Shiro架构" class="headerlink" title="Shiro架构"></a>Shiro架构</h3><ol><li>Subject: 当前用户</li><li>SecurityManager: 管理啊所有Subject,SecurityManager是Shiro架构的核心</li><li>Realms: 用户进行权限信息的验证,可以自己实现,它封装了与数据源连接的细节,在配置Shiro的时候,必须指定至少一个Realm来实现认证/授权</li></ol><h4 id="Shiro认证过程"><a href="#Shiro认证过程" class="headerlink" title="Shiro认证过程"></a>Shiro认证过程</h4><ol><li>创建SecurityManager</li><li>Subject提交认证</li><li>SecurityManager认证</li><li>Authenticator认证</li><li>Realm认证</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 框架提供默认Realm</span></span><br><span class="line">    SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">"ycj"</span>,<span class="string">"123456"</span>,<span class="string">"admin"</span>,<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建SecurityManager</span></span><br><span class="line">        DefaultSecurityManager securityManager=<span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//   1.1 为SecurityManager设置Realm</span></span><br><span class="line">        securityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">        <span class="comment">//   2.1 为SecurityUtils注入securityManager</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//   2.2 获取当前Subject</span></span><br><span class="line">        Subject subject=SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//   2.3 收集用户名和凭证</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"ycj"</span>,<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   2.4 将用户名和凭证提交到SecurityManager,获取认证</span></span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="comment">//判断认证状态</span></span><br><span class="line">        System.out.println(<span class="string">"isAuthenticated:"</span> + subject.isAuthenticated());</span><br><span class="line">        <span class="comment">//判断是否有以下角色权限</span></span><br><span class="line">        subject.checkRoles(<span class="string">"admin"</span>,<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//退出,取消授权</span></span><br><span class="line">        subject.logout();</span><br><span class="line">        System.out.println(<span class="string">"isAuthenticated:"</span> + subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shiro权限管理&quot;&gt;&lt;a href=&quot;#Shiro权限管理&quot; class=&quot;headerlink&quot; title=&quot;Shiro权限管理&quot;&gt;&lt;/a&gt;Shiro权限管理&lt;/h2&gt;&lt;p&gt;Shiro是一款强大灵活的安全框架,可以处理身份&lt;strong&gt;认证&lt;/strong
      
    
    </summary>
    
    
      <category term="分布式开发技术" scheme="https://yimchengjie.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Shiro" scheme="https://yimchengjie.github.io/tags/Shiro/"/>
    
      <category term="权限管理" scheme="https://yimchengjie.github.io/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门篇</title>
    <link href="https://yimchengjie.github.io/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>https://yimchengjie.github.io/2020/02/03/容器化技术/Docker入门篇/</id>
    <published>2020-02-02T17:30:49.000Z</published>
    <updated>2020-02-28T08:14:25.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker入门篇"><a href="#Docker入门篇" class="headerlink" title="Docker入门篇"></a>Docker入门篇</h2><hr><p>Docker是世界领先的软件容器平台,利用Docker可以消除协作编码时”在我的机器上可以正常工作”的问题</p><p>Docker将一整套环境打包封装成镜像,无需重复配置环境,解决了环境带来的种种问题. Docker容器间是进程隔离的,互不影响</p><h3 id="Docker术语"><a href="#Docker术语" class="headerlink" title="Docker术语"></a>Docker术语</h3><ol><li>镜像: 系统的环境整个打包</li><li>容器: 镜像启动后的实例</li><li>仓库: 专门存放镜像的地方</li></ol><h3 id="第一个Docker"><a href="#第一个Docker" class="headerlink" title="第一个Docker"></a>第一个Docker</h3><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">官方链接</a></p><p>安装环境: Ubuntu 16.04</p><ol><li><p>更新包索引</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装软件包,允许在HTTPS上使用存储库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg-agent \</span><br><span class="line">software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加Docker的官方GPC秘钥</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p> 通过查看指纹最后8位,以验证是否拥有带指纹的秘钥</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><p> <img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/%E6%A3%80%E9%AA%8C%E7%A7%98%E9%92%A5.png" alt="检验秘钥"></p></li><li><p>设置稳定存储库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">$</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">stable"</span><br></pre></td></tr></table></figure></li><li><p>安装Docker引擎</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 先更新一遍索引包 --&gt;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">&lt;!-- 安装最新版本Docker引擎,Docker社区,Docker容器 --&gt;</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>查看Docker版本</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p> <img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/Docker%E7%89%88%E6%9C%AC.png" alt="Docker版本"></p></li><li><p>运行HelloWorld镜像</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p> <img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/DockerHelloWorld.png" alt="DockerHelloWorld"></p><p> 运行<code>docker run hello-world</code>的过程</p><ol><li>本地找hello-world</li><li>没有,去DockerHub拉取一份hello-world镜像,并运行</li></ol></li></ol><h3 id="配置镜像地址"><a href="#配置镜像地址" class="headerlink" title="配置镜像地址"></a>配置镜像地址</h3><p>Docker默认的镜像地址DockerHub在国外,访问慢,这里添加阿里云的加速</p><p><img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F.png" alt="配置加速"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker入门篇&quot;&gt;&lt;a href=&quot;#Docker入门篇&quot; class=&quot;headerlink&quot; title=&quot;Docker入门篇&quot;&gt;&lt;/a&gt;Docker入门篇&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Docker是世界领先的软件容器平台,利用Docker可以消除协作编码时”
      
    
    </summary>
    
    
      <category term="容器化技术" scheme="https://yimchengjie.github.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://yimchengjie.github.io/tags/Docker/"/>
    
      <category term="容器" scheme="https://yimchengjie.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Selenium在爬虫中的应用</title>
    <link href="https://yimchengjie.github.io/2020/01/30/%E7%88%AC%E8%99%AB/Selenium%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/30/爬虫/Selenium在爬虫中的应用/</id>
    <published>2020-01-30T13:30:22.000Z</published>
    <updated>2020-02-26T14:41:13.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Selenium-在爬虫中的应用"><a href="#Selenium-在爬虫中的应用" class="headerlink" title="Selenium 在爬虫中的应用"></a>Selenium 在爬虫中的应用</h2><hr><h3 id="什么是-Selenium"><a href="#什么是-Selenium" class="headerlink" title="什么是 Selenium"></a>什么是 Selenium</h3><p>Selenium 是目前用的最广泛的 Web UI 自动化测试框架。<br>核心功能是在多个浏览器上进行自动化测试<br>支持跨平台,支持多种语言.</p><h3 id="在-Java-中使用-Selenium"><a href="#在-Java-中使用-Selenium" class="headerlink" title="在 Java 中使用 Selenium"></a>在 Java 中使用 Selenium</h3><p>在学习爬虫实践的过程中,发现很多网站使用 js 渲染,且 api 调用需要秘钥,导致无法爬取, 这时候就用到了 Selenium, 通过 Selenium 我们能得到经过浏览器渲染后产生的 HTML 文档.毕竟浏览器最终呈现的都是解析后的. 这样我们就能获得完整的 HTML 文档了</p><ol><li><p>在 maven 中导入包</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--selenium--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用浏览器调试工具</p><p> 要使用 WebUI 自动化测试, 需要使用浏览器的驱动<br> 工具系统安装的浏览器,选择对应版本的驱动<br> <a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">谷歌浏览器驱动下载地址</a></p></li><li><p>使用 WebDriver</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 得到WebDriver实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebDriver <span class="title">initWebDriber</span><span class="params">(String diverPath)</span> </span>&#123;</span><br><span class="line">    System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, diverPath);<span class="comment">// diverPath是chromedriver服务地址</span></span><br><span class="line">    WebDriver webDriver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">    <span class="keyword">return</span> webDriver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 打开页面</span></span><br><span class="line">webDriver.get(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 进行操作(比如登录,打开隐藏窗口等)</span></span><br><span class="line">driver.findElement(By.className(<span class="string">"UG_box"</span>));<span class="comment">//找到要操作的element</span></span><br><span class="line">webElement.click(); <span class="comment">//使用获得的element进行点击操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 下载页面</span></span><br><span class="line">String html = webDriver.getPageSource();</span><br><span class="line"><span class="comment">// 得到String格式的HTML文档</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="findElement-findElements详解"><a href="#findElement-findElements详解" class="headerlink" title="findElement/findElements详解"></a>findElement/findElements详解</h4><p>通过findElement/findElements可以定位element,获取element进行后续操作<br>通常使用By与之结合, By是一个类,里面封装了获取element的方法.</p><ol><li><p>By.id()</p><p> 根据标签的<strong>id</strong>获取</p></li><li><p>By.name()</p><p> 通过标签的<strong>name</strong>获取</p></li><li><p>By.tagName()</p><p> 根据 标签 获取</p></li><li><p>By.className()</p><p> 根据标签中<strong>类class</strong>的<strong>值</strong>获取</p></li><li><p>By.lintText()</p><p> 通过页面中<strong>超链接包含的文字</strong>来定位</p></li><li><p>By.xpath()</p><p> 通过Xpath语法定位</p></li></ol><h4 id="对于浏览器窗口的操作"><a href="#对于浏览器窗口的操作" class="headerlink" title="对于浏览器窗口的操作"></a>对于浏览器窗口的操作</h4><p>有时候不是所有操作都能用HTML定位来做,比如浏览器弹出的各种窗口</p><ol><li><p>操作弹出窗口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取弹出窗口</span></span><br><span class="line">Alert al = driver.switchTo().alert();</span><br><span class="line"><span class="comment">// 选择确定按钮</span></span><br><span class="line">al.accept();</span><br><span class="line"><span class="comment">// 选择取消按钮</span></span><br><span class="line">al.dismiss();</span><br></pre></td></tr></table></figure></li><li><p>浏览器全屏</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.manage().window().maximize();</span><br></pre></td></tr></table></figure></li><li><p>关闭浏览器窗口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.quit();</span><br><span class="line"></span><br><span class="line">driver.close();</span><br></pre></td></tr></table></figure></li><li><p>刷新/前进/回退</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刷新</span></span><br><span class="line">driver.navigate().refresh();</span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line">driver.navigate().forward();</span><br><span class="line"><span class="comment">// 回退</span></span><br><span class="line">driver.navigate().back();</span><br></pre></td></tr></table></figure></li></ol><h4 id="程序等待方式"><a href="#程序等待方式" class="headerlink" title="程序等待方式"></a>程序等待方式</h4><ol><li><p>sleep();</p><p> 强制等待,设置睡眠时间</p></li><li><p>implicitlyWait()：隐式等待，等待元素被发现、命令完成，超出了设置的时间则跑出异常</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line"><span class="comment">//设置脚本在查找元素时的最大等待时间</span></span><br><span class="line">driver.manage().timeouts().implicitlyWait(<span class="number">15</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></li><li><p>WebDriverWait</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置等待的时长，最长10s</span></span><br><span class="line">WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(driver, <span class="number">10</span>);  </span><br><span class="line">wait.until(ExpectedConditions.presenceOfElementLocated(By.id(<span class="string">"app"</span>))));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Selenium-在爬虫中的应用&quot;&gt;&lt;a href=&quot;#Selenium-在爬虫中的应用&quot; class=&quot;headerlink&quot; title=&quot;Selenium 在爬虫中的应用&quot;&gt;&lt;/a&gt;Selenium 在爬虫中的应用&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;什么是-
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://yimchengjie.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic入门</title>
    <link href="https://yimchengjie.github.io/2020/01/17/%E7%88%AC%E8%99%AB/WebMagic%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/17/爬虫/WebMagic入门/</id>
    <published>2020-01-17T13:39:19.000Z</published>
    <updated>2020-02-26T14:41:31.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebMagic-入门"><a href="#WebMagic-入门" class="headerlink" title="WebMagic 入门"></a>WebMagic 入门</h2><p>WebMagic 采用完全模块化的设计，有着强大的可扩展性,基于 HttpClient 和 Jsoup<br>核心简单但却涵盖了爬虫的全部流程。<br>有着丰富的页面抽取 API<br>支持多线程分布式，支持爬取动态 js<br>没有框架依赖</p><h3 id="WebMagic-架构"><a href="#WebMagic-架构" class="headerlink" title="WebMagic 架构"></a>WebMagic 架构</h3><p>WebMagic 框架包含四个组件，PageProcessor、Scheduler、Downloader 和 Pipeline。这四大组件对应爬虫生命周期中的处理、管理、下载和持久化等功能。<br>这四个组件都是 Spider 中的属性，爬虫框架通过 Spider 启动和管理。</p><ol><li>Downloader: 负责从互联网上下载页面,以便后续处理.一般无需自己实现</li><li>Scheduler: 负责管理待抓取的 URL,以及一些去重工作.一般无需自己实现</li><li>PageProcessor: 负责解析页面,抽取目标信息,以及发现新 URL,需要自定义</li><li>Pipeline: 负责抽取结果的处理,包括计算,持久化等.</li></ol><h4 id="数据流转的对象"><a href="#数据流转的对象" class="headerlink" title="数据流转的对象"></a>数据流转的对象</h4><ol><li>Request: 是对 URL 地址的一层封装,一个 Request 对象对应一个 URL 地址</li><li>Page: 代表了从 Downloader 下载到的一个页面,可能是 HTML 页面也可能是其他文本内容(XML,JSON)</li><li>ResultItems: 相当于一个 MAP,保存了 PageProcessor 处理的结果,供 Pipeline 使用</li></ol><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>maven 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--webmagic--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>在 WebMagic 中,实现爬虫只需要编写一个类,实现 PageProcessor 接口即可,这个类基本上包含了抓取一个网站,所需要写的所有代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPageProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 部分一：抓取网站的相关配置，包括编码、抓取间隔、重试次数等</span></span><br><span class="line">  <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="comment">// process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 部分二：定义如何抽取页面信息，并保存下来</span></span><br><span class="line">      page.putField(<span class="string">"author"</span>, page.getUrl().regex(<span class="string">"https://github\\.com/(\\w+)/.*"</span>).toString());</span><br><span class="line">      page.putField(<span class="string">"name"</span>, page.getHtml().xpath(<span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>).toString());</span><br><span class="line">      <span class="keyword">if</span> (page.getResultItems().get(<span class="string">"name"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//skip this page</span></span><br><span class="line">          page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      page.putField(<span class="string">"readme"</span>, page.getHtml().xpath(<span class="string">"//div[@id='readme']/tidyText()"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 部分三：从页面发现后续的url地址来抓取</span></span><br><span class="line">      page.addTargetRequests(page.getHtml().links().regex(<span class="string">"(https://github\\.com/[\\w\\-]+/[\\w\\-]+)"</span>).all());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> site;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Spider.create(<span class="keyword">new</span> TestPageProcessor())</span><br><span class="line">              <span class="comment">//从"https://github.com/code4craft"开始抓</span></span><br><span class="line">              .addUrl(<span class="string">"https://github.com/code4craft"</span>)</span><br><span class="line">              <span class="comment">//开启5个线程抓取</span></span><br><span class="line">              .thread(<span class="number">5</span>)</span><br><span class="line">              <span class="comment">//启动爬虫</span></span><br><span class="line">              .run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解模式开发"><a href="#注解模式开发" class="headerlink" title="注解模式开发"></a>注解模式开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetUrl</span>(<span class="string">"https://github.com/\\w+/\\w+"</span>)   <span class="comment">//要抓取的目标url</span></span><br><span class="line"><span class="comment">// 在TargetUrl页面得到的URL,只要符合TargetUrl的格式,也会被下载</span></span><br><span class="line"><span class="comment">//  TargetUrl还支持定义sourceRegion，这个参数是一个XPath表达式，指定了这个URL从哪里得到——不在sourceRegion的URL不会被抽取。</span></span><br><span class="line"><span class="meta">@HelpUrl</span>(<span class="string">"https://github.com/\\w+"</span>)   <span class="comment">// 为了访问目标url需要访问的url</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    对于博客页，HelpUrl是列表页，TargetUrl是文章页。</span></span><br><span class="line"><span class="comment">    对于论坛，HelpUrl是帖子列表，TargetUrl是帖子详情。</span></span><br><span class="line"><span class="comment">    对于电商网站，HelpUrl是分类列表，TargetUrl是商品详情。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExtractBy注解主要作用于字段，它表示“使用这个抽取规则，将抽取到的结果保存到这个字段中”。</span></span><br><span class="line">    <span class="meta">@ExtractBy</span>(value = <span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>, notNull = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractByUrl</span>(<span class="string">"https://github\\.com/(\\w+)/.*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractBy</span>(<span class="string">"//div[@id='readme']/tidyText()"</span>)</span><br><span class="line">    <span class="keyword">private</span> String readme;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OOSpider.create(Site.me().setSleepTime(<span class="number">1000</span>)</span><br><span class="line">                , <span class="keyword">new</span> ConsolePageModelPipeline(), GithubRepo.class)</span><br><span class="line">                .addUrl(<span class="string">"https://github.com/code4craft"</span>).thread(<span class="number">5</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一个完整流程"><a href="#一个完整流程" class="headerlink" title="一个完整流程"></a>一个完整流程</h5><ol><li><p>编写爬虫</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetUrl</span>(<span class="string">"https://github.com/\\w+/\\w+"</span>)</span><br><span class="line"><span class="meta">@HelpUrl</span>(<span class="string">"https://github.com/\\w+"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractBy</span>(value = <span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>, notNull = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractByUrl</span>(<span class="string">"https://github\\.com/(\\w+)/.*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractBy</span>(<span class="string">"//div[@id='readme']/tidyText()"</span>)</span><br><span class="line">    <span class="keyword">private</span> String readme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OOSpider是入口, 参数分别为, 请求参数, 结果处理链, 爬虫类</span></span><br><span class="line">    OOSpider.create(Site.me().setSleepTime(<span class="number">1000</span>)</span><br><span class="line">            , <span class="keyword">new</span> ConsolePageModelPipeline(), GithubRepo.class)</span><br><span class="line">            .addUrl(<span class="string">"https://github.com/code4craft"</span>).thread(<span class="number">5</span>).run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebMagic-入门&quot;&gt;&lt;a href=&quot;#WebMagic-入门&quot; class=&quot;headerlink&quot; title=&quot;WebMagic 入门&quot;&gt;&lt;/a&gt;WebMagic 入门&lt;/h2&gt;&lt;p&gt;WebMagic 采用完全模块化的设计，有着强大的可扩展性,基于 H
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="WebMagic" scheme="https://yimchengjie.github.io/tags/WebMagic/"/>
    
  </entry>
  
  <entry>
    <title>线性结构</title>
    <link href="https://yimchengjie.github.io/2020/01/16/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
    <id>https://yimchengjie.github.io/2020/01/16/算法与数据结构/线性结构/</id>
    <published>2020-01-16T04:06:37.000Z</published>
    <updated>2020-03-07T16:36:25.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><hr><p>线性表是具有 n 个相同类型元素的有限序列</p><h3 id="常见的线性表"><a href="#常见的线性表" class="headerlink" title="常见的线性表"></a>常见的线性表</h3><ol><li><p><strong>顺序表</strong>:</p><ul><li><strong>动态数组</strong><ul><li>数组是一种顺序存储的线性表, 所有元素的内存地址都是连续的;</li><li>开辟,销毁内存空间的次数相对较少,但可能造成内存空间浪费(可以采取缩容机制)</li></ul></li></ul></li><li><p><strong>链表</strong>:</p><ul><li><strong>单链表</strong><ul><li>HashMap中用到了单链表</li></ul></li><li><strong>双链表</strong><ul><li>开辟,销毁内存空间的次数相对较多,但不会造成内存空间浪费</li></ul></li><li><strong>循环链表</strong></li><li><strong>静态链表</strong></li></ul></li><li><p><strong>栈</strong>:</p><ul><li>只能顶部入栈,顶部出栈</li></ul></li><li><p><strong>队列</strong>:</p><ul><li><strong>顺序队列</strong></li><li><strong>双端队列</strong></li><li><strong>循环队列</strong></li></ul></li></ol><h4 id="双链表vs动态数组"><a href="#双链表vs动态数组" class="headerlink" title="双链表vs动态数组"></a>双链表vs动态数组</h4><p>如果频繁在<strong>尾部</strong>进行<strong>添加,删除</strong>操作, 选择<strong>动态数组</strong><br>如果频繁在<strong>头部</strong>进行<strong>添加,删除</strong>,使用<strong>双链表</strong><br>如果有频繁的<strong>任意位置的添加,删除</strong>,选择<strong>双链表</strong><br>如果频繁的<strong>查询</strong>,选择<strong>动态数组</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线性结构&quot;&gt;&lt;a href=&quot;#线性结构&quot; class=&quot;headerlink&quot; title=&quot;线性结构&quot;&gt;&lt;/a&gt;线性结构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;线性表是具有 n 个相同类型元素的有限序列&lt;/p&gt;
&lt;h3 id=&quot;常见的线性表&quot;&gt;&lt;a href=&quot;#常见的线性
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://yimchengjie.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线性表" scheme="https://yimchengjie.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://yimchengjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度和空间复杂度</title>
    <link href="https://yimchengjie.github.io/2020/01/14/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://yimchengjie.github.io/2020/01/14/算法与数据结构/时间复杂度和空间复杂度/</id>
    <published>2020-01-14T08:44:37.000Z</published>
    <updated>2020-02-21T17:59:20.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h2><p>算法的时间复杂度和空间复杂度是用来描述算法优劣的两个指标</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的时间复杂度反应了算法执行时间随输入规模增长而增长的量级,通常的时间复杂度指的是最坏时间复杂度</p><h4 id="时间复杂度预估步骤"><a href="#时间复杂度预估步骤" class="headerlink" title="时间复杂度预估步骤"></a>时间复杂度预估步骤</h4><ol><li>找出基准语句,即算法中执行次数最多的那条语句</li><li>计算基本语句的执行次数的数量级</li><li>用O()表示算法的时间性能,括号内为基准语句执行次数的数量级</li></ol><h4 id="预估时间复杂度的具体实例"><a href="#预估时间复杂度的具体实例" class="headerlink" title="预估时间复杂度的具体实例"></a>预估时间复杂度的具体实例</h4><p>注: 只计算时间复杂度</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度 O(1)</span></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"n &gt; 10"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">5</span>) &#123; <span class="comment">// 2</span></span><br><span class="line">    System.out.println(<span class="string">"n &gt; 5"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"n &lt;= 5"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环内语句最大执行次数: 15*n</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环内语句最大执行次数: n^2</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="comment">// java中整形数值相除当x&lt;y时x/y=0</span></span><br><span class="line"><span class="keyword">while</span> ((n = n / <span class="number">2</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n除几次2=1  -&gt;  log2(n)</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="keyword">while</span> ((n = n / <span class="number">5</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n除几次5=1  -&gt;  log5(n)</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i = i * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 外层循环执行次数: log2(n)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 单独内层循环语句执行次数为: n</span></span><br><span class="line">        <span class="comment">// 基准语句最大执行次数为: n*log2(n)</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>算法的空间复杂度是算法在运行时间内临时占用的内存空间的大小,但一般的程序只要满足占用空间小于可用空间即可. 所以尝尝牺牲空间复杂度来满足时间复杂度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间复杂度和空间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度和空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度和空间复杂度&quot;&gt;&lt;/a&gt;时间复杂度和空间复杂度&lt;/h2&gt;&lt;p&gt;算法的时间复杂度和空间复杂度是用来描述算法优劣的两个指标&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://yimchengjie.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="时间复杂度" scheme="https://yimchengjie.github.io/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
      <category term="空间复杂度" scheme="https://yimchengjie.github.io/tags/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup技术入门</title>
    <link href="https://yimchengjie.github.io/2020/01/03/%E7%88%AC%E8%99%AB/Jsoup%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/03/爬虫/Jsoup技术入门/</id>
    <published>2020-01-03T14:11:13.000Z</published>
    <updated>2020-02-21T17:58:47.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup技术入门"><a href="#Jsoup技术入门" class="headerlink" title="Jsoup技术入门"></a>Jsoup技术入门</h2><p>在使用Jsoup之前,解析响应通常使用字符串和正则表达式来获取目标数据, 但是正则表达式还是相对麻烦.</p><p>Jsoup是一款Java的HTML解析器,可以直接解析某个URL地址,HTML内容. Jsoup提供了丰富的API,可以向前端一样通过DOM等操作方法获取目标数据</p><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>虽然Jsoup也可以直接通过URL抓取内容, 但不用来做爬虫,因为开发中往往需要使用多线程,连接池等技术, Jsoup的支持并不好, 所以Jsoup通常依赖解析数据</p><h4 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUrl</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Jsoup解析URL地址</span></span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com"</span>),<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 使用标签选择器获取标题</span></span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析String"><a href="#解析String" class="headerlink" title="解析String"></a>解析String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html=SpiderFirst.getSpider(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析File"><a href="#解析File" class="headerlink" title="解析File"></a>解析File</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\yanchengjie\\Desktop\\baidu.html"</span>),<span class="string">"utf8"</span>);</span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDOM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html = SpiderFirst.getSpider(<span class="string">"http://www.itcast.cn/"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    Element element = document.getElementById(<span class="string">"webim"</span>);</span><br><span class="line">    System.out.println(element.toString());</span><br><span class="line">    <span class="comment">// 获取id值</span></span><br><span class="line">    String id = element.id();</span><br><span class="line">    String id_ = element.attr(<span class="string">"id"</span>);</span><br><span class="line">    System.out.println(id + <span class="string">" "</span> + id_);</span><br><span class="line">    <span class="comment">// 获取className</span></span><br><span class="line">    String className = element.child(<span class="number">0</span>).className();</span><br><span class="line">    String className_ = element.child(<span class="number">0</span>).attr(<span class="string">"class"</span>);</span><br><span class="line">    System.out.println(className+<span class="string">" "</span>+className_);</span><br><span class="line">    <span class="comment">// 获取所有元素</span></span><br><span class="line">    Attributes attrs = element.child(<span class="number">0</span>).child(<span class="number">0</span>).child(<span class="number">0</span>).attributes();</span><br><span class="line">    System.out.println(attrs.toString());</span><br><span class="line">    <span class="comment">// 获取文本内容</span></span><br><span class="line">    String text = element.child(<span class="number">0</span>).child(<span class="number">0</span>).child(<span class="number">0</span>).text();</span><br><span class="line">    System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择器操作"><a href="#选择器操作" class="headerlink" title="选择器操作"></a>选择器操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html = SpiderFirst.getSpider(<span class="string">"http://www.itcast.cn/"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    <span class="comment">// 使用标签选择器</span></span><br><span class="line">    Elements elements = document.select(<span class="string">"span"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element: elements)&#123;</span><br><span class="line">        System.out.println(element.text());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用id选择器</span></span><br><span class="line">    Element element = document.select(<span class="string">"#webim"</span>).first();</span><br><span class="line">    System.out.println(element.toString());</span><br><span class="line">    <span class="comment">// 使用类选择器</span></span><br><span class="line">    Elements elements1 = document.select(<span class="string">".a_default"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element1: elements1)&#123;</span><br><span class="line">        System.out.println(element1.text());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 元素选择器</span></span><br><span class="line">    Elements elements2 = document.select(<span class="string">"[class=slogan]"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element2: elements2)&#123;</span><br><span class="line">        System.out.println(element2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组合选择器</span></span><br><span class="line">    Elements elements3 = document.select(<span class="string">"img.slogan"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element3: elements3)&#123;</span><br><span class="line">        System.out.println(element3.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Elements elements4 = document.select(<span class="string">".box_hd &gt; h2"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element4: elements4)&#123;</span><br><span class="line">        System.out.println(element4.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup技术入门&quot;&gt;&lt;a href=&quot;#Jsoup技术入门&quot; class=&quot;headerlink&quot; title=&quot;Jsoup技术入门&quot;&gt;&lt;/a&gt;Jsoup技术入门&lt;/h2&gt;&lt;p&gt;在使用Jsoup之前,解析响应通常使用字符串和正则表达式来获取目标数据, 但是正则表
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="Jsoup" scheme="https://yimchengjie.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL之MongoDB</title>
    <link href="https://yimchengjie.github.io/2020/01/03/%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL%E4%B9%8BMongoDB/"/>
    <id>https://yimchengjie.github.io/2020/01/03/数据库/NoSQL之MongoDB/</id>
    <published>2020-01-03T09:21:16.000Z</published>
    <updated>2020-02-26T14:54:20.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NoSQL-之-MongoDB"><a href="#NoSQL-之-MongoDB" class="headerlink" title="NoSQL 之 MongoDB"></a>NoSQL 之 MongoDB</h2><hr><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><p>以 Ubuntu 为例</p><p><code>sudo apt install mongodb</code>–安装命令</p><p><code>systemctl status mongodb</code>–检查服务</p><h3 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h3><table><thead><tr><th>SQL 术语</th><th>MongoDB 术语</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>表/集合</td></tr><tr><td>row</td><td>document</td><td>记录行/文档</td></tr><tr><td>column</td><td>field</td><td>字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td>-</td><td>连表查询/MongoDB 不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB 自动将_id 字段设置为主键</td></tr></tbody></table><h3 id="MongoDB-Java"><a href="#MongoDB-Java" class="headerlink" title="MongoDB Java"></a>MongoDB Java</h3><p>在 Java 中使用 MongoDB</p><p>直接使用 Spring Data MongoDB</p><ol><li><p>添加 spring-boot-starter-data-mongodb 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># user:用户名,</span><br><span class="line"># mongo1.example.com:host地址,</span><br><span class="line"># 27017:端口号</span><br><span class="line"># test:数据库名</span><br><span class="line">spring.data.mongodb.uri=mongodb:<span class="comment">//user:secret@mongo1.example.com:27017/test</span></span><br></pre></td></tr></table></figure></li><li><p>使用 MongoTemplate</p></li></ol><p>MongoTemplate 提供了增删改查的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MongoCollection mongoCollection = mongoTemplate.getCollection(<span class="string">"weibo"</span>);</span><br><span class="line">        String index=mongoCollection.createIndex(<span class="keyword">new</span> Document().append(<span class="string">"text"</span>, <span class="number">1</span>));</span><br><span class="line">        Long count=mongoCollection.countDocuments();</span><br><span class="line">        mongoTemplate.createCollection(<span class="string">""</span>);</span><br><span class="line">        System.out.println(index+<span class="string">"  "</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NoSQL-之-MongoDB&quot;&gt;&lt;a href=&quot;#NoSQL-之-MongoDB&quot; class=&quot;headerlink&quot; title=&quot;NoSQL 之 MongoDB&quot;&gt;&lt;/a&gt;NoSQL 之 MongoDB&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;MongoDB 将数据存储
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="NoSQL" scheme="https://yimchengjie.github.io/tags/NoSQL/"/>
    
      <category term="MongoDB" scheme="https://yimchengjie.github.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
