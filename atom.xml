<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycjBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhuyiting.xyz/"/>
  <updated>2019-11-01T09:02:03.831Z</updated>
  <id>https://zhuyiting.xyz/</id>
  
  <author>
    <name>yanchengjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring之SpringMVC</title>
    <link href="https://zhuyiting.xyz/2019/11/01/Spring%E4%B9%8BSpringMVC/"/>
    <id>https://zhuyiting.xyz/2019/11/01/Spring之SpringMVC/</id>
    <published>2019-11-01T03:35:25.000Z</published>
    <updated>2019-11-01T09:02:03.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring之SpringMVC"><a href="#Spring之SpringMVC" class="headerlink" title="Spring之SpringMVC"></a>Spring之SpringMVC</h3><p>Web应用的分层通常是MVC,对应着数据层-视图层-控制层<br>SpringMVC就是控制层框架</p><h4 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h4><p>Spring MVC 框架主要由 DispatcherServlet、处理器映射、控制器、视图解析器、视图组成</p><ol><li>客户端请求提交到 DispatcherServlet。</li><li>由 DispatcherServlet 控制器寻找一个或多个 HandlerMapping，找到处理请求的 Controller。</li><li>DispatcherServlet 将请求提交到 Controller。</li><li>Controller 调用业务逻辑处理后返回 ModelAndView。</li><li>DispatcherServlet 寻找一个或多个 ViewResolver 视图解析器，找到 ModelAndView 指定的视图。</li><li>视图(JSP等视图层)负责将结果显示到客户端。</li></ol><p>从宏观角度考虑，DispatcherServlet 是整个 Web 应用的控制器；从微观考虑，Controller 是单个 Http 请求处理过程中的控制器，而 ModelAndView 是 Http 请求过程中返回的模型（Model）和视图（View）。</p><h4 id="SpringMVC的实现实例"><a href="#SpringMVC的实现实例" class="headerlink" title="SpringMVC的实现实例"></a>SpringMVC的实现实例</h4><ol><li>在web.xml文件中配置部署DispatcherServlet <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:web</span>=<span class="string">"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 部署 DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">      <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 加载springmvc-servlet.xml配置文件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表示容器再启动时立即加载servlet --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理所有URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建Controller类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest arg0,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse arg1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"/WEB-INF/jsp/register.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建springmvc-servlet.xml配置Controller的映射信息 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- LoginController控制器类，映射到"/login" --&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/login"</span> <span class="attr">class</span>=<span class="string">"controller.LoginController"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在配置文件中定义视图解析器(ViewResolver) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure> 上述视图解析器配置了前缀和后缀两个属性，因此Controller中只需要返回<code>login</code>,视图解析器就会自动添加前缀和后缀</li></ol><h4 id="通过注释实现SpringMVC"><a href="#通过注释实现SpringMVC" class="headerlink" title="通过注释实现SpringMVC"></a>通过注释实现SpringMVC</h4><p>传统风格的控制器不仅需要在配置文件中部署映射，而且只能编写一个处理方法，不够灵活。<br>在基于注解的<strong>控制器类中可以编写多个处理方法</strong>，进而可以处理多个请求（动作），这就允许将相关的操作编写在同一个控制器类中，从而减少控制器类的数量，方便以后的维护。<br>基于注解的控制器<strong>不需要在配置文件中部署映射</strong>，仅需要使用 <strong>RequestMapping</strong> 注释类型注解一个方法进行请求处理。</p><p>注释实现的Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* “<span class="doctag">@Controller</span>”表示 IndexController 的实例是一个控制器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Controller</span>相当于<span class="doctag">@Controller</span>(<span class="doctag">@Controller</span>) 或<span class="doctag">@Controller</span>(value="<span class="doctag">@Controller</span>")</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/index"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理请求的方法</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * login代表逻辑视图名称，需要根据Spring MVC配置</span></span><br><span class="line"><span class="comment">         * 文件中internalResourceViewResolver的前缀和后缀找到对应的物理视图</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        session.setAttribute(<span class="string">"skey"</span>, <span class="string">"session范围的值"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"rkey"</span>, <span class="string">"request范围的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*在视图中可以使用EL表达式$&#123;success&#125;取出model中的值*/</span></span><br><span class="line">        <span class="comment">// model是一个包含 Map 的 Spring 框架类型。</span></span><br><span class="line">        <span class="comment">// 可以保存数据,然后在视图层用EL表达式提取</span></span><br><span class="line">        model.addAttribute(<span class="string">"success"</span>, <span class="string">"注册成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注释需要在配置文件开启注释扫描</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用扫描机制扫描控制器类，控制器类都在controller包及其子包下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SpringMVC获取参数"><a href="#SpringMVC获取参数" class="headerlink" title="SpringMVC获取参数"></a>SpringMVC获取参数</h4><ol><li>把<strong>表单参数</strong>写在控制器类相应方法的形参中，即形参名称与请求参数名称完全相同。适用于 get 和 post <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(String uname,String upass,Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(uname)</span><br><span class="line">            &amp;&amp; <span class="string">"123456"</span>.equals(upass)) &#123;</span><br><span class="line">        logger.info(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 注册成功，跳转到 login.jsp</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"失败"</span>);</span><br><span class="line">        <span class="comment">// 在register.jsp页面上可以使用EL表达式取出model的uname值</span></span><br><span class="line">        model.addAttribute(<span class="string">"uname"</span>, uname);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 返回 register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过一个<strong>实体 Bean</strong> 来接收请求参数，Bean 的属性名称必须与请求参数名称相同.适用于 get 和 post<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(UserForm user, HttpSession session, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(user.getUname())</span><br><span class="line">            &amp;&amp; <span class="string">"123456"</span>.equals(user.getUpass())) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">"u"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>; <span class="comment">// 登录成功，跳转到 main.jsp</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">"messageError"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过 <strong>HttpServletRequest</strong> 接收请求参数适用于 get 和 post <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过HttpServletRequest接收请求参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(HttpServletRequest request,Model model)</span> </span>&#123;</span><br><span class="line">    String uname = request.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">    String upass = request.getParameter(<span class="string">"upass"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(uname)</span><br><span class="line">            &amp;&amp; <span class="string">"123456"</span>.equals(upass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 注册成功，跳转到 login.jsp</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在register.jsp页面上可以使用EL表达式取出model的uname值</span></span><br><span class="line">        model.addAttribute(<span class="string">"uname"</span>, uname);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 返回 register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过 <strong>@PathVariable</strong> 获取 URL 中的参数,适用get<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@PathVariable String uname,@PathVariable String upass,Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(uname) &amp;&amp; <span class="string">"123456"</span>.equals(upass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 注册成功，跳转到 login.jsp</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在register.jsp页面上可以使用EL表达式取出model的uname值</span></span><br><span class="line">        model.addAttribute(<span class="string">"uname"</span>, uname);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 返回 register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过 <strong>@RequestParam</strong> 接收请求参数,适用于 get 和 post<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@RequestParam String uname,</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam String upass, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(uname) &amp;&amp; <span class="string">"123456"</span>.equals(upass)) &#123;</span><br><span class="line">        logger.info(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 注册成功，跳转到 login.jsp</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在register.jsp页面上可以使用EL表达式取出model的uname值</span></span><br><span class="line">        model.addAttribute(<span class="string">"uname"</span>, uname);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 返回 register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过 <strong>@ModelAttribute</strong> 接收请求参数,适用于 get 和 post<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> UserForm user) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(uname) &amp;&amp; <span class="string">"123456"</span>.equals(upass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 注册成功，跳转到 login.jsp</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 使用@ModelAttribute("user")与model.addAttribute("user",user)的功能相同</span></span><br><span class="line">        <span class="comment">//register.jsp页面上可以使用EL表达式$&#123;user.uname&#125;取出ModelAttribute的uname值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 返回 register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="SpringMVC的转发和重定向"><a href="#SpringMVC的转发和重定向" class="headerlink" title="SpringMVC的转发和重定向"></a>SpringMVC的转发和重定向</h4><p>转发是服务器行为，重定向是客户端行为。<br>转发地址栏不变,请求数据不丢失,<br>重定向地址栏改变,请求数据丢失</p><p>在 Spring MVC 框架中，重定向与转发的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//转发到一个请求方法（同一个控制器类可以省略/index/）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/index/isLogin"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/isLogin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">isLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重定向到一个请求方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index/isRegister"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/isRegister"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">isRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//转发到一个视图</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC的JSON数据交互"><a href="#SpringMVC的JSON数据交互" class="headerlink" title="SpringMVC的JSON数据交互"></a>SpringMVC的JSON数据交互</h4><p>Spring MVC 提供了 MappingJackson2HttpMessageConverter 实现类默认处理 JSON 格式请求响应。该实现类利用 Jackson 开源包读写 JSON 数据，将 Java 对象转换为 JSON 对象和 XML 文档，同时也可以将 JSON 对象和 XML 文档转换为 Java 对象。</p><p>在使用注解开发时需要用到两个重要的 JSON 格式转换注解，分别是 @RequestBody 和 @ResponseBody。</p><ul><li>@RequestBody：用于将请求体中的数据绑定到方法的形参中，<em>该注解应用在方法的形参上</em>。<strong>把传来的JSON数据转换为响应java对象</strong></li><li>@ResponseBody：用于直接返回 return 对象，<em>该注解应用在方法上</em>。<strong>表示该方法返回一个JSON格式数据</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring之SpringMVC&quot;&gt;&lt;a href=&quot;#Spring之SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;Spring之SpringMVC&quot;&gt;&lt;/a&gt;Spring之SpringMVC&lt;/h3&gt;&lt;p&gt;Web应用的分层通常是MVC
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>党的有关理论和习近平新时代中国特色社会主义思想</title>
    <link href="https://zhuyiting.xyz/2019/10/29/%E5%85%9A%E7%9A%84%E6%9C%89%E5%85%B3%E7%90%86%E8%AE%BA%E5%92%8C%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E6%80%9D%E6%83%B3/"/>
    <id>https://zhuyiting.xyz/2019/10/29/党的有关理论和习近平新时代中国特色社会主义思想/</id>
    <published>2019-10-29T13:17:49.000Z</published>
    <updated>2019-10-29T14:28:10.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="党的有关理论知识"><a href="#党的有关理论知识" class="headerlink" title="党的有关理论知识"></a>党的有关理论知识</h3><h4 id="端正入党动机"><a href="#端正入党动机" class="headerlink" title="端正入党动机"></a>端正入党动机</h4><h5 id="1-正确入党动机的内涵"><a href="#1-正确入党动机的内涵" class="headerlink" title="1. 正确入党动机的内涵"></a>1. 正确入党动机的内涵</h5><p>正确的入党动机,指争取入党的内在原因是忠诚地信仰共产主义,把最终实现共产主义社会制度作为自己的最高理想,决心为了壮丽的共产主义事业奋斗终生,全心全意的为人民服务,并随时准备为党和人民的利益牺牲一切.<br>入党,意味着要比群众多吃亏,争取入党就是要为党和人民的利益不怕吃亏.<br>入党,意味着比群众多挑重担,多做贡献.<br>入党,意味着比群众多做牺牲,争取入党就要有革命的自我牺牲精神.</p><h5 id="2-怎样端正入党动机"><a href="#2-怎样端正入党动机" class="headerlink" title="2. 怎样端正入党动机?"></a>2. 怎样端正入党动机?</h5><p>主要以下三个方面的内容:<br>第一,要有为共产主义和中国特色社会主义奋斗终身的坚定信念.<br>第二,要有全心全意为人民服务的思想.<br>第三,要有在生产,工作,学习和社会生活中起先锋模范作用的觉悟.</p><h4 id="党的基本理论知识"><a href="#党的基本理论知识" class="headerlink" title="党的基本理论知识"></a>党的基本理论知识</h4><h5 id="1-中国共产党性质"><a href="#1-中国共产党性质" class="headerlink" title="1. 中国共产党性质:"></a>1. 中国共产党性质:</h5><p>中国共产党是中国工人阶级的先锋队,同时是中国人民和中华民族的先锋队,是中国特色社会主义失业的领导核心,代表中国先进生产力的发展要求,代表中国先进文化的前进方向,代表中国最广大人民的根本利益.</p><h5 id="2-党的行动指南"><a href="#2-党的行动指南" class="headerlink" title="2. 党的行动指南:"></a>2. 党的行动指南:</h5><p>是以马克思列宁主义,毛泽东思想,邓小平理论和”三个代表”重要思想作为自己的行动指南</p><h5 id="3-党的最高理想和最终目标"><a href="#3-党的最高理想和最终目标" class="headerlink" title="3. 党的最高理想和最终目标:"></a>3. 党的最高理想和最终目标:</h5><p>实现共产主义</p><h5 id="4-党的基本路线"><a href="#4-党的基本路线" class="headerlink" title="4. 党的基本路线:"></a>4. 党的基本路线:</h5><p>领导和团结全国各族人民,以经济建设为中心,坚持四项基本原则,坚持改革开放,自力更生,艰苦创业,为把我国建设成为富强,民主,文明,和谐的社会主义现代化国家而奋斗.</p><h5 id="5-党的外交政策"><a href="#5-党的外交政策" class="headerlink" title="5. 党的外交政策:"></a>5. 党的外交政策:</h5><p>坚持独立自主的和平外交政策,维护我国的独立和主权,反对霸权主义和强权政治,维护世界和平,促进人类进步.</p><h5 id="6-党的四项基本原则"><a href="#6-党的四项基本原则" class="headerlink" title="6. 党的四项基本原则"></a>6. 党的四项基本原则</h5><p>坚持社会主义道路,坚持人民民主专政,坚持中国共产党的领导,坚持马克思列宁主义毛泽东思想</p><h5 id="7-党的建设必须坚决实现的四项基本要求"><a href="#7-党的建设必须坚决实现的四项基本要求" class="headerlink" title="7. 党的建设必须坚决实现的四项基本要求"></a>7. 党的建设必须坚决实现的四项基本要求</h5><p>(1)坚持党的基本路线,(2)坚持解放思想,实事求是,与时俱进,(3)坚持全心全意为人民服务,(4)坚持民主集中制</p><h5 id="8-党的工作路线"><a href="#8-党的工作路线" class="headerlink" title="8. 党的工作路线:"></a>8. 党的工作路线:</h5><p>一切为了群众,一切依靠群众,从群众中来,到群众中去,把党的正确主张变为群众的自觉行动</p><h5 id="9-党的最大优势"><a href="#9-党的最大优势" class="headerlink" title="9. 党的最大优势:"></a>9. 党的最大优势:</h5><p>密切联系群众</p><h5 id="10-党执政后的最大危险"><a href="#10-党执政后的最大危险" class="headerlink" title="10. 党执政后的最大危险:"></a>10. 党执政后的最大危险:</h5><p>脱离群众</p><h5 id="11-党员享有的八项权利"><a href="#11-党员享有的八项权利" class="headerlink" title="11. 党员享有的八项权利:"></a>11. 党员享有的八项权利:</h5><p>(1)参加党的有关会议,阅读党的有关文件,接收党的教育和培训<br>(2)在党的会议上和党报党刊上,参加关于党的政策问题的讨论<br>(3)对党的工作提出建议和倡议<br>(4)在党的会议上有根据的批评党的任何组织和任何党员,向党员负责的揭发,检举党的任何组织和任何党员违法乱纪的事实,要求处分违法乱纪的党员,要求罢免或撤换不称职的干部.<br>(5)行使表决权,选举权,有被选举权<br>(6)在党组织讨论决定对党员的党纪处分或作出鉴定时,本人有权参加和进行申辩,其他党员可以为他作证和辩护<br>(7)对党的决议和政策如有不同意见,在坚决执行的前提下,可以声明保留,并且可以把自己的意见向党的上级组织直至中央提出<br>(8)向党的上级组织直至中央给以负责的答复</p><h5 id="12-党员履行的八项义务"><a href="#12-党员履行的八项义务" class="headerlink" title="12. 党员履行的八项义务:"></a>12. 党员履行的八项义务:</h5><p>(1)认真学习马克思列宁主义,毛泽东思想,邓小平理论和”三个代表”重要思想,学习党的路线,方针,政策及决议,学习党的基本知识,学习科学,文化和业务知识,努力提高为人民服务的本领<br>(2)贯彻执行党的基本路线和方针,政策,带头参加改革开放和社会主义现代化建设,带动群众为经济发展和社会进步艰苦奋斗,在生产,工作,学习和社会生活中起先锋模范左右<br>(3)坚持党和人民的利益高于一切,个人利益服从党和人民的利益,吃苦在前,享受在后,克己奉公,多做贡献<br>(4)自觉遵守党的纪律,模范遵守国家的法律法规,严格保守党和国家的秘密,执行党的决定,服从组织分配,积极完成党的任务.<br>(5)维护党的团结和统一,对党忠诚老实,言行一致,坚决反对一切派别组织和小集团活动,反对阳奉阴违的两面派行为和一切阴谋诡计<br>(6)切实开展批评和自我批评,勇于揭露和纠正工作中的缺点,错误,坚决痛消极腐败现象做斗争<br>(7)密切联系群众,向群众宣传党的主张,即时同群众商量,即时向党反应群众的一件和要求,维护群众的正当利益<br>(8)发扬社会主义新风尚,提倡共产主义道德,为了保护国家和人民的利益,在一切困难和危险的时刻挺身而出,英勇斗阵,不怕牺牲.</p><h5 id="13-预备党员的权利"><a href="#13-预备党员的权利" class="headerlink" title="13. 预备党员的权利:"></a>13. 预备党员的权利:</h5><p>除了没有表决权,选举权和被选举权,其他和正式党员一样</p><h5 id="14-党员的党龄"><a href="#14-党员的党龄" class="headerlink" title="14. 党员的党龄:"></a>14. 党员的党龄:</h5><p>从预备期满转为正式党员之日算起.<br>党员如果没有正当理由连续六个月不参加党的组织生活,或不缴纳党费,或不做党所分配的工作,就认为是自行脱党</p><h5 id="15-党的民主集中制的基本原则是"><a href="#15-党的民主集中制的基本原则是" class="headerlink" title="15. 党的民主集中制的基本原则是:"></a>15. 党的民主集中制的基本原则是:</h5><p>党员个人服从党的组织,少数服从多数,下级组织服从上级组织,全党各个组织和全体党员服从党的全国代表大会和中央委员会.</p><h5 id="16-党的纪律处分有五种"><a href="#16-党的纪律处分有五种" class="headerlink" title="16. 党的纪律处分有五种:"></a>16. 党的纪律处分有五种:</h5><p>警告,严重警告,撤销党内职务,留党察看,开除党籍</p><h5 id="17-党的五个作风"><a href="#17-党的五个作风" class="headerlink" title="17. 党的五个作风:"></a>17. 党的五个作风:</h5><p>思想作风,工作作风,领导作风,学风,干部生活作风</p><h5 id="18-两个务必"><a href="#18-两个务必" class="headerlink" title="18. 两个务必:"></a>18. 两个务必:</h5><p>(1)务必继续地保持谦虚,谨慎,不骄,不躁的作风<br>(2)务必继续保持艰苦奋斗的作风</p><h5 id="19-四个人格形象"><a href="#19-四个人格形象" class="headerlink" title="19. 四个人格形象:"></a>19. 四个人格形象:</h5><p>诚实守信的人格形象,<br>公道正派的人格形象,<br>清正廉洁的人格形象,<br>敬业奉献的人格形象.</p><h5 id="20-四个高度认同"><a href="#20-四个高度认同" class="headerlink" title="20. 四个高度认同:"></a>20. 四个高度认同:</h5><p>对祖国的高度认同,<br>对中华民族的高度认同,<br>对中华文化的高度认同,<br>对中国社会主义的高度认同.</p><h5 id="21-四大纪律"><a href="#21-四大纪律" class="headerlink" title="21. 四大纪律:"></a>21. 四大纪律:</h5><p>政治纪律,<br>组织纪律,<br>经济工作纪律,<br>群众工作纪律.</p><h5 id="22-五种精神"><a href="#22-五种精神" class="headerlink" title="22. 五种精神"></a>22. 五种精神</h5><p>解放思想,实事求是;<br>紧跟时代,勇于创新;<br>艰苦奋斗,务求实效;<br>知难而进,一往无前;<br>淡泊名利,无私奉献.</p><h5 id="23-八个坚持-八个反对"><a href="#23-八个坚持-八个反对" class="headerlink" title="23. 八个坚持,八个反对"></a>23. 八个坚持,八个反对</h5><p>(1)坚持解放思想,实事求是,反对因循守旧,不思进取;<br>(2)坚持理论联系实际,反对照抄照搬、本本主义;<br>(3)坚持密切联系群众，反对形式主义、官僚主义;<br>(4)坚持民主集中制，反对独断专行、软弱涣散;<br>(5)坚持党的纪律，反对自由主义;<br>(6)坚持艰苦奋斗，反对享乐主义;<br>(7)坚持清正廉洁，反对以权谋私;<br>(8)坚持任人唯贤，反对用人上的不正之风.</p><h5 id="24-八项要求"><a href="#24-八项要求" class="headerlink" title="24. 八项要求"></a>24. 八项要求</h5><p>(1)要同党中央保持高度一致，不阳奉阴违、自行其是;<br>(2)要遵守民主集中制，不独断专行、软弱放任;<br>(3)要依法行使权力，不滥用职权、玩忽职守;<br>(4)要廉洁奉公，不接受任何影响公正执行公务的利益;<br>(5)要管好配偶、子女和身边工作人员，不允许他们利用本人的影响谋取私利;<br>(6)要公道正派用人，不任人唯亲、营私舞弊;<br>(7)要艰苦奋斗，不奢侈浪费、贪图享受;<br>(8)要务实为民，不弄虚作假、与民争利.</p><h5 id="25-科学发展观的具体内容包括"><a href="#25-科学发展观的具体内容包括" class="headerlink" title="25. 科学发展观的具体内容包括:"></a>25. 科学发展观的具体内容包括:</h5><p>第一要义是发展,<br>核心是以人为本,<br>基本要求是全面协调可持续,<br>根本方法是统筹兼顾.</p><h4 id="发展党员的程序和手续"><a href="#发展党员的程序和手续" class="headerlink" title="发展党员的程序和手续"></a>发展党员的程序和手续</h4><p>（1）要求入党的人自愿向党组织提出入党申请；<br>（2）党组织接到申请入党人的申请书后，应及时研究能否列为入党积极分子；<br>（3）申请入党人被列为入党积极分子后，党组织即应落实对其培养教育和考察的措施；<br>（4）入党积极分之经一年以上的培养教育和考察后，党组织要研究能否确定为发展对象；<br>（5）入党积极分子被确定为发展对象后，党组织要对其进行政治审查；<br>（6）党组织在进行政治审查的同时，要征求党内外群众对发展对象的意见；<br>（7）党组织在接受发展对象入党前，要对其进行入党前期短期集中培训；<br>（8）做完上述工作后，支部委员会要将发展对象的入党材料报上级党组织预审；<br>（9）经上级党组织预审同意后，支部委员会应通知发展对象确定两名正式党员作入党介绍人；<br>（10）入党介绍人或支部领导成员指导发展对象填写《入党志愿书》；<br>（11）支部委员会对《入党志愿书》进行审查，认为合格后，即可召开支部大会讨论，作出决议，并报上级党组织审批；<br>（12）上级党组织在批准申请人入党前要派人同他谈话，作进一步的了解；<br>（13）上级党组织召开委员会，在听取谈话人的汇报和组织部门的意见后，集体讨论审批<br>（14）被批准入党的预备党员接受党组织一年预备期的教育和考察；<br>（15）预备党员在预备期内要面向党旗进行入党宣誓；<br>（16）预备党员预备期满，主动向党组织提出转为正式党员的申请，党组织要及时讨论其能否转为正式党员。</p><h3 id="习近平新时代中国特色社会主义思想"><a href="#习近平新时代中国特色社会主义思想" class="headerlink" title="习近平新时代中国特色社会主义思想"></a>习近平新时代中国特色社会主义思想</h3><h4 id="八个明确"><a href="#八个明确" class="headerlink" title="八个明确"></a>八个明确</h4><p>第一，明确坚持和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国；</p><p>第二，明确新时代我国社会主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人民为中心的发展思想，不断促进人的全面发展、全体人民共同富裕；</p><p>第三，明确中国特色社会主义事业总体布局是“五位一体”、战略布局是“四个全面”，强调坚定道路自信、理论自信、制度自信、文化自信；</p><p>第四，明确全面深化改革总目标是完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化；</p><p>第五，明确全面推进依法治国总目标是建设中国特色社会主义法治体系、建设社会主义法治国家；</p><p>第六，明确党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队；</p><p>第七，明确中国特色大国外交要推动构建新型国际关系，推动构建人类命运共同体；</p><p>第八，明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，党是最高政治领导力量，提出新时代党的建设总要求，突出政治建设在党的建设中的重要地位。</p><h4 id="十四个坚持"><a href="#十四个坚持" class="headerlink" title="十四个坚持"></a>十四个坚持</h4><p>第一条，坚持党对一切工作的领导；</p><p>第二条，坚持以人民为中心；</p><p>第三条，坚持全面深化改革；</p><p>第四条，坚持新发展理念；</p><p>第五条，坚持人民当家作主；</p><p>第六条，坚持全面依法治国；</p><p>第七条，坚持社会主义核心价值体系；</p><p>第八条，坚持在发展中保障和改善民生；</p><p>第九条，坚持人与自然和谐共生；</p><p>第十条，坚持总体国家安全观；</p><p>第十一条，坚持党对人民军队的绝对领导；</p><p>第十二条，坚持“一国两制”和推进祖国统一；</p><p>第十三条，坚持推动构建人类命运共同体；</p><p>第十四条，坚持全面从严治党。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;党的有关理论知识&quot;&gt;&lt;a href=&quot;#党的有关理论知识&quot; class=&quot;headerlink&quot; title=&quot;党的有关理论知识&quot;&gt;&lt;/a&gt;党的有关理论知识&lt;/h3&gt;&lt;h4 id=&quot;端正入党动机&quot;&gt;&lt;a href=&quot;#端正入党动机&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="备忘录" scheme="https://zhuyiting.xyz/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>论市场化改革</title>
    <link href="https://zhuyiting.xyz/2019/10/24/%E8%AE%BA%E5%B8%82%E5%9C%BA%E5%8C%96%E6%94%B9%E9%9D%A9/"/>
    <id>https://zhuyiting.xyz/2019/10/24/论市场化改革/</id>
    <published>2019-10-24T12:42:13.000Z</published>
    <updated>2019-10-29T02:32:58.652Z</updated>
    
    <content type="html"><![CDATA[<h4 id="当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇"><a href="#当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇" class="headerlink" title="当前的市场化改革是否有助于挽救我国经济下滑趋势? 应该怎么样抓住市场化改革带来的巨大机遇?"></a>当前的市场化改革是否有助于挽救我国经济下滑趋势? 应该怎么样抓住市场化改革带来的巨大机遇?</h4><p>最近，<u>全球掀起了一阵降息潮，全球的经济环境普遍不太理想</u>，全球正在经历一轮新的经济周期调整。以10年为周期的金融危机再一次来临。中美的贸易摩擦对于中国金融市场的影响冲击也是巨大的，<u>人民币一度破7，持续的贬值导致国内资金外逃</u>，也导致了人民币国际化的步伐放缓。<br><font color="red">1.<em>[为什么经济不理想的时候要加息?加息为什么可以调整经济]</em><br>因为经济不理想(经济衰退)是市场投资不足(市场中流动的钱少了,都存银行了),政府为了刺激市场,减少银行利息,这样本来钱存在银行的一部分人就会因为收益少了,把钱投向市场中(股票或者消费),都会促进市场健康发展,使经济复苏<br>2.<em>[为什么人民币破7会导致国内资金外逃,人民币破7由什么导致,为什么人民币破7会阻碍人民币国际化?]</em><br>因为人民币破7是1美元兑换7块多人民币,而国际上以美元为主,本来6块多可以买到的东西,现在要多花钱才能买到,这样中国人不愿意买国外的东西(进口不利,因为变贵了).但是相反,中国更愿意卖东西了(出口有利).然后来自国外的资金,会因为人民币不值钱了(能换到的美元变少了)而减少对国内的投资(资本外逃).人民币的贬值是由于美元强势造成的(美国降息,资本都进入市场,经济强势)<br></font></p><p>2019年来，中国的经济形式总体仍延续着2018年的情况，我国经济增速下滑已是事实。由政府主导的央企在2000年后改革缓慢，各大原材料行业都亏损很大，产业的利润下滑非常严重，产能过剩，中国的供需关系面临着很大的结构性失衡，总体上低端产品产能过剩，高端产品产能不足。其次，我国低附加值、高功耗、高污染的产业比重很大；区域人口分布不合理，城镇化率低，导致发展不平衡；随着人口、土地、环境等这些红利慢慢的消失，<u>人工成本的上涨，土地价格的升高，环境的恶化，导致中低端产业较多</u>；我国经济的增长过多的依靠”<u>三驾马车</u>“，我国城乡收入差距大，行业收入差距大，居民贫富差距大。这些问题就会束缚经济的发展。<br><font color="red">1.<em>[为什么会导致中低端产业较多]</em><br>因为红利的消失会导致企业成本的增加,产品价格上涨,高端产品竞争力变弱(比如国产车和进口车一个价格, 选择国产车的人大大减少)<br>2.<em>[三驾马车是什么]</em><br>三驾马车是投资,消费,进口; 三驾马车是用来计算GDP的三部分,是经济发展的结果,不是根本动力. 根本动力是靠企业靠市场自我的健康发展.<br></font></p><p>当前的市场化改革，正式由习近平提出的供给侧结构性改革，<u>供给侧结构性改革，就是从提高供给质量出发，用改革的办法推进结构调整，矫正要素配置扭曲，扩大有效供给，提高供给结构对需求变化的适应性和灵活性，提高全要素生产率</u>，更好满足广大人民群众的需要，促进经济社会持续健康发展。<br><font color="red">1.<em>[解释一下供给侧结构性改革]</em><br>供给侧结构性改革就是强调供给方(也就是企业),能够制造出物美价廉的商品,怎么改呢呢? 通过改革,减少税收,降低土地价格,给予政策福利支持等<br></font></p><p>强调供给侧改革，从生产、供给入手，调整供应结构，才能使经济健康稳固发展。提升居民消费以及当前的供给侧改革并不能完全改变经济下滑趋势，<u>还必须打通供给以及需求，这一层中间地带</u>，一是政府对企业的税收以及居民的社保缴费高，让企业无法生产，市场需求低。二是垄断性国企占有太多的社会资源而效率又太低，靠价格垄断生存，抬高了整个市场的生产成本，比如油价，房价。<br><font color="red">1.<em>[为什么中间地带很重要]</em><br>中间地带是商品产出到消费者买入之间的地带,是企业或者消费者,在商品之外承担的费用,比如企业的税,居民的五险一金. 企业会把这些费用加到商品的价格上或者自己承担损失, 居民手上钱少, 消费降低, 都不利于经济健康发展<br></font></p><p>供给侧结构性改革自2015年提出以后，其主要任务也在不断变化。最初的“<u>三去一降一补</u>”，通过关、停、并、转等方式去掉多余产能，稳定房价去房地产库存，去杠杆减少政府债务，降低企业各项成本，补充生态建设、完善产业链。<br><font color="red">1.<em>[三去一降一补]</em><br>去产能,去库存,去债务,降成本,补生态产业链<br></font></p><p>当前不仅需要优化供给，提高内需，还要解决供给与需求的中间地带，做好减税降费，优化市场生态。供给侧结构性改革是利好于我国经济发展的，在贸易战加剧，逆全球化回溯的国际背景下，我国的供给侧结构性改革要结合一带一路，深化与沿线国家的合作，强化和欧洲，拉美地区国家的科技合作，扩大开放，将中国制造带出国。</p><p>我国要吸取日本经济发展的教训，20世纪后期，日本大力发展建设，逐渐陷入了失控的建设狂奔，建设业创造了庞大的就业机会，并非来自于真正的经济增长，<u>而是人为制造出的就业机会。这大大削弱并延缓了日本高技术产业的发展</u>，但这种失控的建设无法停止，因为一旦停止公共建设，就会出现大量失业。更严重的是，公共建设积累的巨大负债让日本难堪重负。<u>日本的房价泡沫也重创了日本实体工业的发展，泡沫的破灭导致了大量企业倒闭，失业率狂升</u>。当下的日本，也还没有完全走出当年的阴影。日本经济衰退的20年，主要原因就是日本政府对经济把控出现了失误，制定了违背经济规律的政策。<br><font color="red">1.<em>[为什么这会阻碍日本高科技产业发展?]</em><br>因为大量的人口资金投入到了基础建设业,相应的高科技产业就会没钱没人<br>2.<em>[房价的泡沫破裂为什么影响这么大?]</em><br>房价泡沫破灭, 高价买地的开发商,会破产,很多大企业也会因为投资房地产而大出血,这会让市场严重下跌,这样所有人手上的资产都贬值了,同时企业大量倒闭,失业率也会大大提高,已经买房的人失业后也还要承担巨额贷款.整个国家的经济都会受损,日本房价泡沫当时特别高,政府为了防止泡沫更高影响更恶劣,采取了主动刺破的措施.单也还是经济大衰退<br></font><br>我国可以从日本的经济发展的教训中收益到：房地产不能长久作为支柱产业，必须防止货币超发和过度升值，在宏观调控上，政府不能过于频繁也不能过紧过松，政策引导着眼长远，统筹兼顾。<br>面对经济寒冬，我们个人也需要重视，不要觉得离我们很遥远，面对危机，我们要留好资金，节约开销，努力工作，提升个人能力。<br>我国的市场化改革也会带来巨大的机遇，站在风口上，猪都会飞。乱世出英雄，变革带来的巨大机遇可能产生意想不到的风云人物，不过代价也是巨大的，在改革中，抓住机会很重要，不过我们需要做好充足的准备，机会总是留给有准备的人。能力上的准备，思想上的准备，以及恰到好处的机会。<br>在危机来临初期持有货币，<u>在危机崩溃期买入资产，在政体调控收缩货币时期再次抛售就能获利了</u>，但这其中随便哪一步出错，都会损失惨重，即使每一个环节都准确无误，也可能因为突如其来的不可抗力，导致整个投资计划的泡汤。比如限购限售，比如失业，比如投资企业破产。<u>在危机时期，不要轻易触碰杠杆加大交易规模</u>，其次要勤于学习，要对未来的风险做准备。<br><font color="red">1.<em>[为什么在危机崩溃期买入资产，在政体调控收缩货币时期再次抛售就能获利了?]</em><br>通俗点说就是在商品最便宜的时候买进。接下来商品会因为市场规律或者政府调控回升。但是政府为了控制物价（控制通货膨胀），会加息，钱流进银行，商品需求变小。在政府调控的时候，可以看成物价比较理想（高）的时候。这时候卖出。获利就很客观（差价最大的时候）<br>2.<em>[为什么不要触碰杠杆]</em><br>触碰杠杆可以理解为贷款,因为在经济危机时期,银行出于安全考虑不可能把大量的钱借给你, 所以只能贷到很少的钱,而钱越少,承受意外的能力越低,而且贷款需要抵押,(房子或者股票,在危机时期看不到底,随时会被银行卖掉,因为银行不可能等你房子不值钱了再卖,那就失去了抵押的意义),而银行低价卖出也会导致市场供大于求,进一步下跌. 而你通过贷款买入的资产也可能会进一步下跌.很容易破产<br></font><br>在宏观经济下滑的趋势下，要合理分配资产，综合来看2019年上半年的投资者大多以<u>黄金、比特币为代表的避险资产</u>，这些产品或者说是资产的价格也一直在上高，在国际范围中，各大央行实行降息政策，促进经济发展的前提下，黄金和比特币的抗通胀能力就展现出来了。<u>但千万不能在不了解的情况下，进行投资。</u><br><font color="red">1.<em>[为什么黄金,比特币是避险资产?]</em><br>因为他们都有共同属性,价值不受政府调控影响(因为总量固定,且没法造假).这样不管经济怎么样,黄金比特币本来能换多少米还是能换多少米.举例:比如一块黄金本来换一代米,一百块也能换一袋米,但是经济变化,一百块只能买半袋米了,但是一快黄金还是能买一袋米.<br>2.<em>[为什么不了解不能投资呢]</em><br>正式因为他们总量固定 ,他们会被资本炒作,比如大量买入造成供不应求,价格高了以后再高价卖出, 不了解就很可能成了韭菜,承担了这部分人造差价<br></font><br>改革初期，商品紧缺，供不应求，是暴利的时代，后来，电子商务兴起以及产能过剩，商家开启价格战，于是进入了薄利时期，而当前，我国正在转变，产品开始个性化、定制化、高端化，提高增值空间，从而进入厚利时代。<br>2019年下半年，<u>各大二线城市的抢人大战也已经偃旗息鼓，但一线新一线仍然对人才有着很高的需求。这意味着，宏观上的城市化进程将会放缓，大城市的自我迭代会深度展开</u>。其次我国股市长期以来以房地产与科技相关的驱动，目前的房价以稳为主，<u>投资的机会在科技类企业。</u><br><font color="red">1.<em>[为什么二线城市不抢人了?]</em><br>因为人才需要高薪,需要好的企业,而好的企业需要政策扶持,它才愿意来,二线城市没有这样的实力,相反,一线城市企业多,对于人才的需求也大,大城市的建设需要人才.<br>2.<em>[为什么说投资机会在科技类企业]</em><br>因为国家需要发展科技类企业来促进产业升级,政策的支持以及资金的流入,就会让科技类企业更健康的发展<br></font><br>在我国市场化改革的背景下，勤于学习，不多弥补知识盲区，扩充个人知识领域，才能知道更多有用的信息，见多识广的人，更能规避风险，才有更大的机会抓住机遇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇&quot;&gt;&lt;a href=&quot;#当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇&quot; class=&quot;headerlink&quot; title=&quot;当前的市场化
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="备忘录" scheme="https://zhuyiting.xyz/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>TED不念过往,不惧将来</title>
    <link href="https://zhuyiting.xyz/2019/10/24/TED%E4%B8%8D%E5%BF%B5%E8%BF%87%E5%BE%80,%E4%B8%8D%E6%83%A7%E5%B0%86%E6%9D%A5/"/>
    <id>https://zhuyiting.xyz/2019/10/24/TED不念过往,不惧将来/</id>
    <published>2019-10-24T02:16:00.000Z</published>
    <updated>2019-10-24T14:19:31.012Z</updated>
    
    <content type="html"><![CDATA[<p><u>“These are the times” said Thomas Paine,”that try men’s souls.”</u><br>“这些时间考验着人们的灵魂”Thomas Paine说.<br><u>And they’re trying ours now.</u><br>现在它们在考验我们.<br><u>This is a fateful moment in the history of the West.</u><br>这是一个西方历史的命运时刻.<br><u>We’ve seen divisive elections and divided societies.</u><br>我们看到了分裂的选举和分裂的社会.<br><u>We’ve seen a growth of extremism in politics and religion,</u><br>我们看到了一群极端分子在政治上和宗教上,<br><u>all of it fueled by anxiety,uncertainty and fear,</u><br>所有的这些都是被焦虑,不确定和害怕所推动,<br><u>of a world that’s changing almost faster than we can bear,</u><br>因为世界几乎在以比我们能够承受的更快的速度在改变,<br><u>and the sure knowledge that it’s going to change faster still.</u><br>并且都知道它未来还会改变的这么快<br><u>I have a friend in Washington.</u><br>我有一个朋友在Washington<br><u>I asked him,what was it like being in America during the recent presidential election?</u><br>我问他,在最近的总统选举期间待在美国像是什么?<br><u>He said to me,”Well,it was like the man sitting on the deck of the Titanic with a glass of whiskey in his hand and he’s saying,’I know I asked for ice–,but this is ridiculous.’”</u><br>他告诉我,”哇,它就像一个人坐在泰坦尼克的甲板上,手里拿着威士忌说’我知道我要了冰,但这太疯狂了’”<br><u>So is there something we can do,each of us,to be able to face the future without fear?</u><br>所以有没有一些事我们每个人都可以做的,可以让我们能够对未来不感到恐惧?<br><u>I think there is.</u><br>我觉得是有的.<br><u>And one way into it is to see that perhaps the most simple way into a culture and into an age is to ask: What do people worship? </u><br>有一个方法 也许是最简单的方法 进入一个文化进入一个时代去问:人们崇拜什么?<br><u>People have worshipped so many different things–the sun,the stars,the storm.</u><br>人们过去崇拜很多不同的是–太阳,星型,风暴.<br><u>Some people worship many gods, some one,some none.</u><br>有些人崇拜很多神,有些人崇拜一个,有些人没有<br><u>In the 19th and 20th centuries,people worshipped the nation,the Aryan race,the communist state.</u><br>在19到20世纪,人们崇拜国家,崇拜Aryan种族,崇拜共产主义.<br><u>What do we worship?</u><br>那我们崇拜什么呢?<br><u>I think future anthropologists will take a look at the books we read on self-help,self-realization,self-esteem.</u><br>我觉得未来的人类学家会看看到我们读过的书,关于自我帮助,自我认识,自我尊重,<br><u>They’ll look at the way we talk about morality as being true to oneself, the way we talk about politics as a matter of individual rights,</u><br>他们会看我们谈论道德的行为当成对自己的正确,我们谈论政治的行为当成个人权利的问题.<br><u>and they’ll look at this wonderful new religious ritual we have created.</u><br>并且他们会看看这些很棒的我们创造的宗教利益</p><p><u>You know the one?</u><br>你知道那是什么嘛?<br><u>Called the “selfie”.</u><br>我们成为”自拍”.<br><u>And I think they’ll conclude that what we worship in our time is the self,the me,the I.</u><br>并且我觉得他们会得出结论 那就是我们在那时候崇拜的就是自我,是我<br><u>And this is great.</u><br>这是很棒的<br><u>It’s liberating.</u><br>这是自由的<br><u>It’s empowering.</u><br>这是有权利的.<br><u>It’s wonderful.</u><br>这是极好的.<br><u>But don’t forget that biologically,</u><br>但是不要在生物上忘了<br><u>we’re social animals.</u><br>我们是社交动物<br><u>We’ve spent most of our evolutionary history in small groups.</u><br>我们进化历史中的很多时间都花在小小的群体中<br><u>We need those face-to-face interactions,where we learn the choreography of altruism and where we create those spiritual goods like friendship and trust and loyalty and love that redeem our solitude.</u><br>我们需要面对面的交流,来学习利他主义并且创造精神上的就像友谊,信任,忠诚和爱的东西以此救赎我们的孤独.<br><u>When we have too much of the “I” and too little of the “we”,</u><br>当我们过于关注我的, 很少关注我们时,<br><u>we can find ourselves vulnerable,fearful and alone.</u><br>我们会发现有多点的,会恐惧的并且孤独的自己.<br><u>It was no accident that Sherry Turkle of MIT called the book she wrote on the impact of social media “Alone together”.</u><br>MIT的Sherry Turkle把他写的关于社交媒体的影响命名为”一起孤单”不是一个意外.<br><u>So I think the simplest way of safeguarding the future “you” is to strengthen the future “us” in three dimensions:</u><br>所以我认为,最简单的保障未来的”你”的方法就是从三个方面来加深未来的”我们”<br><u>the us of relationship,the us of identity and the us of responsibility.</u><br>我们的关系,我们的身份和我们的责任<br><u>So let me first take the us of relationship.</u><br>所以,首先让我谈谈我们的关系.<br><u>And here, forgive me if I get personal.</u><br>在这里,原谅我如果我谈自己的事.<br><u>Once upon a time,a very long time age,I was a 20-year-old undergraduate studying philosophy.</u><br>从前,很长一段时间之前,我是20岁的大学生在学习哲学.<br><u>I was into Nietzsche and Schopenhauer and Sartre and Camus.</u><br>我沉迷于Nietzsche,Schopenhauer,Sartre和Camus<br><u>I was full of ontological uncertainty and existential angst.</u><br>我充满了本体论的不确定性和存在的焦虑<br><u>It was terrific.</u><br>那是极好的.<br><u>I was self-obsessed and thoroughly unpleasant to know,</u><br>我是自恋的并且感到非常厌恶,<br><u>until one day I saw, across the courtyard, a girl who was everything that I wasn’t.</u><br>直到有一天我看到,穿过这院子,一个女孩一切都和我不一样.<br><u>She radiated sunshine.</u><br>她散发着阳光.<br><u>She emanated joy.</u><br>她散发着快乐.<br><u>I found out her name was Elaine.</u><br>我找到她的名字是Elaine.<br><u>We met,We talked,We married.</u><br>我们见面,我们聊天,我们结婚.<br><u>And 47 years,three children and eight grandchildren later,</u><br>47年 有了3个小孩,8个孙子 以后<br><u>I can safely say it was the best decision I ever took in my life,</u><br>我可以说,那是我生命中做的最好的决定.<br><u>because it’s the people not like us that make us grow.</u><br>因为和我们不一样的人会让我们成长.<br><u>And that is why I thik we have to do just that.</u><br>这就是为什么我认为我们必须这样做.<br><u>The trouble with Google filters,Facebook friends and reading the news by narrowcasting rather than broadcasting means that we’re surrounded almost entirely by people like us whose views,whose opinions,whose prejudices,even, are just like ours.</u><br>谷歌过滤,脸书朋友圈以及阅读新闻通过很窄的渠道而不是广播这些麻烦意味着我们几乎完全被那些观点,想法,甚至成见和我们的一样的人包围着.<br><u>And Cass Sunstein of Harvard has shown that if we surround ourselves with people with the same views as us,we get more extreme.</u><br>哈弗的Cass Sunstein展示了如果我们被那些观点和我们一样的自己人包围,我们会变得极端<br><u>I think we need to renew those face-to-face encounters with the people not like us.</u><br>我认为我们需要重新和那些跟我们不一样的人面对面的接触.<br><u>I think we need to do that in order to realize that we can disagree strongly and yet still stay friends.</u><br>我认为我们需要这样做,为了我们能意识到强烈地争执也仍然可以当朋友.<br><u>It’s in those face-to-face encounters that we discover that the people not like us are just people like us.</u><br>在面对面的接触中我们发现那些和我们不同的人就是和我们一样的人<br><u>And actually, every time we hold out the hand of friendship to somebody not like us,whose class or creed or color are different from ours,</u><br>事实上,每一次,我们向那些和我们有不一样种族或者不一样信条或者不一样的肤色的人伸出友谊的手,<br><u>we heal one of the fractures of our wounded world.</u><br>我们治愈了我们破裂世界的一刀伤痕.<br><u>That is the us of relationship.</u><br>这就是我们的关系.<br><u>Second is the us of identity.</u><br>第二点是我们的身份.<br><u>Let me give you a thought experiment.</u><br>让我给你做个思维实验.<br><u>Have you been to Washington?</u><br>你去过Washington嘛?<br><u>Have tou seen the memorials?</u><br>你看过纪念碑嘛?<br><u>Absolutely fascinating.</u><br>绝对让人神魂颠倒.<br><u>There’s the Lincoln Memorial:Gettysburg Address on one side,Second Inaugural on the other.</u><br>在林肯纪念碑,一边是Gettysburg演说,另一边是Inaugural.<br><u>You go to the Jefferson Memorial,screeds of text.</u><br>你去Jefferson纪念碑,有一段话.<br><u>Martin Luther King Memorial,more than a dozen quotes from his speeches.</u><br>马丁路德金纪念碑,超过12条他演讲的引用.<br><u>I didn’t realize,in America you read memorials.</u><br>我不认为,你在美国会读这些纪念碑.<br><u>Now go to the equivalent in London in Parliament Square and you will see that the monument to David Lloyd George contains three words:David Lloyd George.</u><br>现在 一样去了伦敦的国会广场并且你会看到David Lloyd George的纪念碑上包含了三个单词:David Lloyd George.<br><u>Nelson Mandela gets two.</u><br>Nelson Mandela有两个<br><u>Churchill gets just one:Chuichill.</u><br>Churchill只有一个:Chuichill<br><u>Why the difference?</u><br>为什么会有这样的差异呢<br><u>I’ll tell you why the difference.</u><br>我来告诉你们为什么会有这样的差异.<br><u>Because America was from the outset a nation of wave after wave of immigrants,</u><br>因为美国是一个从一波又一波的移民开始的国家<br><u>so it had to create an identity which it did by telling a story which you learned at school, you read on memorials and you heard repeated in presidential inaugural addresses.</u><br>因此,它必须创造一个形象,那个形象可以通过你学校学到的故事,你在纪念碑上读到东西和你反复在总统开幕演讲中听到的故事来讲的.<br><u>Britain until recently wasn’t a nation of immigrants,</u><br>不列颠直到最近也不是一个移民国家,<br><u>so it could take identity for granted.</u><br>所以它可以认为形象是理所当然的.<br><u>The trouble is now that two tings have happened which shouldn’t have happened together.</u><br>麻烦的是现在两件不应该同时发生的事发生了.<br><u>The first thing is in the West we’ve stopped telling this story of who we are and why,even in America</u><br>第一件事是在西方,我们停止讲述我是谁还有为什么的故事了,甚至是美国<br><u>And at the same time,immigration is higher than it’s ever been before.</u><br>同时,移民人口变得比以前更高了.<br><u>So when you tell a story and your identity is strong,you can welcome the stranger,</u><br>因此,当你们讲述一个故事并且你们形象很强的时候,你们能欢迎那些陌生人<br><u>but when you stop telling the story,your identity gets weak and you fell threatened by the stranger.</u><br>但是,当你们停止讲述故事,你们的形象变弱了,并且你们感到了陌生人的威胁<br><u>And that’s bad.</u><br>那就糟了<br><u>I tell you,Jews have been scattered and dispersed and exiled for 2000 years.</u><br>我告诉你们,犹太人已经被分开,被分散并且被流亡了2000多年.<br><u>We never lost our identity.</u><br>我们从来没有失去我们的形象.<br><u>Why?Because at least once a year,on the festival of Passover,</u><br>为什么? 因为么每年至少一次,在Passover节<br><u>we told our story and we taught it to our children and we ate the unleavened bread of affliction and tasted the bitter herbs of slavery.</u><br>我们谈论我们的故事并且我们教它给我们的孩子,并且我们吃过还没发酵的苦的面包并且吃过奴隶制的苦.<br><u>So we never lost our identity.</u><br>所以我们从来没有丢失我们的形象.<br><u>I think collectively we’ve got to get back to telling our story,who we are,where we came from,what ideals by which we live.</u><br>我认为共同的,我们必须回到的我们的故事上来说,我们是谁,我们来自哪里,我们生活的理想是什么<br><u>And if that happens,we will become strong enough to welcome the stranger and say,</u><br>如果发生这样的事,我们会变得强壮的足够欢迎陌生人并且说<br><u>“Come and share our lives,share our stories,share our aspirations and dreams.”</u><br>“过来并且分享我们的生活,分享我们的故事,分享我们的愿望和梦想”.<br><u>That is the us of identity.</u><br>这就是我们的形象.<br><u>And finally,the us of responsibility.</u><br>最后,是我们的责任.<br><u>Do you know something?</u><br>你知道嘛?<br><u>My favorite phrase in all of politics,very American phrase,is:”We the people.”</u><br>我最喜欢的一句话在所有的政治言论中,一句非常美国的话,就是”我们人”<br><u>Why “we the people?”</u><br>为什么是”我们人”?<br><u>Because it says that we all share collective responsibility for our collective future.</u><br>因为它表达了我们分享所有集体的责任为了我们集体的未来.<br><u>And that’s how things really are and should be.</u><br>并且那就是应该有的样子<br><u>Have you noticed how magical thinking has taken over our politics?</u><br>你有没有注意到多少神奇的思想占据着我们的政治?<br><u>So we say, all you’ve got to do is elect this strong leader and he or she will solve all our problems for us.</u><br>因此我们说,我们都要去选一个强力的领导并且他会为我们解决我们的问题.<br><u>Believe me, that is magical thinking.</u><br>相信我,那是幻想.<br><u>And then we get the extremes:the far right,the far left,the extreme religious and extreme anti-religious,</u><br>当我们变得极端以后:极右,极左,极端宗教注意或者极端反宗教,<br><u>the far right dreaming of a golden age that never was,</u><br>极端的右派梦想着一个从未有过的黄金时代,<br><u>the far left dreaming of a utopia that never will be,</u><br>极端的左派梦想着一个从未出现过的乌托邦,<br><u>and the religious and anti-religious equally convinced that all it takes id God or the absence of God to save us from ourselves.</u><br>宗教和反宗教同意相信上帝或者没有上帝来拯救我们.<br><u>That,too,is magical thinking,</u><br>这是非常神奇的想法.<br><u>because the only people who will save us from ourselves is we the people,all of us together.</u><br>因为可以拯救我们只有我们自己,所有的我们一起.<br><u>And when we do that,and when we move from the politics of me to the politics of all of us together,</u><br>并且当我们去做,当我们从我的政治中到所有的我们的政治中<br><u>we rediscover those beautiful,counterintuitive truths:</u><br>我们重新发现了那些美丽的,与直觉相反的事实:<br><u>that a nation is strong when it cares for the weak,</u><br>当一个国家关注弱者的时候它是强大的,<br><u>that it becomes rich when it cares for the poor,</u><br>当一个国家关心穷人的时候它是富裕的,<br><u>it becomes invulnerable when it cares about the vulnerable.</u><br>当一个国家开始关心那些有弱点的人的时候,它是无懈可击的.<br><u>That is what makes great nations.</u><br>这就是伟大的国家的形成.<br><u>So here is my simple suggestion.</u><br>因此,这有一个我的简单简易<br><u>It might just change your life,</u><br>它也许可以改变你的生活,<br><u>and it might just help to begin to change the world.</u><br>它也许可以帮助开始改变这个世界<br><u>Do a search and replace operation one the text of your mind,</u><br>做一个搜索和替换操作,一是你心中的文字,<br><u>and wherever you encounter the word “self”, substitute the word “other”.</u><br>并且无论在哪你遇到了单词”自己”,替换成单词”其他人”<br><u>So instead of self-help,other-help;</u><br>替代”自我帮助”为”他人帮助”<br><u>instead of self-esteem,other-esteem.</u><br>替代”自我尊重”为”他人尊重”<br><u>And if you do that,you will begin to fell the power of what for me is one of the most moving sentences in all of religious literature.</u><br>如果你这么做,你会开始感受到力量,这力量对我来说就是所有宗教文学中最动人的句子之一<br><u>“Though I walk through the valley of the shadow of death,I will fear no evil,for you are with me.”</u><br>虽然我在死亡的阴影的深渊里走,但是我不会害怕邪恶,因为你和我在一起<br><u>We can face any future without fear so long as we know we will not face it alone.</u><br>我们能够不害怕面对任何我们知道的我们不能独自面对的未来<br><u>So for the sake of the future “you”,together let us strengthen the future “us”.</u><br>为了未来的”你”,让我们一起加固未来的”我们”</p><p><u>Thank you.</u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;u&gt;“These are the times” said Thomas Paine,”that try men’s souls.”&lt;/u&gt;&lt;br&gt;“这些时间考验着人们的灵魂”Thomas Paine说.&lt;br&gt;&lt;u&gt;And they’re trying ours now.
      
    
    </summary>
    
    
      <category term="英语" scheme="https://zhuyiting.xyz/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="TED" scheme="https://zhuyiting.xyz/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>嘉善立春</title>
    <link href="https://zhuyiting.xyz/2019/10/21/%E5%98%89%E5%96%84%E7%AB%8B%E6%98%A5/"/>
    <id>https://zhuyiting.xyz/2019/10/21/嘉善立春/</id>
    <published>2019-10-21T09:06:16.000Z</published>
    <updated>2019-10-22T02:40:41.045Z</updated>
    
    <content type="html"><![CDATA[<p>节气之首是立春,<br>万物复苏很精神.<br>嘉善地方虽然小,<br>东西样样都不少.<br>初春温度还很低,<br>地嘉人善却不冷.<br>早晨起来还有露,<br>上学骑在阳光路.<br>几年发展太迅速,<br>日子过的真惬意.<br>不管我们去哪里,<br>嘉善永远是窝里.<br>车站路上哼小曲,<br>儿童公园有飞机.<br>白水塘里游大鱼,<br>大云还有巧克力.<br>西塘景区人密集,<br>灯火夜景很美丽.<br>现在还有新西塘,<br>小桥流水和人家.<br>看看嘉善的变化,<br>讲讲嘉善的闲话.<br>今年也要努努力,<br>明年定会更顺利.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;节气之首是立春,&lt;br&gt;万物复苏很精神.&lt;br&gt;嘉善地方虽然小,&lt;br&gt;东西样样都不少.&lt;br&gt;初春温度还很低,&lt;br&gt;地嘉人善却不冷.&lt;br&gt;早晨起来还有露,&lt;br&gt;上学骑在阳光路.&lt;br&gt;几年发展太迅速,&lt;br&gt;日子过的真惬意.&lt;br&gt;不管我们去哪里,&lt;br&gt;嘉善永远是
      
    
    </summary>
    
    
      <category term="生活方式" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    
    
      <category term="备忘录" scheme="https://zhuyiting.xyz/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>2019双十一攻略</title>
    <link href="https://zhuyiting.xyz/2019/10/21/2019%E5%8F%8C%E5%8D%81%E4%B8%80%E6%94%BB%E7%95%A5/"/>
    <id>https://zhuyiting.xyz/2019/10/21/2019双十一攻略/</id>
    <published>2019-10-21T01:49:00.000Z</published>
    <updated>2019-10-29T02:32:17.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h3><ol><li>每日任务领喵币</li><li>团队PK拉人助力</li></ol><h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><ol><li>每日任务领喵币</li><li>双十一7点领彩蛋</li><li>双十一7点钻石铂金会员领金手指</li></ol><h3 id="优酷"><a href="#优酷" class="headerlink" title="优酷"></a>优酷</h3><ol><li>每日进入APP获红包</li><li>每日视频观看3分钟获红包</li></ol><h3 id="UC"><a href="#UC" class="headerlink" title="UC"></a>UC</h3><ol><li>每日签到领红包</li><li>每日开启红包雨</li><li>每日可抽10次幸运好礼</li></ol><h3 id="高德"><a href="#高德" class="headerlink" title="高德"></a>高德</h3><ol><li>完成每日体验获红包</li></ol><h3 id="饿了吗"><a href="#饿了吗" class="headerlink" title="饿了吗"></a>饿了吗</h3><ol><li>每日心愿城打卡得红包</li><li>下单外卖获红包</li><li>每日三次掷骰子有机会获红包</li></ol><h3 id="口碑"><a href="#口碑" class="headerlink" title="口碑"></a>口碑</h3><ol><li>每日登陆领红包</li><li>掷骰子获得更多奖励</li><li>每天玩游戏5次可获得一个红包</li></ol><h3 id="飞猪"><a href="#飞猪" class="headerlink" title="飞猪"></a>飞猪</h3><ol><li>每日签到获红包</li><li>完成每日任务,打卡成功获红包</li></ol><h3 id="淘宝特价版"><a href="#淘宝特价版" class="headerlink" title="淘宝特价版"></a>淘宝特价版</h3><ol><li>登陆签到得红包</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;淘宝&quot;&gt;&lt;a href=&quot;#淘宝&quot; class=&quot;headerlink&quot; title=&quot;淘宝&quot;&gt;&lt;/a&gt;淘宝&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;每日任务领喵币&lt;/li&gt;
&lt;li&gt;团队PK拉人助力&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;支付宝&quot;&gt;&lt;a href=&quot;#支付宝&quot;
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活技巧" scheme="https://zhuyiting.xyz/tags/%E7%94%9F%E6%B4%BB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>英语练习01</title>
    <link href="https://zhuyiting.xyz/2019/10/20/%E8%8B%B1%E8%AF%AD%E7%BB%83%E4%B9%A001/"/>
    <id>https://zhuyiting.xyz/2019/10/20/英语练习01/</id>
    <published>2019-10-20T02:56:00.000Z</published>
    <updated>2019-10-29T07:06:38.601Z</updated>
    
    <content type="html"><![CDATA[<p>Oceanography has been defined as “The application of all sciences to the study of the sea”.<br><font color="red">{Oceanography:海洋学}<br>海洋学已经被定义为”所有科学的应用来进行海洋的学习”.<br></font></p><p>Before the nineteenth century ,scientists with an interest in the sea were few and far between.<br><font color="red">在19世纪之前,对海洋有兴趣的科学家们是很少并且距离很远的.<br></font></p><p>Certainly Newton considered some theoretical aspects of it in his writings ,but he was reluctant to go to sea to further his work.<br><font color="red">{consider:认为,Certainly:当然啦,theoretical:理论上的,aspect:方面,reluctant:不情愿的}<br>当然啦,牛顿在他写下的内容中考虑到一些理论上的方面,但是他是不情愿的去海洋去更进一步他的工作<br></font></p><p>For most people the sea was remote, and with the exception of early intercontinental travelers or others who earned a living from the sea ,there was little reason to ask many questions about it ,let alone to ask what lay beneath the surface.<br><font color="red">{remote:遥远的,intercontinental:洲际的,let alone:更不必说}<br>因为对于很多人海洋是遥远的,除了早期的洲际航行中的从海洋中获得生活的人,有很少的理由来问这些问题,更不必说去问在表面之下的是什么了.<br></font></p><p>The first time that the question ”what is at the bottom of the oceans? ”had to be answered with any commercial consequence was when the laying of a telegraph cable from Europe to America was proposed.<br><font color="red">{commercial:商业的}<br>第一次”海洋的底部是什么?”这个问题必须被回答伴随着商业结果是在电话线缆要躺在欧洲到美国被提出的时候<br></font></p><p>The engineers had to know the depth profile of the route to estimate the length of cable that had to be manufactured.<br><font color="red">{estimate:估计}<br>工程师必须知道路径的深度轮廓来估算必须被人造的线缆的长度<br></font></p><p>It was to Maury of the US Navy that the Atlantic Telegraph Company turned, in 1853, for information on this matter.<br><font color="red"><br>在1853年,大西洋电报公司转向了美国海军的莫里,为了在这件事情上的信息<br></font></p><p>In the 1840s, Maury had been responsible for encouraging voyages during which soundings were taken to investigate the depths of the North Atlantic and Pacific Oceans.<br><font color="red">{investigate:调查}<br>在1840年代,莫里是负责的为了鼓励航海在这个声音被用来调查大西洋和太平痒的深度的时期<br></font></p><p>Later, some of his findings aroused much popular interest in his book The Physical Geography of the Sea.<br><font color="red">{arouse:引起}<br>之后,他的发现的在他的《The Physical Geography of the Sea》书里的一些事引起了很大的兴趣<br></font></p><p>The cable was laid, but not until 1866 was the connection made permanent and reliable.<br><font color="red"><br></font></p><p>At the early attempts, the cable failed and when it was taken out for repairs it was found to be covered in living growths, a fact which defied contemporary scientific opinion that there was no life in the deeper parts of the sea.<br><font color="red"><br></font></p><p>Within a few years oceanography was under way.<br><font color="red"><br></font></p><p>In 1872 Thomson led a scientific expedition, which lasted four years and brought home thousands of samples from the sea.<br><font color="red"><br></font></p><p>Their classification and analysis occupied scientists for years and led to a five-volume report, the last volume being published in 1895.<br><font color="red"><br></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Oceanography has been defined as “The application of all sciences to the study of the sea”.&lt;br&gt;&lt;font color=&quot;red&quot;&gt;{Oceanography:海洋学}&lt;br&gt;海洋
      
    
    </summary>
    
    
      <category term="英语" scheme="https://zhuyiting.xyz/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="练习" scheme="https://zhuyiting.xyz/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>延期年金现值的计算</title>
    <link href="https://zhuyiting.xyz/2019/10/18/%E5%BB%B6%E6%9C%9F%E5%B9%B4%E9%87%91%E7%8E%B0%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
    <id>https://zhuyiting.xyz/2019/10/18/延期年金现值的计算/</id>
    <published>2019-10-18T01:56:00.000Z</published>
    <updated>2019-10-29T02:32:30.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="延期年金"><a href="#延期年金" class="headerlink" title="延期年金"></a>延期年金</h2><p>==延期年金==又称递延年金,是指在最初若干期没有收付款项的情况下,后面若干期有等额的系列收付款项的年金.<br>==延期年金现值计算==假定最初又m期没有收付款项,后面n期每年有等额的系列收付款项,则此延期年金的现值即为后n期年金先折现至n期期初(m期期末),再折现至第一期期初的现值.</p><p>==年金==是指定期定额的收付款项</p><p>==现值==成本或收益的价值以今天的现金来计量时,称为现值</p><p>==终值==是指现在某一时点上的一定量现金折合到未来的价值</p><ol><li>延期年金的==终值==大小和延期数m无关<br>所以延期m期之后的n期年金终值为<br>$ F=A\frac{(1+i)^n-1}{i} $</li><li>普通年金的==现值==计算<br>$ P=A\frac{1-\frac{1}{(1+i)^n}}{i}$</li><li>==延期年金==的现值计算<br>延期年金的现值与延期数m相关,m越长,现值越低.<ul><li>方法一:先当成n期普通年金,求出现值P1,在将P作为第m期终值,再折现到第一期的现值P2<br>$P1=A\frac{1-\frac{1}{(1+i)^n}}{i}$<br>$P2=P1\frac{1-\frac{1}{(1+i)^m}}{i} $</li><li>方法二:先计算m+n期现值,再减去m期年金现值<br>$P=A(\frac{1-\frac{1}{(1+i)^m(1+i)^n}}{i}-\frac{1-\frac{1}{(1+i)^m}}{i}) $</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;延期年金&quot;&gt;&lt;a href=&quot;#延期年金&quot; class=&quot;headerlink&quot; title=&quot;延期年金&quot;&gt;&lt;/a&gt;延期年金&lt;/h2&gt;&lt;p&gt;==延期年金==又称递延年金,是指在最初若干期没有收付款项的情况下,后面若干期有等额的系列收付款项的年金.&lt;br&gt;==延期年
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活技巧" scheme="https://zhuyiting.xyz/tags/%E7%94%9F%E6%B4%BB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JVM指令手册</title>
    <link href="https://zhuyiting.xyz/2019/07/30/JVM%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
    <id>https://zhuyiting.xyz/2019/07/30/JVM指令手册/</id>
    <published>2019-07-30T07:18:00.000Z</published>
    <updated>2019-10-20T00:56:02.507Z</updated>
    
    <content type="html"><![CDATA[<p>栈和局部变量操作<br>将常量压入栈的指令<br>aconst_null 将null对象引用压入栈<br>iconst_m1 将int类型常量-1压入栈<br>iconst_0 将int类型常量0压入栈<br>iconst_1 将int类型常量1压入栈<br>iconst_2 将int类型常量2压入栈<br>iconst_3 将int类型常量3压入栈<br>iconst_4 将int类型常量4压入栈<br>iconst_5 将int类型常量5压入栈<br>lconst_0 将long类型常量0压入栈<br>lconst_1 将long类型常量1压入栈<br>fconst_0 将float类型常量0压入栈<br>fconst_1 将float类型常量1压入栈<br>dconst_0 将double类型常量0压入栈<br>dconst_1 将double类型常量1压入栈<br>bipush 将一个8位带符号整数压入栈<br>sipush 将16位带符号整数压入栈<br>ldc 把常量池中的项压入栈<br>ldc_w 把常量池中的项压入栈（使用宽索引）<br>ldc2_w 把常量池中long类型或者double类型的项压入栈（使用宽索引）<br>从栈中的局部变量中装载值的指令<br>iload 从局部变量中装载int类型值<br>lload 从局部变量中装载long类型值<br>fload 从局部变量中装载float类型值<br>dload 从局部变量中装载double类型值<br>aload 从局部变量中装载引用类型值（refernce）<br>iload_0 从局部变量0中装载int类型值<br>iload_1 从局部变量1中装载int类型值<br>iload_2 从局部变量2中装载int类型值<br>iload_3 从局部变量3中装载int类型值<br>lload_0 从局部变量0中装载long类型值<br>lload_1 从局部变量1中装载long类型值<br>lload_2 从局部变量2中装载long类型值<br>lload_3 从局部变量3中装载long类型值<br>fload_0 从局部变量0中装载float类型值<br>fload_1 从局部变量1中装载float类型值<br>fload_2 从局部变量2中装载float类型值<br>fload_3 从局部变量3中装载float类型值<br>dload_0 从局部变量0中装载double类型值<br>dload_1 从局部变量1中装载double类型值<br>dload_2 从局部变量2中装载double类型值<br>dload_3 从局部变量3中装载double类型值<br>aload_0 从局部变量0中装载引用类型值<br>aload_1 从局部变量1中装载引用类型值<br>aload_2 从局部变量2中装载引用类型值<br>aload_3 从局部变量3中装载引用类型值<br>iaload 从数组中装载int类型值<br>laload 从数组中装载long类型值<br>faload 从数组中装载float类型值<br>daload 从数组中装载double类型值<br>aaload 从数组中装载引用类型值<br>baload 从数组中装载byte类型或boolean类型值<br>caload 从数组中装载char类型值<br>saload 从数组中装载short类型值<br>将栈中的值存入局部变量的指令<br>istore 将int类型值存入局部变量<br>lstore 将long类型值存入局部变量<br>fstore 将float类型值存入局部变量<br>dstore 将double类型值存入局部变量<br>astore 将将引用类型或returnAddress类型值存入局部变量<br>istore_0 将int类型值存入局部变量0<br>istore_1 将int类型值存入局部变量1<br>istore_2 将int类型值存入局部变量2<br>istore_3 将int类型值存入局部变量3<br>lstore_0 将long类型值存入局部变量0<br>lstore_1 将long类型值存入局部变量1<br>lstore_2 将long类型值存入局部变量2<br>lstore_3 将long类型值存入局部变量3<br>fstore_0 将float类型值存入局部变量0<br>fstore_1 将float类型值存入局部变量1<br>fstore_2 将float类型值存入局部变量2<br>fstore_3 将float类型值存入局部变量3<br>dstore_0 将double类型值存入局部变量0<br>dstore_1 将double类型值存入局部变量1<br>dstore_2 将double类型值存入局部变量2<br>dstore_3 将double类型值存入局部变量3<br>astore_0 将引用类型或returnAddress类型值存入局部变量0<br>astore_1 将引用类型或returnAddress类型值存入局部变量1<br>astore_2 将引用类型或returnAddress类型值存入局部变量2<br>astore_3 将引用类型或returnAddress类型值存入局部变量3<br>iastore 将int类型值存入数组中<br>lastore 将long类型值存入数组中<br>fastore 将float类型值存入数组中<br>dastore 将double类型值存入数组中<br>aastore 将引用类型值存入数组中<br>bastore 将byte类型或者boolean类型值存入数组中<br>castore 将char类型值存入数组中<br>sastore 将short类型值存入数组中<br>wide指令<br>wide 使用附加字节扩展局部变量索引<br>通用(无类型）栈操作<br>nop 不做任何操作<br>pop 弹出栈顶端一个字长的内容<br>pop2 弹出栈顶端两个字长的内容<br>dup 复制栈顶部一个字长内容<br>dup_x1 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的两个字长的内容压入栈<br>dup_x2 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br>dup2 复制栈顶部两个字长内容<br>dup2_x1 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br>dup2_x2 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的四个字长的内容压入栈<br>swap 交换栈顶部两个字长内容<br>类型转换<br>i2l 把int类型的数据转化为long类型<br>i2f 把int类型的数据转化为float类型<br>i2d 把int类型的数据转化为double类型<br>l2i 把long类型的数据转化为int类型<br>l2f 把long类型的数据转化为float类型<br>l2d 把long类型的数据转化为double类型<br>f2i 把float类型的数据转化为int类型<br>f2l 把float类型的数据转化为long类型<br>f2d 把float类型的数据转化为double类型<br>d2i 把double类型的数据转化为int类型<br>d2l 把double类型的数据转化为long类型<br>d2f 把double类型的数据转化为float类型<br>i2b 把int类型的数据转化为byte类型<br>i2c 把int类型的数据转化为char类型<br>i2s 把int类型的数据转化为short类型<br>整数运算<br>iadd 执行int类型的加法<br>ladd 执行long类型的加法<br>isub 执行int类型的减法<br>lsub 执行long类型的减法<br>imul 执行int类型的乘法<br>lmul 执行long类型的乘法<br>idiv 执行int类型的除法<br>ldiv 执行long类型的除法<br>irem 计算int类型除法的余数<br>lrem 计算long类型除法的余数<br>ineg 对一个int类型值进行取反操作<br>lneg 对一个long类型值进行取反操作<br>iinc 把一个常量值加到一个int类型的局部变量上<br>逻辑运算<br>移位操作<br>ishl 执行int类型的向左移位操作<br>lshl 执行long类型的向左移位操作<br>ishr 执行int类型的向右移位操作<br>lshr 执行long类型的向右移位操作<br>iushr 执行int类型的向右逻辑移位操作<br>lushr 执行long类型的向右逻辑移位操作<br>按位布尔运算<br>iand 对int类型值进行“逻辑与”操作<br>land 对long类型值进行“逻辑与”操作<br>ior 对int类型值进行“逻辑或”操作<br>lor 对long类型值进行“逻辑或”操作<br>ixor 对int类型值进行“逻辑异或”操作<br>lxor 对long类型值进行“逻辑异或”操作<br>浮点运算<br>fadd 执行float类型的加法<br>dadd 执行double类型的加法<br>fsub 执行float类型的减法<br>dsub 执行double类型的减法<br>fmul 执行float类型的乘法<br>dmul 执行double类型的乘法<br>fdiv 执行float类型的除法<br>ddiv 执行double类型的除法<br>frem 计算float类型除法的余数<br>drem 计算double类型除法的余数<br>fneg 将一个float类型的数值取反<br>dneg 将一个double类型的数值取反<br>对象和数组<br>对象操作指令<br>new 创建一个新对象<br>checkcast 确定对象为所给定的类型<br>getfield 从对象中获取字段<br>putfield 设置对象中字段的值<br>getstatic 从类中获取静态字段<br>putstatic 设置类中静态字段的值<br>instanceof 判断对象是否为给定的类型<br>数组操作指令<br>newarray 分配数据成员类型为基本上数据类型的新数组<br>anewarray 分配数据成员类型为引用类型的新数组<br>arraylength 获取数组长度<br>multianewarray 分配新的多维数组<br>控制流<br>条件分支指令<br>ifeq 如果等于0，则跳转<br>ifne 如果不等于0，则跳转<br>iflt 如果小于0，则跳转<br>ifge 如果大于等于0，则跳转<br>ifgt 如果大于0，则跳转<br>ifle 如果小于等于0，则跳转<br>if_icmpcq 如果两个int值相等，则跳转<br>if_icmpne 如果两个int类型值不相等，则跳转<br>if_icmplt 如果一个int类型值小于另外一个int类型值，则跳转<br>if_icmpge 如果一个int类型值大于或者等于另外一个int类型值，则跳转<br>if_icmpgt 如果一个int类型值大于另外一个int类型值，则跳转<br>if_icmple 如果一个int类型值小于或者等于另外一个int类型值，则跳转<br>ifnull 如果等于null，则跳转<br>ifnonnull 如果不等于null，则跳转<br>if_acmpeq 如果两个对象引用相等，则跳转<br>if_acmpnc 如果两个对象引用不相等，则跳转<br>比较指令<br>lcmp 比较long类型值<br>fcmpl 比较float类型值（当遇到NaN时，返回-1）<br>fcmpg 比较float类型值（当遇到NaN时，返回1）<br>dcmpl 比较double类型值（当遇到NaN时，返回-1）<br>dcmpg 比较double类型值（当遇到NaN时，返回1）<br>无条件转移指令<br>goto 无条件跳转<br>goto_w 无条件跳转（宽索引）<br>表跳转指令<br>tableswitch 通过索引访问跳转表，并跳转<br>lookupswitch 通过键值匹配访问跳转表，并执行跳转操作<br>异常<br>athrow 抛出异常或错误<br>finally子句<br>jsr 跳转到子例程<br>jsr_w 跳转到子例程（宽索引）<br>rct 从子例程返回<br>方法调用与返回<br>方法调用指令<br>invokcvirtual 运行时按照对象的类来调用实例方法<br>invokespecial 根据编译时类型来调用实例方法<br>invokestatic 调用类（静态）方法<br>invokcinterface 调用接口方法<br>方法返回指令<br>ireturn 从方法中返回int类型的数据<br>lreturn 从方法中返回long类型的数据<br>freturn 从方法中返回float类型的数据<br>dreturn 从方法中返回double类型的数据<br>areturn 从方法中返回引用类型的数据<br>return 从方法中返回，返回值为void<br>线程同步<br>montiorenter 进入并获取对象监视器<br>monitorexit 释放并退出对象监视器</p><hr><p>JVM指令助记符<br>变量到操作数栈：iload,iload_,lload,lload_,fload,fload_,dload,dload_,aload,aload_<br>操作数栈到变量：istore,istore_,lstore,lstore_,fstore,fstore_,dstore,dstor_,astore,astore_<br>常数到操作数栈：bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_,lconst_,fconst_,dconst_<br>加：iadd,ladd,fadd,dadd<br>减：isub,lsub,fsub,dsub<br>乘：imul,lmul,fmul,dmul<br>除：idiv,ldiv,fdiv,ddiv<br>余数：irem,lrem,frem,drem<br>取负：ineg,lneg,fneg,dneg<br>移位：ishl,lshr,iushr,lshl,lshr,lushr<br>按位或：ior,lor<br>按位与：iand,land<br>按位异或：ixor,lxor<br>类型转换：i2l,i2f,i2d,l2f,l2d,f2d(放宽数值转换)<br>i2b,i2c,i2s,l2i,f2i,f2l,d2i,d2l,d2f(缩窄数值转换)<br>创建类实便：new<br>创建新数组：newarray,anewarray,multianwarray<br>访问类的域和类实例域：getfield,putfield,getstatic,putstatic<br>把数据装载到操作数栈：baload,caload,saload,iaload,laload,faload,daload,aaload<br>从操作数栈存存储到数组：bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore<br>获取数组长度：arraylength<br>检相类实例或数组属性：instanceof,checkcast<br>操作数栈管理：pop,pop2,dup,dup2,dup_xl,dup2_xl,dup_x2,dup2_x2,swap<br>有条件转移：ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpene,<br>if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne,lcmp,fcmpl<br>fcmpg,dcmpl,dcmpg<br>复合条件转移：tableswitch,lookupswitch<br>无条件转移：goto,goto_w,jsr,jsr_w,ret<br>调度对象的实便方法：invokevirtual<br>调用由接口实现的方法：invokeinterface<br>调用需要特殊处理的实例方法：invokespecial<br>调用命名类中的静态方法：invokestatic<br>方法返回：ireturn,lreturn,freturn,dreturn,areturn,return<br>异常：athrow<br>finally关键字的实现使用：jsr,jsr_w,ret</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;栈和局部变量操作&lt;br&gt;将常量压入栈的指令&lt;br&gt;aconst_null 将null对象引用压入栈&lt;br&gt;iconst_m1 将int类型常量-1压入栈&lt;br&gt;iconst_0 将int类型常量0压入栈&lt;br&gt;iconst_1 将int类型常量1压入栈&lt;br&gt;iconst_
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JVM" scheme="https://zhuyiting.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Spring之事务管理</title>
    <link href="https://zhuyiting.xyz/2018/05/21/Spring%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>https://zhuyiting.xyz/2018/05/21/Spring之事务管理/</id>
    <published>2018-05-21T11:46:10.000Z</published>
    <updated>2019-11-01T03:28:55.099Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring之事务管理"><a href="#Spring之事务管理" class="headerlink" title="Spring之事务管理"></a>Spring之事务管理</h3><p>什么是事务,就是一些列的步骤, 是一个整体,要么全都完成要么全都不完成.一个步骤失败,就要把已经完成的步骤全部回滚,回到没有运行之前.<br>比如:银行取钱,你账户金额减少-&gt;银行ATM出钱, 要么两个都要完成,要么两个都不完成<br>事务有四个特性:</p><ol><li>原子性:事务是一些列步骤的组成,是一个整体,不可以分割</li><li>一致性:事务要么全部完成,要么全部不失败, 不能一部分完成一部分失败</li><li>隔离性:</li><li>持久性:一旦事务完成,结果不会受到影响,通常事务的结果会写入持久存储器</li></ol><p>Spring的事务管理, 是基于AOP面向切面编程来实现的.</p><h4 id="Spring事务管理的三个核心接口"><a href="#Spring事务管理的三个核心接口" class="headerlink" title="Spring事务管理的三个核心接口"></a>Spring事务管理的三个核心接口</h4><ol><li><strong>PlatformTransactionManager</strong><br>该接口是一个事务管理器,用于管理事务,提供了三个事务操作方法:<ul><li>TransactionStatus getTransaction（TransactionDefinition definition）：用于获取事务状态信息。</li><li>void commit（TransactionStatus status）：用于提交事务。</li><li>void rollback（TransactionStatus status）：用于回滚事务。<br>在项目中，Spring 将 xml 中配置的事务详细信息封装到对象 <code>TransactionDefinition</code> 中，然后通过事务管理器的 getTransaction() 方法获得事务的状态（<code>TransactionStatus</code>），并对事务进行下一步的操作。</li></ul></li><li><strong>TransactionDefinition</strong><br>该接口是描述事务的对象,提供了五个事务相关信息的获取方法:<ul><li>String getName()：获取事务对象名称。</li><li>int getIsolationLevel()：获取事务的隔离级别。</li><li>int getPropagationBehavior()：获取事务的传播行为。<ul><li>在事务管理过程中，传播行为可以控制是否需要创建事务以及如何创建事务。</li></ul></li><li>int getTimeout()：获取事务的超时时间。</li><li>boolean isReadOnly()：获取事务是否只读。<br>通常情况下，数据的查询不会改变原数据，所以不需要进行事务管理，而对于数据的增加、修改和删除等操作，必须进行事务管理。如果没有指定事务的传播行为，则 Spring3 默认的传播行为是 required。</li></ul></li><li>TransactionStatus<br>该接口是事务的状态,它描述事务在某一时间点上事务的状态信息.包含留个操作:<ul><li>void flush()    刷新事务</li><li>boolean hasSavepoint()    获取是否存在保存点</li><li>boolean isCompleted()    获取事务是否完成</li><li>boolean isNewTransaction()    获取是否是新事务</li><li>boolean isRollbackOnly()    获取是否回滚</li><li>void setRollbackOnly()    设置事务回滚</li></ul></li></ol><h4 id="利用XML配置文件实现事务管理"><a href="#利用XML配置文件实现事务管理" class="headerlink" title="利用XML配置文件实现事务管理"></a>利用XML配置文件实现事务管理</h4><ol><li><p>新建Dao层接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 汇款</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outUser, <span class="keyword">int</span> money)</span></span>;</span><br><span class="line">    <span class="comment">// 收款</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inUser, <span class="keyword">int</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Dao的实现类Impl</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入JdbcTemplate,使用SpringJDBC访问数据库</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 汇款的实现方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"update account set money =money-?"</span></span><br><span class="line">                + <span class="string">"where username =?"</span>, money, outUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收款的实现方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"update account set money =money+?"</span></span><br><span class="line">                + <span class="string">"where username =?"</span>, money, inUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Service以及其实现类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 转账</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao.out(outUser, money);</span><br><span class="line">        <span class="keyword">this</span>.accountDao.in(inUser, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Spring的XML文件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源，读取properties文件信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.mengma.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.mengma.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器，依赖于数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编写通知：对事务进行增强（通知），需要编写切入点和具体执行事务的细节 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给切入点方法添加事务详情，name表示方法名称，*表示任意方法名称，propagation用于设置传播行为，read-only表示隔离级别，是否只读 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aop编写，让Spring自动对目标生成代理，需要使用AspectJ的表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- AspectJ表达式,代表com.mengma.service包中所有的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.mengma.service.*.*(..))"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"txPointCut"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面：将切入点与通知整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改业务代码(模拟意外,比如断电)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accountDao.out(outUser, money);</span><br><span class="line">    <span class="comment">//模拟断电</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.accountDao.in(inUser, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得Spring容器，并操作</span></span><br><span class="line">        String xmlPath = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">        AccountService accountService = (AccountService)applicationContext.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        accountService.transfer(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="利用Annotation注释方式实现事务管理"><a href="#利用Annotation注释方式实现事务管理" class="headerlink" title="利用Annotation注释方式实现事务管理"></a>利用Annotation注释方式实现事务管理</h4><p>省去xml中的编写通知和AOP编写</p><ol><li>xml中添加注册驱动<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>还有要注意, 使用注释,需要在xml中开启注释处理器,指定扫描注释</li><li>在业务代码(目标事务)中添加注释<code>@Transcational</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao.out(outUser, money);</span><br><span class="line">        <span class="comment">// 模拟断电</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.accountDao.in(inUser, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring之事务管理&quot;&gt;&lt;a href=&quot;#Spring之事务管理&quot; class=&quot;headerlink&quot; title=&quot;Spring之事务管理&quot;&gt;&lt;/a&gt;Spring之事务管理&lt;/h3&gt;&lt;p&gt;什么是事务,就是一些列的步骤, 是一个整体,要么全都完成要么全都不完
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://zhuyiting.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之JDBC支持</title>
    <link href="https://zhuyiting.xyz/2018/05/15/Spring%E4%B9%8BJDBC%E6%94%AF%E6%8C%81/"/>
    <id>https://zhuyiting.xyz/2018/05/15/Spring之JDBC支持/</id>
    <published>2018-05-15T02:32:03.000Z</published>
    <updated>2019-11-01T02:45:34.098Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring之JDBC支持"><a href="#Spring之JDBC支持" class="headerlink" title="Spring之JDBC支持"></a>Spring之JDBC支持</h3><p>Spring框架针对数据库开发的应用提供了JDBCTemplate类,该类是Spring对JDBC支持的核心,提供了所有对数据库操作功能的支持</p><ol><li>DataSource<br>主要功能是获取数据库的连接,还可以引入数据库缓冲池和分布式事务的支持,可以作为访问数据库资源的标准接口</li><li>SQLExceptionTranslator<br>该接口负责对SQLException进行转换,通过配置,可以使JDBCTemplate在需要处理SQLException时,完成一些转译工作</li></ol><h4 id="Spring中JDBC的配置信息"><a href="#Spring中JDBC的配置信息" class="headerlink" title="Spring中JDBC的配置信息"></a>Spring中JDBC的配置信息</h4><p>在Spring配置文件中配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http:/www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.dataSource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost/spring"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库的用户名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库的密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置JDBC模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.jdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认必须使用数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注入类(Dao层)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxx"</span> <span class="attr">class</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在Dao层中注入jdbcTemplate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Dao层中注入jdbcTemplate实例, 该实例提供了大量的查询和更新数据库的方法,比如<code>query()</code>,<code>update()</code>等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring之JDBC支持&quot;&gt;&lt;a href=&quot;#Spring之JDBC支持&quot; class=&quot;headerlink&quot; title=&quot;Spring之JDBC支持&quot;&gt;&lt;/a&gt;Spring之JDBC支持&lt;/h3&gt;&lt;p&gt;Spring框架针对数据库开发的应用提供了JDBCT
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://zhuyiting.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之面向切面AOP</title>
    <link href="https://zhuyiting.xyz/2018/05/06/Spring%E4%B9%8B%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2AOP/"/>
    <id>https://zhuyiting.xyz/2018/05/06/Spring之面向切面AOP/</id>
    <published>2018-05-06T04:36:57.000Z</published>
    <updated>2019-11-01T02:33:13.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring之面向切面AOP"><a href="#Spring之面向切面AOP" class="headerlink" title="Spring之面向切面AOP"></a>Spring之面向切面AOP</h3><p>AOP 的全称是“Aspect Oriented Programming”，即面向切面编程，它将业务逻辑的各个部分进行隔离，使开发人员在编写业务逻辑时可以专心于核心业务，从而提高了开发效率。<br>其应用主要体现在事务处理、日志管理、权限控制、异常处理等方面。</p><h4 id="AOP基本概念"><a href="#AOP基本概念" class="headerlink" title="AOP基本概念"></a>AOP基本概念</h4><ol><li>Aspect(切面): 通常是一个类，里面可以定义<strong>切入点和通知</strong></li><li>JointPoint(连接点): 程序执行过程中明确的点，即调用的方法,方法名、当前传入的参数值等等都会封装在JointPoint的实例对象中,<strong>一般作为参数代入到具体的切入方法中</strong></li><li>Advice(通知): AOP在特定的切入点上执行增强处理，有before,after,afterReturning,afterThrowing,around</li><li>Pointcut(切入点): 就是带有通知的连接点，在程序中主要体现为书写<strong>切入点表达式,定义在方法上,添加要增强的一个或一组方法,该注释描述一个可重用的切入点,可以被Adivce(通知)引用</strong></li><li>Proxy(代理): AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类</li></ol><h4 id="SpringAOP应用实例"><a href="#SpringAOP应用实例" class="headerlink" title="SpringAOP应用实例"></a>SpringAOP应用实例</h4><ol><li>编写业务代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStr</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义一个切面类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintAspect</span></span>&#123;</span><br><span class="line">  <span class="comment">// 添加PrintService类中的public void printStr(String str)方法</span></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(public void PrintService.printStr(String str))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After</span>(<span class="string">"printCut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAfter</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">    String name = jp.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">"After"</span>+name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"printCut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBefore</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">    String name = jp.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">"Before"</span>+name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置代理<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-3.1.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动aop代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.outofmemory"</span> /&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包内的Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring之面向切面AOP&quot;&gt;&lt;a href=&quot;#Spring之面向切面AOP&quot; class=&quot;headerlink&quot; title=&quot;Spring之面向切面AOP&quot;&gt;&lt;/a&gt;Spring之面向切面AOP&lt;/h3&gt;&lt;p&gt;AOP 的全称是“Aspect Orient
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://zhuyiting.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之容器和依赖注入</title>
    <link href="https://zhuyiting.xyz/2018/05/01/Spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://zhuyiting.xyz/2018/05/01/Spring之容器和依赖注入/</id>
    <published>2018-05-01T07:18:44.000Z</published>
    <updated>2019-10-31T08:32:44.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring之容器和依赖注入"><a href="#Spring之容器和依赖注入" class="headerlink" title="Spring之容器和依赖注入"></a>Spring之容器和依赖注入</h3><h4 id="Bean容器"><a href="#Bean容器" class="headerlink" title="Bean容器"></a>Bean容器</h4><ul><li><p><strong>BeanFactory</strong>是基础的容器,由 org.springframework.beans.facytory.BeanFactory 接口定义, 负责创建各种Bean<br>创建BeanFactory实例时,需要提供Spring容器的详细配置文件<code>applicationContext.xml</code></p></li><li><p><strong>ApplicationContext</strong>是BeanFactory的子接口,它相比于BeanFactory,多了国际化支持等功能,而且在项目初始化过程中,ApplicationContext会自检,避免后续使用getBean方法时抛出异常<br><u>通常使用<code>ApplicationContext</code>来创建Spring容器</u></p></li></ul><p>在Web项目中,Spring容器的实例化通常是由ContextLoaderListener来实现,只需要在web.xml中对其进行配置<br>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定Spring配置文件的位置，有多个配置文件时，以逗号分隔--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring将加载src/config目录下的applicationContext.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:config/applicationContext.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定以ContextLoaderListener方式启动Spring容器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 它在启动Web容器时，自动装配ApplicationContext的配置信息。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 它实现了ServletContextListener接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。 --&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h5><ol><li>applicationContext.xml文件中<code>&lt;bean&gt;</code>标签对Bean进行配置 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserDao"</span> <span class="attr">class</span>=<span class="string">"com.spring.dao.Impl.UserDaoImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserService"</span> <span class="attr">class</span>=<span class="string">"com.spring.service.UserService"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>通过注释的方式配置Bean<br><code>@Component</code>该注释用来描述Spring中的Bean,该注释是泛化概念.<br><code>@Repository</code>用于数据访问层(Dao层)的类描述为Bean<br><code>@Service</code>用于业务层(Service层)的类描述为Bean<br><code>@Controller</code>用于描述控制层(Action层)的类为Bean<br><code>@Autowired</code>用于描述Bean的依赖实例(例如Service中的属性Dao对象),当Dao只有一个实现类时,默认按照类型来匹配,当有多个实现类存在,就需要在相应的实现类上标注其名称<br> 例如:   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"DaoImpl1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl1</span> <span class="keyword">implements</span> <span class="title">Dao</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"DaoImpl2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl2</span> <span class="keyword">implements</span> <span class="title">Dao</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Dao DaoImpl1; 自动装配的是DaoImpl1实现类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <code>@Resource</code>作用和<code>@Autowired</code>一样,区别在于它默认装配是按照名称,如果没有匹配再按照类型<br> <code>@Qualifier</code>一般配合<code>@Autowired</code>使用</li></ol><h4 id="SpringIoC依赖注入"><a href="#SpringIoC依赖注入" class="headerlink" title="SpringIoC依赖注入"></a>SpringIoC依赖注入</h4><p>Spring 容器在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，这样，调用者通过 Spring 容器获得被调用者实例，这称为依赖注入。<br>例如:在Service中注入Dao接口的实现实例</p><h5 id="依赖注入的两种方式"><a href="#依赖注入的两种方式" class="headerlink" title="依赖注入的两种方式"></a>依赖注入的两种方式</h5><ol><li>属性setter注入<br>使用setter方法注入被依赖的实例, <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserDao"</span> <span class="attr">class</span>=<span class="string">"com.spring.dao.Impl.UserDaoImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserService"</span> <span class="attr">class</span>=<span class="string">"com.spring.service.UserService"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>构造方法注入(推荐这种方法)<br>使用带参数的构造方法注入 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserDao"</span> <span class="attr">class</span>=<span class="string">"com.spring.dao.Impl.UserDaoImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserService"</span> <span class="attr">class</span>=<span class="string">"com.spring.service.UserService"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring之容器和依赖注入&quot;&gt;&lt;a href=&quot;#Spring之容器和依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Spring之容器和依赖注入&quot;&gt;&lt;/a&gt;Spring之容器和依赖注入&lt;/h3&gt;&lt;h4 id=&quot;Bean容器&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://zhuyiting.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门</title>
    <link href="https://zhuyiting.xyz/2018/04/29/Spring%E5%85%A5%E9%97%A8/"/>
    <id>https://zhuyiting.xyz/2018/04/29/Spring入门/</id>
    <published>2018-04-29T08:55:38.000Z</published>
    <updated>2019-10-31T07:20:32.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring入门"><a href="#Spring入门" class="headerlink" title="Spring入门"></a>Spring入门</h3><h4 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h4><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p><h4 id="spring架构图"><a href="#spring架构图" class="headerlink" title="spring架构图"></a>spring架构图</h4><p><img src="/2018/04/29/Spring%E5%85%A5%E9%97%A8/Spring%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="spring架构"></p><p>Spring是一个从实际项目开发经验中抽取的,可高度重用的应用框架. </p><h4 id="Spring的主要作用"><a href="#Spring的主要作用" class="headerlink" title="Spring的主要作用"></a>Spring的主要作用</h4><ol><li>springBeanFactory:<br>所有的实例可以都可以配置到spring工厂中,新建对象时通过工厂来新建,降低了耦合性. 并且可以配置对象的作用域</li><li>Spring依赖注入(控制反转):<br>相当于一个工厂管理对象之间的依赖关系<br>用户只需要在spring中配置好依赖关系(在bean中配置属性的方式配置所依赖的对象)，在调用对象的时候，就不需要再管依赖关系了(不用new那些需要依赖的对象了)。比如一个对象需要另一个对象来协助完成,这时不需要主动创建所需对象,spring容器会自动创建所需要的实例,然后注入进调用者中</li><li>SpringAOP(面向切面):<br>实现在执行过程前后执行另外的代码,进行拦截、监控等功能<br>也就是用来定义,在方法前后要完成的什么功能<br>spring的事务管理,就是基于AOP来实现的</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>方便解耦,简化开发<br>Spring就是一个工厂,可以将所有对象的创建以及依赖关系的维护都交给它</li><li>AOP编程的支持<br>Spring提供了面向切面编程,可以方便的进行权限拦截和运行监控</li><li>方便结合其他框架<br>Spring内部支持了和其他框架的整合,如mybatis</li><li>方便程序测试<br>Spring支持JUnit4,可以通过注释方便的测试</li><li>降低了调用JavaEE中一些API的难度<br>比如对JDBC等进行了封装</li><li>声明式事务的支持<br>只需要配置就可以完成对事务的管理</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring入门&quot;&gt;&lt;a href=&quot;#Spring入门&quot; class=&quot;headerlink&quot; title=&quot;Spring入门&quot;&gt;&lt;/a&gt;Spring入门&lt;/h3&gt;&lt;h4 id=&quot;spring简介&quot;&gt;&lt;a href=&quot;#spring简介&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://zhuyiting.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>idea新建maven项目</title>
    <link href="https://zhuyiting.xyz/2018/04/25/idea%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/"/>
    <id>https://zhuyiting.xyz/2018/04/25/idea新建maven项目/</id>
    <published>2018-04-25T07:50:50.000Z</published>
    <updated>2019-10-29T09:04:02.785Z</updated>
    
    <content type="html"><![CDATA[<h4 id="idea新建maven项目"><a href="#idea新建maven项目" class="headerlink" title="idea新建maven项目"></a>idea新建maven项目</h4><ol><li><p>选择maven仓库目录<br>File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven<br>Maven home directory:maven解压目录<br>User settings file:配置settings.xml文件位置<br>Local repository:本地仓库路径</p></li><li><p>新建maven项目<br>新建project,选择maven,next</p></li></ol><p>填写信息<br>  GroupId:包名<br>  ArtifactId:项目名</p><p>选择next,finish</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;idea新建maven项目&quot;&gt;&lt;a href=&quot;#idea新建maven项目&quot; class=&quot;headerlink&quot; title=&quot;idea新建maven项目&quot;&gt;&lt;/a&gt;idea新建maven项目&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择maven仓库目录&lt;br&gt;Fi
      
    
    </summary>
    
    
      <category term="工具" scheme="https://zhuyiting.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDE" scheme="https://zhuyiting.xyz/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之XML映射文件</title>
    <link href="https://zhuyiting.xyz/2018/04/22/Mybatis%E4%B9%8BXML%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/"/>
    <id>https://zhuyiting.xyz/2018/04/22/Mybatis之XML映射文件/</id>
    <published>2018-04-22T09:04:03.000Z</published>
    <updated>2019-10-31T07:24:32.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis之XML映射文件"><a href="#Mybatis之XML映射文件" class="headerlink" title="Mybatis之XML映射文件"></a>Mybatis之XML映射文件</h3><p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li>cache – 对给定命名空间的缓存配置。</li><li>cache-ref – 对其他命名空间缓存配置的引用。</li><li>resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</li><li>sql – 可被其他语句引用的可重用语句块。</li><li>insert – 映射插入语句</li><li>update – 映射更新语句</li><li>delete – 映射删除语句</li><li>select – 映射查询语句</li></ul><h4 id="sql-–-可被其他语句引用的可重用语句块。"><a href="#sql-–-可被其他语句引用的可重用语句块。" class="headerlink" title="sql – 可被其他语句引用的可重用语句块。"></a>sql – 可被其他语句引用的可重用语句块。</h4><p>这个元素可以被用来定义可重用的 SQL 代码段，这些 SQL 代码可以被包含在其他语句中。它可以（在加载的时候）被静态地设置参数。 在不同的包含语句中可以设置不同的值到参数占位符上。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CRUD语句"><a href="#CRUD语句" class="headerlink" title="CRUD语句"></a>CRUD语句</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCustomerById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.po.Customer"</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_customer WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"com.itheima.po.Customer"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        INSERT INTO t_customer(username,jobs,phone) VALUES (#&#123;username&#125;, #&#123;jobs&#125;, #&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update和delete和insert实现非常接近 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="insert和update的子标签selectKey"><a href="#insert和update的子标签selectKey" class="headerlink" title="insert和update的子标签selectKey"></a>insert和update的子标签selectKey</h4><p>提供给你一个与数据库中自动生成主键类似的行为，同时保持了 Java 代码的简洁。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"com.itheima.po.Customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">        select if(max(id) is null, 1, max(id)+1) as new newId from t_customer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO t_customer(id,username,jobs,phone) VALUES (#&#123;id&#125;,#&#123;username&#125;, #&#123;jobs&#125;, #&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h4><p>resultMap 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 resultMap 能够代替实现同等功能的长达数千行的代码。ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通键值对存储 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 没有显式指定 resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select id, username, hashedPassword</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  将规范的JavaBean 映射到 ResultSet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.someapp.model.User"</span>&gt;</span></span><br><span class="line">  select id, username, hashedPassword</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果列名和属性名没有精确匹配(不规范的JavaBean)，可以在 SELECT 语句中对列使用别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.someapp.model.User"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    user_id             as "id",</span><br><span class="line">    user_name           as "userName",</span><br><span class="line">    hashed_password     as "hashedPassword"</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h4><p>我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们不总都是这样。<br>比如，我们如何映射下面这个语句？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非常复杂的语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogDetails"</span> <span class="attr">resultMap</span>=<span class="string">"detailedBlogResultMap"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">       B.id as blog_id,</span><br><span class="line">       B.title as blog_title,</span><br><span class="line">       B.author_id as blog_author_id,</span><br><span class="line">       A.id as author_id,</span><br><span class="line">       A.username as author_username,</span><br><span class="line">       A.password as author_password,</span><br><span class="line">       A.email as author_email,</span><br><span class="line">       A.bio as author_bio,</span><br><span class="line">       A.favourite_section as author_favourite_section,</span><br><span class="line">       P.id as post_id,</span><br><span class="line">       P.blog_id as post_blog_id,</span><br><span class="line">       P.author_id as post_author_id,</span><br><span class="line">       P.created_on as post_created_on,</span><br><span class="line">       P.section as post_section,</span><br><span class="line">       P.subject as post_subject,</span><br><span class="line">       P.draft as draft,</span><br><span class="line">       P.body as post_body,</span><br><span class="line">       C.id as comment_id,</span><br><span class="line">       C.post_id as comment_post_id,</span><br><span class="line">       C.name as comment_name,</span><br><span class="line">       C.comment as comment_text,</span><br><span class="line">       T.id as tag_id,</span><br><span class="line">       T.name as tag_name</span><br><span class="line">  from Blog B</span><br><span class="line">       left outer join Author A on B.author_id = A.id</span><br><span class="line">       left outer join Post P on B.id = P.blog_id</span><br><span class="line">       left outer join Comment C on P.id = C.post_id</span><br><span class="line">       left outer join Post_Tag PT on PT.post_id = P.id</span><br><span class="line">       left outer join Tag T on PT.tag_id = T.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非常复杂的结果映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"detailedBlogResultMap"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> <span class="attr">javaType</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"favouriteSection"</span> <span class="attr">column</span>=<span class="string">"author_favourite_section"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"posts"</span> <span class="attr">ofType</span>=<span class="string">"Post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"post_subject"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"comments"</span> <span class="attr">ofType</span>=<span class="string">"Comment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"comment_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"tags"</span> <span class="attr">ofType</span>=<span class="string">"Tag"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tag_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"draft"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"DraftPost"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：<br><code>&lt;cache/&gt;</code></p><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><p>如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p><ol><li><p><strong>if</strong><br>动态 SQL 通常要做的事情是根据条件包含 where 子句的一部分。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogWithTitleLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这条语句提供了一种可选的查找文本功能。如果没有传入“title”，那么所有处于“ACTIVE”状态的BLOG都会返回；反之若传入了“title”，那么就会对“title”一列进行模糊查找并返回 BLOG 结果 </p></li><li><p><strong>choose, when, otherwise</strong><br>有时我们不想应用到所有的条件语句，而只想从中择其一项。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>where</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 应对使用if时出现的语句错误 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- where 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>foreach</strong><br>动态 SQL 的另外一个常用的操作需求是对一个集合进行遍历，通常是在构建 IN 条件语句的时候。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mybatis之XML映射文件&quot;&gt;&lt;a href=&quot;#Mybatis之XML映射文件&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之XML映射文件&quot;&gt;&lt;/a&gt;Mybatis之XML映射文件&lt;/h3&gt;&lt;p&gt;MyBatis 的真正强大在于它的映
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis" scheme="https://zhuyiting.xyz/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之XML配置文件</title>
    <link href="https://zhuyiting.xyz/2018/04/22/Mybatis%E4%B9%8BXML%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zhuyiting.xyz/2018/04/22/Mybatis之XML配置文件/</id>
    <published>2018-04-22T07:38:49.000Z</published>
    <updated>2019-10-29T07:04:26.477Z</updated>
    
    <content type="html"><![CDATA[<h4 id="XML配置文件"><a href="#XML配置文件" class="headerlink" title="XML配置文件"></a>XML配置文件</h4><p><code>mybatis-config.xml</code>配置文件包含了会影响MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><ul><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><h4 id="properties（属性）"><a href="#properties（属性）" class="headerlink" title="properties（属性）"></a>properties（属性）</h4><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//resource属性,映入java属性文件`config.properties`,也可以用url属性来指定路径</span></span><br><span class="line">&lt;properties resource=<span class="string">"org/mybatis/example/config.properties"</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">"username"</span> value=<span class="string">"dev_user"</span>/&gt;</span><br><span class="line">  &lt;property name=<span class="string">"password"</span> value=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>其中的属性就可以在整个配置文件中被用来替换需要动态配置,引用语法为<code>${property.name}</code><br>也可以在java属性文件<code>config.properties</code>中来配置</p><p>如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：</p><ol><li>在 properties 元素体内指定的属性首先被读取。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。</li></ol><p>因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。</p><h4 id="settings（设置）"><a href="#settings（设置）" class="headerlink" title="settings（设置）"></a>settings（设置）</h4><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 是否允许单一语句返回多结果集（需要驱动支持）。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。</span></span><br><span class="line"><span class="comment">  NONE: 不做任何反应</span></span><br><span class="line"><span class="comment">  WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)</span></span><br><span class="line"><span class="comment">  FAILING: 映射失败 (抛出 SqlSessionException) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定哪个对象的方法触发一次延迟加载。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="typeAliases（类型别名）"><a href="#typeAliases（类型别名）" class="headerlink" title="typeAliases（类型别名）"></a>typeAliases（类型别名）</h4><p>类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Author"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Author"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Blog"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Blog"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Comment"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Comment"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Post"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Post"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Section"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Section"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Tag"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Tag"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，<br>比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"domain.blog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="typeHandlers（类型处理器）"><a href="#typeHandlers（类型处理器）" class="headerlink" title="typeHandlers（类型处理器）"></a>typeHandlers（类型处理器）</h4><h4 id="objectFactory（对象工厂）"><a href="#objectFactory（对象工厂）" class="headerlink" title="objectFactory（对象工厂）"></a>objectFactory（对象工厂）</h4><h4 id="plugins（插件）"><a href="#plugins（插件）" class="headerlink" title="plugins（插件）"></a>plugins（插件）</h4><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。</p><p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"org.mybatis.example.ExamplePlugin"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someProperty"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="environments（环境配置）"><a href="#environments（环境配置）" class="headerlink" title="environments（环境配置）"></a>environments（环境配置）</h4><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中 使用相同的 SQL 映射。有许多类似的使用场景。<br><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong><br>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。</p><p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure><p>环境元素定义了如何配置环境。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">value</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**注意这里的关键点:</p><ol><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。**</li></ol><h4 id="databaseIdProvider（数据库厂商标识）"><a href="#databaseIdProvider（数据库厂商标识）" class="headerlink" title="databaseIdProvider（数据库厂商标识）"></a>databaseIdProvider（数据库厂商标识）</h4><h4 id="mappers（映射器）"><a href="#mappers（映射器）" class="headerlink" title="mappers（映射器）"></a>mappers（映射器）</h4><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要定义 SQL 映射语句了。 但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。 Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:/// 的 URL），或类名和包名等。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;XML配置文件&quot;&gt;&lt;a href=&quot;#XML配置文件&quot; class=&quot;headerlink&quot; title=&quot;XML配置文件&quot;&gt;&lt;/a&gt;XML配置文件&lt;/h4&gt;&lt;p&gt;&lt;code&gt;mybatis-config.xml&lt;/code&gt;配置文件包含了会影响MyBatis 行
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis" scheme="https://zhuyiting.xyz/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门</title>
    <link href="https://zhuyiting.xyz/2018/04/21/Mybatis%E5%85%A5%E9%97%A8/"/>
    <id>https://zhuyiting.xyz/2018/04/21/Mybatis入门/</id>
    <published>2018-04-21T03:20:38.000Z</published>
    <updated>2019-10-29T08:57:43.729Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h4><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h4 id="Mybatis的优点"><a href="#Mybatis的优点" class="headerlink" title="Mybatis的优点:"></a>Mybatis的优点:</h4><ol><li>简单小巧易于上手，方便浏览修改 SQL 语句</li><li>解除 SQL 与程序代码的耦合</li><li>提供映射标签，支持对象与数据库的 ORM 字段关系映射</li><li>提供 xml 标签，支持编写动态 SQL</li><li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4>在maven项目中,导入以下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置SqlSessionFactory"><a href="#配置SqlSessionFactory" class="headerlink" title="配置SqlSessionFactory"></a>配置SqlSessionFactory</h4>每个基于 MyBatis 的应用都是以一个 <code>SqlSessionFactory</code> <code>的实例为核心的。SqlSessionFactory</code> 的实例可以通过 <code>SqlSessionFactoryBuilder</code> 获得。而 <code>SqlSessionFactoryBuilder</code> 则可以从 XML 配置文件或一个预先定制的 <code>Configuration</code> 的实例构建出 <code>SqlSessionFactory</code> 的实例。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mybatis-config.xml资源文件</span></span><br><span class="line">String resource = <span class="string">"org/mybatis/example/mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>mybatis-config.xml文件包含了对 MyBatis 系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）<br>简单实例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>要注意 XML 头部的声明，它用来验证 XML 文档正确性。environment 元素体中包含了事务管理和连接池的配置。mappers 元素则是包含一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。</li></ol><h4 id="从-SqlSessionFactory-中获取-SqlSession"><a href="#从-SqlSessionFactory-中获取-SqlSession" class="headerlink" title="从 SqlSessionFactory 中获取 SqlSession"></a>从 SqlSessionFactory 中获取 SqlSession</h4><p>既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里到底是怎么执行的?<br>先看看上述mybatis-config.xml文件中包含的映射(mapper)文件:<code>BlogMapper.xml</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.mybatis.example.BlogMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在命名空间 “org.mybatis.example.BlogMapper” 中定义了一个名为 “selectBlog” 的映射语句，允许你使用指定的完全限定名 “org.mybatis.example.BlogMapper.selectBlog” 来调用映射语句.这和使用完全限定名调用 Java 对象的方法类似。这样，该命名就可以直接映射到在命名空间中同名的 Mapper 类，并将已映射的 select 语句中的名字、参数和返回类型匹配成方法。 因此你就可以像上面那样很容易地调用这个对应 Mapper 接口的方法，就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br></pre></td></tr></table></figure><h4 id="用注释来映射"><a href="#用注释来映射" class="headerlink" title="用注释来映射"></a>用注释来映射</h4><p>对于像 BlogMapper 这样的映射器类来说，还有另一种方法来处理映射。 它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。比如，上面的 XML 示例可被替换如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">"SELECT * FROM blog WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解来映射简单语句会使代码显得更加简洁，然而对于稍微复杂一点的语句，Java 注解就力不从心了，并且会显得更加混乱。 因此，<strong>如果你需要完成很复杂的事情，那么最好使用 XML 来映射语句。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是MyBatis&quot;&gt;&lt;a href=&quot;#什么是MyBatis&quot; class=&quot;headerlink&quot; title=&quot;什么是MyBatis&quot;&gt;&lt;/a&gt;什么是MyBatis&lt;/h4&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Web框架" scheme="https://zhuyiting.xyz/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis" scheme="https://zhuyiting.xyz/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java程序运行堆栈分析</title>
    <link href="https://zhuyiting.xyz/2018/04/17/Java%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%A0%86%E6%A0%88%E5%88%86%E6%9E%90/"/>
    <id>https://zhuyiting.xyz/2018/04/17/Java程序运行堆栈分析/</id>
    <published>2018-04-17T03:05:34.000Z</published>
    <updated>2019-10-29T03:14:26.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java程序运行堆栈分析"><a href="#Java程序运行堆栈分析" class="headerlink" title="Java程序运行堆栈分析"></a>Java程序运行堆栈分析</h3><p>class文件包含JAVA程序执行的字节码,数据严格按照格式紧凑排列在class文件中的二进制流中间<br><strong>.java-&gt;编译-&gt;.class-&gt;JVM运行时数据区</strong></p><ol><li><strong>寄存器</strong>:最快的存储区,由编译器更具需求进行分配,我们在程序中无法控制</li><li><strong>栈</strong>:存放函数中定义的基本类型的变量数据和对象的引用(指向堆中对应对象的地址,把对象的地址赋值给栈),但对象本身不存放在栈中,而是存放在堆(new 出来的对象)或者常量池中(字符串常量对象存放在常量池中.).栈内存特点，数数据一执行完毕，变量会立即释放，节约内存空间。栈内存中的数据，没有默认初始化值，需要手动设置。</li><li><strong>堆</strong>:存放所有new出来的对象.用完之后靠垃圾回收机制不定期自动消除(当栈中没有指向当前对象时,被视为垃圾,JVM启动垃圾回收机制).堆内存中所有的实体都有内存地址值。堆内存中的实体是用来封装数据的，这些数据都有默认初始化值。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Car c=<span class="keyword">new</span> Car;</span><br><span class="line">c.num=<span class="number">5</span>;</span><br><span class="line">Car c1=c;</span><br><span class="line">c1.color=<span class="string">"green"</span>;</span><br><span class="line">c.run();</span><br><span class="line">Car c1=c;</span><br></pre></td></tr></table></figure> 这句话相当于将对象复制一份出来，两个对象的内存地址值一样。所以指向同一个实体，对c1的属性修改，相当于c的属性也改了。</li><li><strong>静态域</strong>:存放静态成员(static定义的)</li><li><strong>常量池</strong>:存放字符串常量和基本类型常量(public static final).编译期已经创建好(直接用双引号定义的)的就存储在常量池中 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"china"</span>;  </span><br><span class="line">String s2 = <span class="string">"china"</span>;  </span><br><span class="line">String s3 = <span class="string">"china"</span>;  </span><br><span class="line">String ss1 = <span class="keyword">new</span> String(<span class="string">"china"</span>);  </span><br><span class="line">String ss2 = <span class="keyword">new</span> String(<span class="string">"china"</span>);  </span><br><span class="line">String ss3 = <span class="keyword">new</span> String(<span class="string">"china"</span>);</span><br></pre></td></tr></table></figure> s1 s2 s3 指向常量池中的同一个对象ss1 ss2 ss3 指向堆中的三个不同对象但是 ss1 ss2 ss3 创建对象前会先去常量池中查找是否存在”china” 如果不存在 则需要在常量池中先创建一个对象,然后再在队中创建常量池中该对象的拷贝对象.  这也就是有道面试题：String s = new String(“xyz”);产生几个对象？一个或两个，如果常量池中原来没有”xyz”,就是两个。</li><li><strong>非RAM存储</strong>:硬盘等永久存储空间 </li></ol><p><u>Java线程内存模型跟cpu缓存模型类似，是基于cpu缓存模型来建立的</u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java程序运行堆栈分析&quot;&gt;&lt;a href=&quot;#Java程序运行堆栈分析&quot; class=&quot;headerlink&quot; title=&quot;Java程序运行堆栈分析&quot;&gt;&lt;/a&gt;Java程序运行堆栈分析&lt;/h3&gt;&lt;p&gt;class文件包含JAVA程序执行的字节码,数据严格按照格式
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaSE" scheme="https://zhuyiting.xyz/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Java中equals的注意事项</title>
    <link href="https://zhuyiting.xyz/2018/04/13/Java%E4%B8%ADequals%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://zhuyiting.xyz/2018/04/13/Java中equals的注意事项/</id>
    <published>2018-04-13T02:25:33.000Z</published>
    <updated>2019-10-29T03:13:36.576Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中equals的注意事项"><a href="#Java中equals的注意事项" class="headerlink" title="Java中equals的注意事项"></a>Java中equals的注意事项</h4><p>对象的equals方法容易抛出空指针的异常,应尽量使用常量或者有确定值的对象来调用equals方法<br>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">"English"</span>)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样容易报空指针,应该采用以下写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"English"</span>.equals(str);</span><br></pre></td></tr></table></figure><p>在jdk7中,有一个新的工具类<code>java.util.Objects</code> 更加推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Objects.equals(str,<span class="string">"English"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java中equals的注意事项&quot;&gt;&lt;a href=&quot;#Java中equals的注意事项&quot; class=&quot;headerlink&quot; title=&quot;Java中equals的注意事项&quot;&gt;&lt;/a&gt;Java中equals的注意事项&lt;/h4&gt;&lt;p&gt;对象的equals方法容易抛
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaSE" scheme="https://zhuyiting.xyz/tags/JavaSE/"/>
    
  </entry>
  
</feed>
