<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycjBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yimchengjie.github.io/"/>
  <updated>2020-02-15T17:18:15.277Z</updated>
  <id>https://yimchengjie.github.io/</id>
  
  <author>
    <name>yanchengjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间复杂度和空间复杂度</title>
    <link href="https://yimchengjie.github.io/2020/01/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://yimchengjie.github.io/2020/01/24/算法与数据结构/时间复杂度和空间复杂度/</id>
    <published>2020-01-24T08:44:37.000Z</published>
    <updated>2020-02-15T17:18:15.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h2><p>算法的时间复杂度和空间复杂度是用来描述算法优劣的两个指标</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的时间复杂度反应了算法执行时间随输入规模增长而增长的量级,通常的时间复杂度指的是最坏时间复杂度</p><h4 id="时间复杂度预估步骤"><a href="#时间复杂度预估步骤" class="headerlink" title="时间复杂度预估步骤"></a>时间复杂度预估步骤</h4><ol><li>找出基准语句,即算法中执行次数最多的那条语句</li><li>计算基本语句的执行次数的数量级</li><li>用O()表示算法的时间性能,括号内为基准语句执行次数的数量级</li></ol><h4 id="预估时间复杂度的具体实例"><a href="#预估时间复杂度的具体实例" class="headerlink" title="预估时间复杂度的具体实例"></a>预估时间复杂度的具体实例</h4><p>注: 只计算时间复杂度</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度 O(1)</span></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"n &gt; 10"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">5</span>) &#123; <span class="comment">// 2</span></span><br><span class="line">    System.out.println(<span class="string">"n &gt; 5"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"n &lt;= 5"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环内语句最大执行次数: 15*n</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环内语句最大执行次数: n^2</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="comment">// java中整形数值相除当x&lt;y时x/y=0</span></span><br><span class="line"><span class="keyword">while</span> ((n = n / <span class="number">2</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n除几次2=1  -&gt;  log2(n)</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="keyword">while</span> ((n = n / <span class="number">5</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n除几次5=1  -&gt;  log5(n)</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i = i * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 外层循环执行次数: log2(n)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 单独内层循环语句执行次数为: n</span></span><br><span class="line">        <span class="comment">// 基准语句最大执行次数为: n*log2(n)</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>算法的空间复杂度是算法在运行时间内临时占用的内存空间的大小,但一般的程序只要满足占用空间小于可用空间即可. 所以尝尝牺牲空间复杂度来满足时间复杂度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间复杂度和空间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度和空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度和空间复杂度&quot;&gt;&lt;/a&gt;时间复杂度和空间复杂度&lt;/h2&gt;&lt;p&gt;算法的时间复杂度和空间复杂度是用来描述算法优劣的两个指标&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://yimchengjie.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="时间复杂度" scheme="https://yimchengjie.github.io/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
      <category term="空间复杂度" scheme="https://yimchengjie.github.io/tags/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup技术入门</title>
    <link href="https://yimchengjie.github.io/2020/01/23/%E7%88%AC%E8%99%AB/Jsoup%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/23/爬虫/Jsoup技术入门/</id>
    <published>2020-01-23T14:11:13.000Z</published>
    <updated>2020-02-18T16:25:55.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup技术入门"><a href="#Jsoup技术入门" class="headerlink" title="Jsoup技术入门"></a>Jsoup技术入门</h2><p>在使用Jsoup之前,解析响应通常使用字符串和正则表达式来获取目标数据, 但是正则表达式还是相对麻烦.</p><p>Jsoup是一款Java的HTML解析器,可以直接解析某个URL地址,HTML内容. Jsoup提供了丰富的API,可以向前端一样通过DOM等操作方法获取目标数据</p><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>虽然Jsoup也可以直接通过URL抓取内容, 但不用来做爬虫,因为开发中往往需要使用多线程,连接池等技术, Jsoup的支持并不好, 所以Jsoup通常依赖解析数据</p><h4 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUrl</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Jsoup解析URL地址</span></span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com"</span>),<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 使用标签选择器获取标题</span></span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析String"><a href="#解析String" class="headerlink" title="解析String"></a>解析String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html=SpiderFirst.getSpider(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析File"><a href="#解析File" class="headerlink" title="解析File"></a>解析File</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\yanchengjie\\Desktop\\baidu.html"</span>),<span class="string">"utf8"</span>);</span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDOM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html = SpiderFirst.getSpider(<span class="string">"http://www.itcast.cn/"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    Element element = document.getElementById(<span class="string">"webim"</span>);</span><br><span class="line">    System.out.println(element.toString());</span><br><span class="line">    <span class="comment">// 获取id值</span></span><br><span class="line">    String id = element.id();</span><br><span class="line">    String id_ = element.attr(<span class="string">"id"</span>);</span><br><span class="line">    System.out.println(id + <span class="string">" "</span> + id_);</span><br><span class="line">    <span class="comment">// 获取className</span></span><br><span class="line">    String className = element.child(<span class="number">0</span>).className();</span><br><span class="line">    String className_ = element.child(<span class="number">0</span>).attr(<span class="string">"class"</span>);</span><br><span class="line">    System.out.println(className+<span class="string">" "</span>+className_);</span><br><span class="line">    <span class="comment">// 获取所有元素</span></span><br><span class="line">    Attributes attrs = element.child(<span class="number">0</span>).child(<span class="number">0</span>).child(<span class="number">0</span>).attributes();</span><br><span class="line">    System.out.println(attrs.toString());</span><br><span class="line">    <span class="comment">// 获取文本内容</span></span><br><span class="line">    String text = element.child(<span class="number">0</span>).child(<span class="number">0</span>).child(<span class="number">0</span>).text();</span><br><span class="line">    System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择器操作"><a href="#选择器操作" class="headerlink" title="选择器操作"></a>选择器操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html = SpiderFirst.getSpider(<span class="string">"http://www.itcast.cn/"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    <span class="comment">// 使用标签选择器</span></span><br><span class="line">    Elements elements = document.select(<span class="string">"span"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element: elements)&#123;</span><br><span class="line">        System.out.println(element.text());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用id选择器</span></span><br><span class="line">    Element element = document.select(<span class="string">"#webim"</span>).first();</span><br><span class="line">    System.out.println(element.toString());</span><br><span class="line">    <span class="comment">// 使用类选择器</span></span><br><span class="line">    Elements elements1 = document.select(<span class="string">".a_default"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element1: elements1)&#123;</span><br><span class="line">        System.out.println(element1.text());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 元素选择器</span></span><br><span class="line">    Elements elements2 = document.select(<span class="string">"[class=slogan]"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element2: elements2)&#123;</span><br><span class="line">        System.out.println(element2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组合选择器</span></span><br><span class="line">    Elements elements3 = document.select(<span class="string">"img.slogan"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element3: elements3)&#123;</span><br><span class="line">        System.out.println(element3.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Elements elements4 = document.select(<span class="string">".box_hd &gt; h2"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element4: elements4)&#123;</span><br><span class="line">        System.out.println(element4.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup技术入门&quot;&gt;&lt;a href=&quot;#Jsoup技术入门&quot; class=&quot;headerlink&quot; title=&quot;Jsoup技术入门&quot;&gt;&lt;/a&gt;Jsoup技术入门&lt;/h2&gt;&lt;p&gt;在使用Jsoup之前,解析响应通常使用字符串和正则表达式来获取目标数据, 但是正则表
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="Jsoup" scheme="https://yimchengjie.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>HttpClient技术入门</title>
    <link href="https://yimchengjie.github.io/2020/01/19/%E7%88%AC%E8%99%AB/HttpClient%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/19/爬虫/HttpClient技术入门/</id>
    <published>2020-01-19T12:05:53.000Z</published>
    <updated>2020-02-18T14:12:03.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HttpClient技术入门"><a href="#HttpClient技术入门" class="headerlink" title="HttpClient技术入门"></a>HttpClient技术入门</h2><p>网络爬虫通常都是使用Http协议访问互联网,所以HttpClient这个同样是Http协议的客户端技术就被运用到了爬虫技术中<br>只需要在maven引入HttpClient就可以使用</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建HttpClient对象(Default默认设置的)</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">// 2.创建请求对象,需要Url参数</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    <span class="comment">// 3.发起请求,接收响应</span></span><br><span class="line">    CloseableHttpResponse httpResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpResponse = httpClient.execute(httpGet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.解析请求,获取数据</span></span><br><span class="line">    <span class="comment">// 4.1 判断状态码</span></span><br><span class="line">    <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">// 4.2 获取主体数据</span></span><br><span class="line">        HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4.3 数据转码</span></span><br><span class="line">            String context = EntityUtils.toString(httpEntity,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(context);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-构建HTTP请求"><a href="#1-构建HTTP请求" class="headerlink" title="1. 构建HTTP请求"></a>1. 构建HTTP请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">URI uri = <span class="keyword">new</span> URIBuilder().setScheme(<span class="string">"http"</span>)</span><br><span class="line">                          .setHost(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">                          .setPath(<span class="string">"/s"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"ie"</span>,<span class="string">"utf-8"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"f"</span>,<span class="string">"8"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"rsv_bp"</span>,<span class="string">"1"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"tn"</span>,<span class="string">"80035161_2_dg"</span>)</span><br><span class="line">                          .build();</span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(uri);</span><br></pre></td></tr></table></figure><h4 id="2-添加消息头"><a href="#2-添加消息头" class="headerlink" title="2. 添加消息头"></a>2. 添加消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpResponse response = <span class="keyword">new</span> BasicHttpResponse(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,<span class="string">"OK"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>,<span class="string">"c1=a; path=/; domain=localhost"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>,<span class="string">"c2=b; path=\"/\", c3=c; domain=\"localhost\""</span>);</span><br><span class="line">Header h1 = response.getFirstHeader(<span class="string">"Set-Cookie"</span>);</span><br><span class="line">Header h2 = response.getLastHeader(<span class="string">"Set-Cookie"</span>);</span><br><span class="line">Header[] hs = response.getHeaders(<span class="string">"Set-Cookie"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-生成HTTP实体"><a href="#3-生成HTTP实体" class="headerlink" title="3. 生成HTTP实体"></a>3. 生成HTTP实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. String类型的实体</span></span><br><span class="line">StringEntity myEntity = <span class="keyword">new</span> StringEntity(<span class="string">"important message"</span>,ContentType.create(<span class="string">"text/plain"</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. File类型实体</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"onefile.txt"</span>);</span><br><span class="line">FileEntity entity = <span class="keyword">new</span> FileEntity(file,contentType.create(<span class="string">"text/plain"</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 表单实体</span></span><br><span class="line">List&lt;NameValuePair&gt; formparam = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">formparam.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param1"</span>,<span class="string">"value1"</span>));</span><br><span class="line">formparam.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param2"</span>,<span class="string">"value2"</span>));</span><br><span class="line">UrlEncodeFormEntity entity = <span class="keyword">new</span> UrlEncodedFormEntity(formparam,Consts.UTF_8);</span><br></pre></td></tr></table></figure><h4 id="4-配置请求信息"><a href="#4-配置请求信息" class="headerlink" title="4. 配置请求信息"></a>4. 配置请求信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置请求信息</span></span><br><span class="line">RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">        .setConnectTimeout(<span class="number">1000</span>)   <span class="comment">// 创建连接的最长时间</span></span><br><span class="line">        .setConnectionRequestTimeout(<span class="number">500</span>)    <span class="comment">// 设置获取连接的最长时间</span></span><br><span class="line">        .setSocketTimeout(<span class="number">10</span>*<span class="number">1000</span>)    <span class="comment">// 设置数据传输的最长时间</span></span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 添加配置对象</span></span><br><span class="line">httpGet.setConfig(requestConfig);</span><br></pre></td></tr></table></figure><h3 id="连接池的应用"><a href="#连接池的应用" class="headerlink" title="连接池的应用"></a>连接池的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建连接池管理器</span></span><br><span class="line">    PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line">    <span class="comment">// 2. 使用连接池管理器发起请求</span></span><br><span class="line">    doGet(poolingHttpClientConnectionManager,<span class="string">"https://www.baidu.com/s"</span>,<span class="string">"wt"</span>,<span class="string">"httpclient"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(PoolingHttpClientConnectionManager poolingHttpClientConnectionManager,String url,String...param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从连接池中获取HttpClient</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(poolingHttpClientConnectionManager).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1 创建URI对象(带参的URL)</span></span><br><span class="line">    URIBuilder uriBuilder;</span><br><span class="line">    HttpGet httpGet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        uriBuilder = <span class="keyword">new</span> URIBuilder(url);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;(i+<span class="number">1</span>)&lt;param.length;i+=<span class="number">2</span>)</span><br><span class="line">            uriBuilder.setParameter(param[i],param[i+<span class="number">1</span>]);</span><br><span class="line">        httpGet = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.发起请求,接收响应</span></span><br><span class="line">    CloseableHttpResponse httpResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpResponse = httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 4.解析请求,获取数据</span></span><br><span class="line">        <span class="comment">// 4.1 判断状态码</span></span><br><span class="line">        <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// 4.2 获取主体数据</span></span><br><span class="line">            HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">            <span class="comment">// 4.3 数据转码</span></span><br><span class="line">            String context = EntityUtils.toString(httpEntity,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(context);</span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpResponse.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 交给连接池管理, 不用关闭</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            httpClient.close();</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HttpClient技术入门&quot;&gt;&lt;a href=&quot;#HttpClient技术入门&quot; class=&quot;headerlink&quot; title=&quot;HttpClient技术入门&quot;&gt;&lt;/a&gt;HttpClient技术入门&lt;/h2&gt;&lt;p&gt;网络爬虫通常都是使用Http协议访问互联网,
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="HttpClient" scheme="https://yimchengjie.github.io/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>初探Java爬虫</title>
    <link href="https://yimchengjie.github.io/2020/01/17/%E7%88%AC%E8%99%AB/%E5%88%9D%E6%8E%A2Java%E7%88%AC%E8%99%AB/"/>
    <id>https://yimchengjie.github.io/2020/01/17/爬虫/初探Java爬虫/</id>
    <published>2020-01-17T13:09:53.000Z</published>
    <updated>2020-02-17T15:58:27.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初探Java爬虫"><a href="#初探Java爬虫" class="headerlink" title="初探Java爬虫"></a>初探Java爬虫</h2><p>既然学的是Java,那就用Java来学爬虫.</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">spiderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 爬取的目标url</span></span><br><span class="line">        String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        <span class="comment">// 空字符串,用于后续接收内容</span></span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 将字符串url转换成URL类型</span></span><br><span class="line">            URL readUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            <span class="comment">// 进行链接初始化</span></span><br><span class="line">            URLConnection connection = readUrl.openConnection();</span><br><span class="line">            <span class="comment">// 开始连接</span></span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// 创建一个输入流来读取响应内容</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">            <span class="comment">// 创建读取临时变量(读取缓存)</span></span><br><span class="line">            String tempStr = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> ((tempStr = in.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                result.append(tempStr);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"爬取结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果<br><img src="/2020/01/17/%E7%88%AC%E8%99%AB/%E5%88%9D%E6%8E%A2Java%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E7%BB%93%E6%9D%9F.png" alt="爬取结束"></p><p>可以看到, 上述程序连接到URL,然后读取了响应, 也就是baidu首页的源码</p><p>那么如何获取更细的内容呢.</p><h3 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpiderDemo spiderDemo = <span class="keyword">new</span> SpiderDemo();</span><br><span class="line">       <span class="comment">// 爬取的目标url</span></span><br><span class="line">       String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">       <span class="comment">// 将爬取功能封装</span></span><br><span class="line">       String result = spiderDemo.spiderMan(url);</span><br><span class="line">       <span class="comment">// 定义样式模板,匹配&lt;img&gt;标签</span></span><br><span class="line">       String patternStr = <span class="string">"&lt;img.*src\\s*=\\s*(.*?)[^&gt;]*?&gt;"</span>;</span><br><span class="line">       <span class="comment">// 要匹配的目标字符串</span></span><br><span class="line">       String targetStr = result;</span><br><span class="line">       <span class="comment">// 将样式模板字符串转型</span></span><br><span class="line">       Pattern pattern = Pattern.compile(patternStr);</span><br><span class="line">       <span class="comment">// 定义匹配对象进行匹配</span></span><br><span class="line">       Matcher matcher = pattern.matcher(targetStr);</span><br><span class="line">       <span class="comment">// 如果匹配成功</span></span><br><span class="line">       <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">           System.out.println(<span class="string">"匹配成功"</span>);</span><br><span class="line">           System.out.println(matcher.group());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>正则表达式是爬虫获取精确内容的重要基础</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初探Java爬虫&quot;&gt;&lt;a href=&quot;#初探Java爬虫&quot; class=&quot;headerlink&quot; title=&quot;初探Java爬虫&quot;&gt;&lt;/a&gt;初探Java爬虫&lt;/h2&gt;&lt;p&gt;既然学的是Java,那就用Java来学爬虫.&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="https://yimchengjie.github.io/2019/12/21/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/12/21/爬虫/爬虫入门/</id>
    <published>2019-12-20T16:12:45.000Z</published>
    <updated>2020-02-15T17:18:33.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h2><h3 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h3><p>爬虫即网络爬虫,其作用是自动爬取互联网数据的程序.<br>数据是互联网的石油,没有数据时,爬虫就能发挥重要作用.<br>搜索引擎也可以看成是一个爬虫,它网络了互联网上的内容.</p><h3 id="爬虫的基本流程"><a href="#爬虫的基本流程" class="headerlink" title="爬虫的基本流程"></a>爬虫的基本流程</h3><ol><li>分析网站,得到目标url</li><li>根据url,发起请求,获取HTML源码</li><li>从HTML源码中提取数据<ol><li>提取源码中的目标数据,并持久化保存</li><li>提取源码中的新Url地址,重复第2步操作</li></ol></li><li>爬虫结束,所有目标url提取完毕,并且目标数据保存完成</li></ol><h3 id="实现爬虫的基本步骤"><a href="#实现爬虫的基本步骤" class="headerlink" title="实现爬虫的基本步骤"></a>实现爬虫的基本步骤</h3><ol><li>建立连接,爬取数据</li><li>建立正则表达式规范</li><li>使用正则匹配目标数据</li></ol><h3 id="Url的组成"><a href="#Url的组成" class="headerlink" title="Url的组成"></a>Url的组成</h3><ol><li>scheme:协议(http,https,ftp)</li><li>host:服务器地址</li><li>port:服务器端口</li><li>path:访问的资源路径</li><li>query-string:参数</li></ol><h3 id="常见请求状态码"><a href="#常见请求状态码" class="headerlink" title="常见请求状态码"></a>常见请求状态码</h3><p>200:请求成功<br>301:永久重定向<br>302:临时重定向<br>400:客户端错误<br>401:未授权<br>403:服务器拒绝访问<br>404:找不到页面<br>405:请求方式错误<br>408:请求超时<br>500:服务器错误<br>503:服务不可用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爬虫入门&quot;&gt;&lt;a href=&quot;#爬虫入门&quot; class=&quot;headerlink&quot; title=&quot;爬虫入门&quot;&gt;&lt;/a&gt;爬虫入门&lt;/h2&gt;&lt;h3 id=&quot;爬虫是什么&quot;&gt;&lt;a href=&quot;#爬虫是什么&quot; class=&quot;headerlink&quot; title=&quot;爬虫是什么&quot;&gt;
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="https://yimchengjie.github.io/2019/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/11/08/设计模式/享元模式/</id>
    <published>2019-11-08T12:58:21.000Z</published>
    <updated>2020-01-07T13:37:32.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>属于结构型模式</p><p>又叫共享模式, 共享系统对象</p><h3 id="为什么使用享元模式"><a href="#为什么使用享元模式" class="headerlink" title="为什么使用享元模式"></a>为什么使用享元模式</h3><p>解决重复对象的内存浪费的问题</p><p>常用场景为数据库连接池</p><h3 id="使用享元模式"><a href="#使用享元模式" class="headerlink" title="使用享元模式"></a>使用享元模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolObj</span> <span class="keyword">implements</span> <span class="title">Pool</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String db;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoolObj</span><span class="params">(String db)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.db = db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接 "</span>+db);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Pool&gt; pools=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pool <span class="title">getPool</span><span class="params">(String db)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pools.get(db)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> pools.get(db);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Pool pool=<span class="keyword">new</span> PoolObj(db);</span><br><span class="line">            pools.put(db,pool);</span><br><span class="line">            <span class="keyword">return</span> pool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMapCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(pools.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlyWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PoolFactory poolFactory=<span class="keyword">new</span> PoolFactory();</span><br><span class="line">    Pool pool1=poolFactory.getPool(<span class="string">"mysql"</span>);</span><br><span class="line">    Pool pool2=poolFactory.getPool(<span class="string">"oracle"</span>);</span><br><span class="line">    pool1.connect();</span><br><span class="line">    pool2.connect();</span><br><span class="line">    Pool pool3=poolFactory.getPool(<span class="string">"mysql"</span>);</span><br><span class="line">    Pool pool4=poolFactory.getPool(<span class="string">"oracle"</span>);</span><br><span class="line">    pool3.connect();</span><br><span class="line">    pool4.connect();</span><br><span class="line"></span><br><span class="line">    poolFactory.printMapCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;又叫共享模式, 共享系统对象&lt;/p&gt;
&lt;h3 id=&quot;为什么使用享元模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://yimchengjie.github.io/2019/10/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/30/设计模式/外观模式/</id>
    <published>2019-10-30T12:31:05.000Z</published>
    <updated>2020-01-07T13:37:21.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>属于结构型模式</p><p>外观模式其实就是将一段代码中不变的部分提炼出来,做成一个接口暴露给用户</p><h3 id="为什么使用外观模式"><a href="#为什么使用外观模式" class="headerlink" title="为什么使用外观模式"></a>为什么使用外观模式</h3><p>降低访问复杂系统的内部子系统时的复杂度,减少系统相互依赖。提高灵活性.提高安全性</p><h3 id="使用外观模式"><a href="#使用外观模式" class="headerlink" title="使用外观模式"></a>使用外观模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一些列方法封装成接口暴露给用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeviceA deviceA=<span class="keyword">new</span> DeviceA();</span><br><span class="line">    <span class="keyword">private</span> DeviceB deviceB=<span class="keyword">new</span> DeviceB();</span><br><span class="line">    <span class="keyword">private</span> DeviceC deviceC=<span class="keyword">new</span> DeviceC();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        deviceA.method();</span><br><span class="line">        deviceB.method();</span><br><span class="line">        deviceC.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceA的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceB的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceC的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">    facade.methed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;外观模式其实就是将一段代码中不变的部分提炼出来,做成一个接口暴露给用户&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之索引</title>
    <link href="https://yimchengjie.github.io/2019/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
    <id>https://yimchengjie.github.io/2019/10/28/数据库/MySQL数据库之索引/</id>
    <published>2019-10-28T11:21:16.000Z</published>
    <updated>2020-01-07T12:27:49.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库之索引"><a href="#MySQL数据库之索引" class="headerlink" title="MySQL数据库之索引"></a>MySQL数据库之索引</h2><p>MySQL索引的简历对于MySQL的高效运行至关重要,索引可以大大提高MySQL检索速度</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。所以建立索引会占用磁盘空间的索引文件。</p><p>对表中数据增删改时,索引也要进行相应维护</p><h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><ol><li><p>在创建表的时候创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    author <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    info <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">INDEX</span>(author)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>CREATE INDEX直接创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">index</span> index_name ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> primary <span class="keyword">key</span> ;</span><br></pre></td></tr></table></figure></li><li><p>组合索引和前缀索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用column_list1(4)建立column_list1的前4位的索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list1(<span class="number">4</span>),column_list2,column_list3);</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><h4 id="不走索引的情况"><a href="#不走索引的情况" class="headerlink" title="不走索引的情况"></a>不走索引的情况</h4><ol><li>索引列参与到计算式</li><li>索引列参与到函数运算</li><li>正则表达式匹配</li><li>条件中带or</li><li>like ‘%XX%’</li><li>where中有不等号</li></ol><p>注意: like’XXX%’ 走索引</p><p>索引虽然大大提高了查询速度, 但是降低了更新速度;</p><h3 id="索引技巧"><a href="#索引技巧" class="headerlink" title="索引技巧"></a>索引技巧</h3><ol><li>只要列中有NULL值, 索引就无效</li><li>使用短索引,对长字段建索引时使用前缀建立</li><li>ORDER BY中的列不会使用索引</li><li>使用like语句走索引要用’XXX%’</li><li>不要在列上运算</li><li>索引要建立在经常进行select操作的字段上</li><li>索引要建立在值相对唯一的字段上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据库之索引&quot;&gt;&lt;a href=&quot;#MySQL数据库之索引&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库之索引&quot;&gt;&lt;/a&gt;MySQL数据库之索引&lt;/h2&gt;&lt;p&gt;MySQL索引的简历对于MySQL的高效运行至关重要,索引可以大大提
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://yimchengjie.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之事务</title>
    <link href="https://yimchengjie.github.io/2019/10/22/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
    <id>https://yimchengjie.github.io/2019/10/22/数据库/MySQL数据库之事务/</id>
    <published>2019-10-22T10:23:20.000Z</published>
    <updated>2020-01-07T11:19:50.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库之事务"><a href="#MySQL数据库之事务" class="headerlink" title="MySQL数据库之事务"></a>MySQL数据库之事务</h2><p>MySQL事务主要用于处理操作量大的一系列操作;比如在人员管理系统中,删除一个人员的同时还要删除人员的基本资料,也要删除一些其他相关的信息,这样的数据库操作就叫事务.</p><h3 id="MySQL事务处理的两种方式"><a href="#MySQL事务处理的两种方式" class="headerlink" title="MySQL事务处理的两种方式"></a>MySQL事务处理的两种方式</h3><ol><li>用BEGIN(开始一个事务),ROLLBACK(事务回滚),COMMIT(事务确认)实现</li><li>用SET来改变MySQL的自动提交模式</li></ol><h3 id="实现事务管理"><a href="#实现事务管理" class="headerlink" title="实现事务管理"></a>实现事务管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一次转账</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Connection conn = <span class="keyword">null</span>;</span><br><span class="line">  PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      conn = DBUtils.getConnection();</span><br><span class="line">      <span class="comment">//这里关闭自动事务提交, 相当于开启事务 begin ,并且需要手动提交</span></span><br><span class="line">      conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">      <span class="comment">//用户A转出100</span></span><br><span class="line">      ps = conn.prepareStatement(<span class="string">"update account set money=money-100 where name='A'"</span>);</span><br><span class="line">      ps.executeUpdate();</span><br><span class="line">      <span class="comment">//模拟异常</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">      <span class="comment">//用户B转入100</span></span><br><span class="line">      ps = conn.prepareStatement(<span class="string">"update account set money=money+100 where name='B'"</span>);</span><br><span class="line">      ps.executeUpdate();</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      conn.commit();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//事务回滚</span></span><br><span class="line">        conn.rollback();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      DBUtils.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis中的事务管理"><a href="#Mybatis中的事务管理" class="headerlink" title="Mybatis中的事务管理"></a>Mybatis中的事务管理</h3><p>Mybatis的事务在环境配置中, 环境配置传入SqlSessionFactory工厂</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用JDBC开启事务 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启事务后,Mybatis会创建一个TransactionFactory 事务工厂<br>Mybatis中Transaction(事务)是由TransactionFactory(事务工厂)创建的</p><p>事务由Connection实例管理</p><h3 id="Spring-Mybatis实现事务管理"><a href="#Spring-Mybatis实现事务管理" class="headerlink" title="Spring+Mybatis实现事务管理"></a>Spring+Mybatis实现事务管理</h3><p>使用Managed事务管理,Mybatis对事务的创建提交回滚没有实现,是交给容器来实现的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis中开启Managed事务管理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"managed"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"><span class="comment">&lt;!-- Spring配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBoot开启事务</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开始事务</span></span><br></pre></td></tr></table></figure><p>抽离出事务Service,使用@Transational注解事务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransationalService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Service service</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transationMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 调用其他增删改查, 组成一个事务</span></span><br><span class="line">        service.select();</span><br><span class="line">        service.update();</span><br><span class="line">        service.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据库之事务&quot;&gt;&lt;a href=&quot;#MySQL数据库之事务&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库之事务&quot;&gt;&lt;/a&gt;MySQL数据库之事务&lt;/h2&gt;&lt;p&gt;MySQL事务主要用于处理操作量大的一系列操作;比如在人员管理系统中
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mybatis" scheme="https://yimchengjie.github.io/tags/Mybatis/"/>
    
      <category term="MySQL" scheme="https://yimchengjie.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://yimchengjie.github.io/2019/10/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/15/设计模式/组合模式/</id>
    <published>2019-10-15T08:53:46.000Z</published>
    <updated>2020-01-05T03:06:23.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>属于结构型模式</p><p>组合模式又叫部分整体模式,它创建了对象组的树形结构, 将对象组成树状结构来表示整体的层次关系</p><h3 id="为什么使用组合模式"><a href="#为什么使用组合模式" class="headerlink" title="为什么使用组合模式"></a>为什么使用组合模式</h3><p>组合模式能够使用户对单个对象和组合对象的访问具有一致性</p><p>有时候功能的扩展对象可能是包含关系, 而不是继承关系, 需要使用组合模式</p><h3 id="使用组合模式"><a href="#使用组合模式" class="headerlink" title="使用组合模式"></a>使用组合模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组织, 大学 学院 部门都继承组织</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Origanization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Origanization</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Origanization origanization)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加: "</span>+origanization.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Origanization origanization)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"移除: "</span>+origanization.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Origanization&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", info='"</span> + info + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大学</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">Origanization</span></span>&#123;</span><br><span class="line">    <span class="comment">// 管理学院</span></span><br><span class="line">    List&lt;Origanization&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.add(origanization);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.remove(origanization);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----"</span>+<span class="keyword">this</span>+<span class="string">"----"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Origanization origanization: list)&#123;</span><br><span class="line">            origanization.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学院</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">Origanization</span></span>&#123;</span><br><span class="line">    <span class="comment">//管理部门</span></span><br><span class="line">    List&lt;Origanization&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.add(origanization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.remove(origanization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--"</span>+<span class="keyword">this</span>+<span class="string">"--"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Origanization origanization: list)&#123;</span><br><span class="line">            origanization.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门 叶子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">Origanization</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComposite</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Origanization university = <span class="keyword">new</span> University(<span class="string">"浙江大学"</span>,<span class="string">"大学"</span>);</span><br><span class="line">    Origanization college1 = <span class="keyword">new</span> College(<span class="string">"计算机学院"</span>,<span class="string">"学院"</span>);</span><br><span class="line">    Origanization college2 = <span class="keyword">new</span> College(<span class="string">"国际学院"</span>,<span class="string">"学院"</span>);</span><br><span class="line">    university.add(college1);</span><br><span class="line">    university.add(college2);</span><br><span class="line">    Origanization department1 = <span class="keyword">new</span> Department(<span class="string">"信息工程"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    Origanization department2 = <span class="keyword">new</span> Department(<span class="string">"软件工程"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    college1.add(department1);</span><br><span class="line">    college1.add(department2);</span><br><span class="line">    Origanization department3 = <span class="keyword">new</span> Department(<span class="string">"国际英语"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    Origanization department4 = <span class="keyword">new</span> Department(<span class="string">"商务英语"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    college2.add(department3);</span><br><span class="line">    college2.add(department4);</span><br><span class="line">    university.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;组合模式又叫部分整体模式,它创建了对象组的树形结构, 将对象组成树状结构来表示整体的层次关系&lt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="https://yimchengjie.github.io/2019/10/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/08/设计模式/装饰者模式/</id>
    <published>2019-10-08T07:11:25.000Z</published>
    <updated>2020-01-05T02:13:28.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>属于结构型模式</p><p>装饰者模式动态的给一个对象添加一些额外的职责</p><h3 id="为什么使用装饰者模式"><a href="#为什么使用装饰者模式" class="headerlink" title="为什么使用装饰者模式"></a>为什么使用装饰者模式</h3><p>通常使用继承类来扩展功能, 如果功能种类很多, 会造成类爆炸(类的数量很多);不方便管理<br>使用装饰者模式, 可以让用户决定动态的加入扩展功能;</p><h3 id="使用装饰者模式"><a href="#使用装饰者模式" class="headerlink" title="使用装饰者模式"></a>使用装饰者模式</h3><p>装饰者模式有Component(主体), (装饰部分),ConcreteComponent(具体的主体);<br>装饰者和具体的主体都要继承主体;装饰者内维护一个主体,并将主体进行装饰.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主体 饮品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price = <span class="number">0.0</span>d;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="comment">// 计算饮品价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体的实现 咖啡</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setInfo(<span class="string">"咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">18</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体的实现 奶茶</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setInfo(<span class="string">"奶茶"</span>);</span><br><span class="line">        setPrice(<span class="number">15</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Drink drink;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getInfo()+<span class="string">" "</span>+drink.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()+drink.cost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink drink)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.drink=drink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者的实现 加奶盖</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkCap</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkCap</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setInfo(<span class="string">"加奶盖"</span>);</span><br><span class="line">        setPrice(<span class="number">6</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者的实现 加芝士</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cheese</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cheese</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setInfo(<span class="string">"加芝士"</span>);</span><br><span class="line">        setPrice(<span class="number">5</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDecorator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 点一份咖啡</span></span><br><span class="line">    Drink coffee=<span class="keyword">new</span> Coffee();</span><br><span class="line">    System.out.println(coffee.getInfo()+coffee.cost());</span><br><span class="line">    <span class="comment">// 加一份奶盖</span></span><br><span class="line">    Drink coffee1=<span class="keyword">new</span> MilkCap(coffee);</span><br><span class="line">    System.out.println(coffee1.getInfo()+coffee1.cost());</span><br><span class="line">    <span class="comment">// 加一份芝士</span></span><br><span class="line">    Drink coffee2=<span class="keyword">new</span> Cheese(coffee1);</span><br><span class="line">    System.out.println(coffee2.getInfo()+coffee2.cost());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点一份奶茶</span></span><br><span class="line">    Drink milkTea=<span class="keyword">new</span> MilkTea();</span><br><span class="line">    System.out.println(milkTea.getInfo()+milkTea.cost());</span><br><span class="line">    <span class="comment">// 加一份芝士</span></span><br><span class="line">    Drink milkTea1=<span class="keyword">new</span> Cheese(milkTea);</span><br><span class="line">    System.out.println(milkTea1.getInfo()+milkTea1.cost());</span><br><span class="line">    <span class="comment">// 加一份奶盖</span></span><br><span class="line">    Drink milkTea2=<span class="keyword">new</span> MilkCap(milkTea1);</span><br><span class="line">    System.out.println(milkTea2.getInfo()+milkTea2.cost());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;装饰者模式动态的给一个对象添加一些额外的职责&lt;/p&gt;
&lt;h3 id=&quot;为什么使用装饰者
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="https://yimchengjie.github.io/2019/09/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/09/29/设计模式/桥接模式/</id>
    <published>2019-09-29T02:23:41.000Z</published>
    <updated>2020-01-05T01:23:03.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>属于结构型模式</p><p>桥接模式将抽象和实现分离开来,各自独立,但能动态的结合;</p><h3 id="为什么使用桥接模式"><a href="#为什么使用桥接模式" class="headerlink" title="为什么使用桥接模式"></a>为什么使用桥接模式</h3><p>桥接模式基于类的最小设计原则, 通过使用封装、聚合及继承，让不同的类承担不同的职责；<br>将事物的抽象和实现分离， 从而保持各部分的独立性功能的扩展性；</p><h3 id="使用桥接模式"><a href="#使用桥接模式" class="headerlink" title="使用桥接模式"></a>使用桥接模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象事物 消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageImplementor = messageImplementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageImplementor messageImplementor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageImplementor.send(message,toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的子类, 默认消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(messageImplementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMessage(message, toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的子类, 加急消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrgencyMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMessage(<span class="string">"加急"</span>+message, toUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UrgencyMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(messageImplementor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的子类, 特快消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExpressMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(messageImplementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMessage(<span class="string">"特快"</span>+message, toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageImplementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String message,String toUser)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为的实现, 用邮件发</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageMail</span> <span class="keyword">implements</span> <span class="title">MessageImplementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用邮件给 "</span>+toUser+<span class="string">" 发送: "</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为的实现, 用微信发</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageWeChat</span> <span class="keyword">implements</span> <span class="title">MessageImplementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用微信给 "</span>+toUser+<span class="string">" 发送: "</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBridging</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AbstractMessage message1=<span class="keyword">new</span> DefaultMessage(<span class="keyword">new</span> MessageMail());</span><br><span class="line">    AbstractMessage message2=<span class="keyword">new</span> DefaultMessage(<span class="keyword">new</span> MessageWeChat());</span><br><span class="line">    AbstractMessage message3=<span class="keyword">new</span> UrgencyMessage(<span class="keyword">new</span> MessageMail());</span><br><span class="line">    AbstractMessage message4=<span class="keyword">new</span> UrgencyMessage(<span class="keyword">new</span> MessageWeChat());</span><br><span class="line">    AbstractMessage message5=<span class="keyword">new</span> ExpressMessage(<span class="keyword">new</span> MessageMail());</span><br><span class="line">    AbstractMessage message6=<span class="keyword">new</span> ExpressMessage(<span class="keyword">new</span> MessageWeChat());</span><br><span class="line">    message1.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message2.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message3.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message4.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message5.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message6.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;桥接模式将抽象和实现分离开来,各自独立,但能动态的结合;&lt;/p&gt;
&lt;h3 id=&quot;为什么使用桥
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://yimchengjie.github.io/2019/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/09/21/设计模式/适配器模式/</id>
    <published>2019-09-21T04:51:31.000Z</published>
    <updated>2020-01-04T09:13:11.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>属于结构型模式</p><p>适配器模式将两个不兼容的类通过适配器能够做到兼容;<br>用户调用适配器转化后的接口方法, 适配器再调用被适配者的接口方法;<br>用户只要关心适配器暴露的接口方法</p><h3 id="为什么使用适配器模式"><a href="#为什么使用适配器模式" class="headerlink" title="为什么使用适配器模式"></a>为什么使用适配器模式</h3><p>现实中,存在很多的适配器, 比如电源适配器; 让原本不能直接兼容的两个对象, 通过适配器进行兼容</p><h3 id="使用适配器模式"><a href="#使用适配器模式" class="headerlink" title="使用适配器模式"></a>使用适配器模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被适配者, 比如插座 交流220V</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器 电源适配器 转化成低压直流电</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Adaptee adaptee)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输入电压: "</span>+adaptee.output());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输出电压: "</span>+<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用者  需要充电的电池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Battery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(Adapter adapter)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (adapter.output()==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"不适配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;适配器模式将两个不兼容的类通过适配器能够做到兼容;&lt;br&gt;用户调用适配器转化后的接口方
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://yimchengjie.github.io/2019/09/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/09/14/设计模式/建造者模式/</id>
    <published>2019-09-14T08:34:15.000Z</published>
    <updated>2020-01-04T08:04:52.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>属于创建者模式</p><p>建造者模式将一个复杂对象的构建和对象分离,实现解耦;<br>比如一辆汽车的创建,需要一整套过程和很多的部件,建造者模式实现了将部件和过程分离</p><h3 id="为什么使用建造者模式"><a href="#为什么使用建造者模式" class="headerlink" title="为什么使用建造者模式"></a>为什么使用建造者模式</h3><p>是为了将创建一个复杂对象的过程与它的属性解耦</p><h3 id="使用建造者模式"><a href="#使用建造者模式" class="headerlink" title="使用建造者模式"></a>使用建造者模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</span><br><span class="line">                <span class="string">"wheel='"</span> + wheel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", engine='"</span> + engine + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", chassis='"</span> + chassis + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模拟汽车 轮子 发动机 底盘</span></span><br><span class="line">    <span class="keyword">private</span> String wheel;</span><br><span class="line">    <span class="keyword">private</span> String engine;</span><br><span class="line">    <span class="keyword">private</span> String chassis;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWheel</span><span class="params">()</span> </span>&#123;  <span class="keyword">return</span> wheel;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWheel</span><span class="params">(String wheel)</span> </span>&#123;<span class="keyword">this</span>.wheel = wheel; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngine</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> engine;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(String engine)</span> </span>&#123; <span class="keyword">this</span>.engine = engine;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChassis</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> chassis; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChassis</span><span class="params">(String chassis)</span> </span>&#123;   <span class="keyword">this</span>.chassis = chassis; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建组件A</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 创建组件B</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 创建组件C</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Product <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造者的具体实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = <span class="keyword">new</span> Product();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;product.setWheel(<span class="keyword">new</span> String(<span class="string">"米其林轮胎"</span>));  &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;product.setEngine(<span class="keyword">new</span> String(<span class="string">"三菱发动机"</span>));  &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span> </span>&#123;product.setChassis(<span class="keyword">new</span> String(<span class="string">"宝马底盘"</span>));   &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> product; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥者</span></span><br><span class="line"><span class="comment">// 客户端直接利用指挥者创建对象, 给指挥者传入一个建造者实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Diector</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">        <span class="keyword">return</span> builder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h2&gt;&lt;p&gt;属于创建者模式&lt;/p&gt;
&lt;p&gt;建造者模式将一个复杂对象的构建和对象分离,实现解耦;&lt;br&gt;比如一辆汽车的创建,需要一
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://yimchengjie.github.io/2019/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/08/27/设计模式/原型模式/</id>
    <published>2019-08-27T14:09:01.000Z</published>
    <updated>2020-01-04T03:05:48.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>属于创建者模式</p><p>原型对象负责创建需要用到的对象, 使用者直接拷贝原型,作为创建的对象</p><p>注意, 是拷贝, 不是引用; 核心点是object对象的clone方法</p><h3 id="为什么要使用原型模式"><a href="#为什么要使用原型模式" class="headerlink" title="为什么要使用原型模式"></a>为什么要使用原型模式</h3><ol><li>使用原型模式拷贝对象, 可以获得对象的运行状态, 不会产生一个初始全新对象</li><li>拷贝的效率比创建的效率更高</li><li>一个对象有多个访问者的时候,可以考虑用原型模式</li><li>对于一个创建过程很复杂的类来说, 可以使用原型模式</li></ol><h3 id="使用原型模式"><a href="#使用原型模式" class="headerlink" title="使用原型模式"></a>使用原型模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型类</span></span><br><span class="line"><span class="comment">// 实现拷贝需要继承Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sheep&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", master="</span> + master +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Master <span class="title">getMaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> master;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaster</span><span class="params">(Master master)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.master = master;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Master master;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把引用的对象也进行拷贝</span></span><br><span class="line">    <span class="comment">// 这种方法要把所有要拷贝的类都继承Cloneable,并且当有多层引用关系时, 代码会很复杂</span></span><br><span class="line">    <span class="comment">// 不推荐</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepCloneAbandon</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Sheep clone=(Sheep) <span class="keyword">super</span>.clone();</span><br><span class="line">        clone.master=(Master) <span class="keyword">this</span>.master.clone();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用流的方法实现深拷贝, 推荐使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">            objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">            <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">            iOException.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            classNotFoundException.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                byteArrayOutputStream.close();</span><br><span class="line">                objectOutputStream.close();</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">                objectInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">                iOException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrototype</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Sheep sheep = <span class="keyword">new</span> Sheep();</span><br><span class="line">    sheep.setName(<span class="string">"喜洋洋"</span>);</span><br><span class="line">    sheep.setMaster(<span class="keyword">new</span> Master(<span class="string">"村长"</span>));</span><br><span class="line">    Sheep copysheep = (Sheep) sheep.clone();</span><br><span class="line">    <span class="comment">// hashCode不同,说明不是复制引用而是拷贝对象</span></span><br><span class="line">    <span class="comment">// 拷贝对象中的属性为引用类型的时候, 拷贝的引用地址</span></span><br><span class="line">    <span class="comment">// 所以默认的clone方法是浅拷贝的方法</span></span><br><span class="line">    System.out.println(sheep.hashCode() + <span class="string">" "</span> + sheep.toString());</span><br><span class="line">    System.out.println(copysheep.hashCode() + <span class="string">" "</span> + copysheep.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 人工再拷贝实现深拷贝</span></span><br><span class="line">    System.out.println(<span class="string">"人工再拷贝实现深拷贝"</span>);</span><br><span class="line">    Sheep deepCopySheepAbandon = (Sheep) sheep.deepCloneAbandon();</span><br><span class="line">    System.out.println(deepCopySheepAbandon.hashCode() + <span class="string">" "</span> + deepCopySheepAbandon.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用流深拷贝</span></span><br><span class="line">    System.out.println(<span class="string">"用流深拷贝"</span>);</span><br><span class="line">    Sheep deepCopySheep = (Sheep) sheep.deepClone();</span><br><span class="line">    System.out.println(deepCopySheep.hashCode() + <span class="string">" "</span> + deepCopySheep.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring中应用"><a href="#Spring中应用" class="headerlink" title="Spring中应用"></a>Spring中应用</h3><p>bean的scope属性可以指定为<code>prototype</code>原型模式, 每次创建bean时都是clone创建;</p><h3 id="注意-缺点"><a href="#注意-缺点" class="headerlink" title="注意(缺点)"></a>注意(缺点)</h3><p>在实现深度克隆时, 代码复杂<br>需要给每个类写克隆方法, 对于已有不支持clone的类,工作量大,而且违背了开闭原则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h2&gt;&lt;p&gt;属于创建者模式&lt;/p&gt;
&lt;p&gt;原型对象负责创建需要用到的对象, 使用者直接拷贝原型,作为创建的对象&lt;/p&gt;
&lt;p&gt;注意, 是
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ入门</title>
    <link href="https://yimchengjie.github.io/2019/08/25/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/08/25/消息中间件/RabbitMQ入门/</id>
    <published>2019-08-25T13:55:17.000Z</published>
    <updated>2020-01-24T07:48:12.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ入门"><a href="#RabbitMQ入门" class="headerlink" title="RabbitMQ入门"></a>RabbitMQ入门</h2><p>RabbitMQ是一个开源的机遇AMQP协议的实现,服务端用Erlang语言编写,支持多种客户端,用于在分布式系统中存储转发消息</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><h3 id="RabbitMQ的安装"><a href="#RabbitMQ的安装" class="headerlink" title="RabbitMQ的安装"></a>RabbitMQ的安装</h3><ol><li>官网安装rabbitmq,注意需要安装erlang对应的版本</li><li>安装完,可以直接启动服务<code>systemctl start rabbitmq-server</code></li></ol><h3 id="Web管理平台"><a href="#Web管理平台" class="headerlink" title="Web管理平台"></a>Web管理平台</h3><ol><li><p>开启插件<code>rabbitmq-plugins enable rabbitmq_management</code></p></li><li><p>创建新用户,配置权限<br> <code>rabbitmqctl add_user admin admin</code><br> 分配操作权限<br> <code>rabbitmqctl set_user_tags admin administrator</code><br> 分配资源权限<br> <code>rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p></li><li><p>开启防火墙</p></li></ol><h3 id="java中的使用"><a href="#java中的使用" class="headerlink" title="java中的使用"></a>java中的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单队列生产者</span></span><br><span class="line"><span class="comment"> * 使用RabbitMQ的默认交换器发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2、设置连接属性</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.100.242"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、从连接工厂获取连接</span></span><br><span class="line">            connection = factory.newConnection(<span class="string">"生产者"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、从链接中创建通道</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5、声明（创建）队列</span></span><br><span class="line"><span class="comment">             * 如果队列不存在，才会创建</span></span><br><span class="line"><span class="comment">             * RabbitMQ 不允许声明两个队列名相同，属性不同的队列，否则会报错</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * queueDeclare参数说明：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> queue 队列名称</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> durable 队列是否持久化</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exclusive 是否排他，即是否为私有的，如果为true,会对当前队列加锁，其它通道不能访问，并且在连接关闭时会自动删除，不受持久化和自动删除的属性控制</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> arguments 队列参数，设置队列的有效期、消息最大长度、队列中所有消息的生命周期等等</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">            <span class="comment">// 6、发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, <span class="string">"queue1"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"消息已发送！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7、关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8、关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单队列消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2、设置连接属性</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.100.242"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、从连接工厂获取连接</span></span><br><span class="line">            connection = factory.newConnection(<span class="string">"消费者"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、从链接中创建通道</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5、声明（创建）队列</span></span><br><span class="line"><span class="comment">             * 如果队列不存在，才会创建</span></span><br><span class="line"><span class="comment">             * RabbitMQ 不允许声明两个队列名相同，属性不同的队列，否则会报错</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * queueDeclare参数说明：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> queue 队列名称</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> durable 队列是否持久化</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exclusive 是否排他，即是否为私有的，如果为true,会对当前队列加锁，其它通道不能访问，</span></span><br><span class="line"><span class="comment">             *                  并且在连接关闭时会自动删除，不受持久化和自动删除的属性控制。</span></span><br><span class="line"><span class="comment">             *                  一般在队列和交换器绑定时使用</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> arguments 队列参数，设置队列的有效期、消息最大长度、队列中所有消息的生命周期等等</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6、定义收到消息后的回调</span></span><br><span class="line">            DeliverCallback callback = <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"收到消息："</span> + <span class="keyword">new</span> String(message.getBody(), <span class="string">"UTF-8"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 7、监听队列</span></span><br><span class="line">            channel.basicConsume(<span class="string">"queue1"</span>, <span class="keyword">true</span>, callback, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"开始接收消息"</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 8、关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 9、关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RabbitMQ入门&quot;&gt;&lt;a href=&quot;#RabbitMQ入门&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ入门&quot;&gt;&lt;/a&gt;RabbitMQ入门&lt;/h2&gt;&lt;p&gt;RabbitMQ是一个开源的机遇AMQP协议的实现,服务端用Erlang语言
      
    
    </summary>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="RabbitMQ入门" scheme="https://yimchengjie.github.io/tags/RabbitMQ%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://yimchengjie.github.io/2019/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/08/18/设计模式/工厂模式/</id>
    <published>2019-08-18T12:31:20.000Z</published>
    <updated>2020-01-03T07:48:47.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>属于创建型模式</p><p>专门定义一个类来负责创建一个接口的一系列实现类的实例;即负责创建一些列有公共父类或者实现接口的对象</p><h3 id="为什么使用工厂模式"><a href="#为什么使用工厂模式" class="headerlink" title="为什么使用工厂模式"></a>为什么使用工厂模式</h3><ol><li>使用工厂模式, 将创建实例和使用实例进行分离, 更便于后期的维护和扩展;实现了<strong>解耦</strong></li><li>工厂模式可以减少重复代码, 创建实例的代码只要重复调用工厂模式中的创建方法就行了</li></ol><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式又叫<strong>静态工厂方法模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String kindName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKindName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kindName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKindName</span><span class="params">(String kindName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kindName = kindName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"呼吸中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类dog</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗啃骨头..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类cat</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">getAnimal</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name==<span class="string">"dog"</span>||name==<span class="string">"Dog"</span>)&#123;</span><br><span class="line">            Animal dog=<span class="keyword">new</span> Dog();</span><br><span class="line">            dog.setKindName(<span class="string">"dog"</span>);</span><br><span class="line">            <span class="keyword">return</span> dog;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name==<span class="string">"cat"</span>||name==<span class="string">"Cat"</span>) &#123;</span><br><span class="line">            Animal cat = <span class="keyword">new</span> Cat();</span><br><span class="line">            cat.setKindName(<span class="string">"dog"</span>);</span><br><span class="line">            <span class="keyword">return</span> cat;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"出错"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>当简单工厂模式要创建的对象非常多, 或者工厂类有它自己的实现类了,代码量也会增多, 不易维护.<br>上述代码的例子下, <code>AnimalFactory</code>有了继承它的<code>DogFactory</code>, <code>CatFactory</code>创建的对象变成ChinaDog<br> ChinaCat EnglishDog EnglishCat..怎么办呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">    AbstractAnimalFactory abstractAnimalFactory=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(String country,String kind)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (kind==<span class="string">"dog"</span>)&#123;</span><br><span class="line">            abstractAnimalFactory=<span class="keyword">new</span> DogFactoryAbstract();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (kind==<span class="string">"cat"</span>)&#123;</span><br><span class="line">            abstractAnimalFactory=<span class="keyword">new</span> CatFactoryAbstract();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"工厂错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        abstractAnimalFactory.createAnimal(country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Animal <span class="title">createAnimal</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类实现工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatFactoryAbstract</span> <span class="keyword">extends</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (country == <span class="string">"chinese"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseCat();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (country == <span class="string">"english"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EnglishCat();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogFactoryAbstract</span> <span class="keyword">extends</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (country == <span class="string">"chinese"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseDog();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (country == <span class="string">"english"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EnglishDog();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;p&gt;属于创建型模式&lt;/p&gt;
&lt;p&gt;专门定义一个类来负责创建一个接口的一系列实现类的实例;即负责创建一些列有公共父类或者实现接口的
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://yimchengjie.github.io/2019/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/08/10/设计模式/单例模式/</id>
    <published>2019-08-10T10:55:45.000Z</published>
    <updated>2020-01-03T04:50:38.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>属于创建型模式</p><p>单例模式,就是采取一定的方法保证在整个系统中,对于某个类,只存在一个实例对象.</p><h3 id="为什么使用单例模式"><a href="#为什么使用单例模式" class="headerlink" title="为什么使用单例模式"></a>为什么使用单例模式</h3><ol><li>使用单例模式,对于那些经常使用的实例, 可以减少创建对象的开销</li><li>实例化减少,可能减少虚拟机垃圾回收的压力</li></ol><h3 id="使用单例模式的几种方法"><a href="#使用单例模式的几种方法" class="headerlink" title="使用单例模式的几种方法"></a>使用单例模式的几种方法</h3><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造器, 防止外部进行new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized保证线程安全性, 但是会影响效率,存在实例时也要进行同步, 这是不必要的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><p>在静态方法保证线程安全的基础上,提高了系统效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保证可见性,一但有实例时,所有线程都会知道</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheck instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheck</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DoubleCheck <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> instance=<span class="keyword">new</span> DoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>比较推荐的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类装载时,静态内部类不会被加载, 保证了懒加载</span></span><br><span class="line">    <span class="comment">// 静态内部类装载时, JVM提供了线程安全, 保证了线程安全</span></span><br><span class="line">    <span class="comment">// 类的静态属性,只在类装载时被加载,保证了单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClassIntance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerClass INTANCE = <span class="keyword">new</span> StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInnerClassIntance.INTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举方法"><a href="#枚举方法" class="headerlink" title="枚举方法"></a>枚举方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTACNE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title">getIntance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTACNE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举方法是最好的一种,也是官方推荐的一种, 它完美的解决了懒加载, 线程安全, 单例等问题</p><p>而且他不会被反射影响, 上面几种方法都可以通过反射的方式, 破坏单例, 而枚举类型是无法通过反射创建实例的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;属于创建型模式&lt;/p&gt;
&lt;p&gt;单例模式,就是采取一定的方法保证在整个系统中,对于某个类,只存在一个实例对象.&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>6大设计原则</title>
    <link href="https://yimchengjie.github.io/2019/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://yimchengjie.github.io/2019/08/10/设计模式/6大设计原则/</id>
    <published>2019-08-10T04:45:11.000Z</published>
    <updated>2020-01-05T01:26:14.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6大设计原则"><a href="#6大设计原则" class="headerlink" title="6大设计原则"></a>6大设计原则</h2><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h3><p>SRP(Single Responsiblity Principle)</p><p><strong>核心定义</strong>:一个接口或者一个类或者一个方法,只负责一件事;</p><p>就像流水线生产,分工合作, 每个人只负责一件事情, 一个人不能负责太多事情, 否则效率低下,而且可能会出问题</p><p>在java程序中, 特别要注意接口的设计, 要遵循单一职责原则, 定义所有实现类通用的职责, 不能把实现类特有的职责放在接口上,否则所有实现类都会受到影响; 但要注意, 要根据业务合理划分责任, 过于细分,会导致类的数量非常庞大, 而且需要相互的耦合, 造成不必要的负责度</p><h3 id="2-里式替换原则"><a href="#2-里式替换原则" class="headerlink" title="2. 里式替换原则"></a>2. 里式替换原则</h3><p>LSP(Liskov Substitution Principle)</p><p><strong>核心定义</strong>:子类应该是可以替换父类,并且在所有使用父类的地方都能够换成子类;</p><p>在java中,子类必须完全实现父类的方法;父类出现的地方换成子类,程序依然能正常运行;子类可以在父类基础上增加新的行为.</p><h3 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3. 依赖倒置原则"></a>3. 依赖倒置原则</h3><p>DIP(Dependence Inversion Principle)</p><p><strong>核心定义</strong>:就是面向接口(或抽象类)编程,各个模块之间不能直接进行依赖, 要通过接口的方式,使各个模块相互独立</p><p>在java中,每个类都尽量继承一个接口;依赖的变量尽量使用接口而不是实现类(比如service依赖dao层,在service接口定义中,只是用dao接口而不是dao实现类);如果基类是抽象类或类,且实现了一些方法,那么尽量不要覆写基类的方法;</p><h3 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h3><p>ISP(Interface Segregation Principle)</p><p><strong>核心定义</strong>:接口的方法要少,类之间的关系要建立在最小接口上;这个单一职责要区分开, 单一职责讲的是类的业务功能单一</p><p>在java中体现为接口的拆分,接口方法尽量定义的少,不要定义没意义的接口</p><h3 id="5-开放封闭原则"><a href="#5-开放封闭原则" class="headerlink" title="5. 开放封闭原则"></a>5. 开放封闭原则</h3><p>OCP(Open Close Principle)</p><p><strong>核心定义</strong>:一个模块的扩展性方面应该是开放的, 而在更改性方面应该是封闭的</p><p>一个网络模块, 原来只有服务端功能,现在要加入客户端功能,那么在不需要修改服务端代码的前提下, 就能扩展客户端, 这样就是前后端分离,在设计之初, 将服务端和客户端分开</p><h3 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6. 迪米特法则"></a>6. 迪米特法则</h3><p>LOD(Law Of Demter)</p><p><strong>核心定义</strong>:一个类应该对自己需要耦合或者调用的类保持最少的了解,也就是低耦合,高内聚</p><p>类与类之间不能有过多的耦合,在系统设计时,不要让一个类依赖太多其他的类, 尽量减少依赖关系</p><h2 id="设计模式概览"><a href="#设计模式概览" class="headerlink" title="设计模式概览"></a>设计模式概览</h2><h3 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h3><p>用于描述”怎样创建对象”,它的主要特点是”将对象的创建与使用分离”</p><p>有<strong>单例</strong>,<strong>原型</strong>,<strong>工厂方法</strong>,<strong>抽象工厂</strong>,<strong>建造者</strong> 5种创造型模式</p><h3 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2. 结构型模式"></a>2. 结构型模式</h3><p>用于描述”如何将对象按某种布局组成更大的结构”</p><p>有<strong>代理</strong>,<strong>适配器</strong>,<strong>桥接</strong>,<strong>装饰者</strong>,<strong>外观</strong>,<strong>享元</strong>,<strong>组合</strong> 7种结构型模式</p><h3 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3. 行为型模式"></a>3. 行为型模式</h3><p>用于描述”类或对象之间怎么相互协作共同完成单个对象无法单独完成的任务,以及怎么样分配职责”</p><p>有<strong>模板方法</strong>,<strong>策略</strong>,<strong>命令</strong>,<strong>责任链</strong>,<strong>状态</strong>,<strong>观察者</strong>,<strong>中介者</strong>,<strong>迭代器</strong>,<strong>访问者</strong>,<strong>备忘录</strong>,<strong>解释器</strong> 11种行为型模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;6大设计原则&quot;&gt;&lt;a href=&quot;#6大设计原则&quot; class=&quot;headerlink&quot; title=&quot;6大设计原则&quot;&gt;&lt;/a&gt;6大设计原则&lt;/h2&gt;&lt;h3 id=&quot;1-单一职责原则&quot;&gt;&lt;a href=&quot;#1-单一职责原则&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ支持的协议</title>
    <link href="https://yimchengjie.github.io/2019/07/30/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/ActiveMQ%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE/"/>
    <id>https://yimchengjie.github.io/2019/07/30/消息中间件/ActiveMQ支持的协议/</id>
    <published>2019-07-30T11:40:31.000Z</published>
    <updated>2019-12-31T09:13:13.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ支持的协议"><a href="#ActiveMQ支持的协议" class="headerlink" title="ActiveMQ支持的协议"></a>ActiveMQ支持的协议</h2><p>ActiveMQ支持多种协议传输和传输方式,允许客户端使用多种协议连接.</p><p>ActiveMQ支持的协议: AUTO、OpenWire、AMQP、Stomp、MQTT等<br>在<code>${ACTIVE_HOME}/conf/activemq.xml</code>中, 通过配置<code>&lt;transportConnectors&gt;</code>就可以使用多种传输方式(==注意配置文件中可能会用到转义字符串, 比如&amp;要用&amp;来表示==)</p><p>ActiveMQ支持的基础传输方式有: VM、TCP、SSL、UDP、Peer、Multicast、HTTP(S)等</p><p>由于TCP的稳定性, 它也是ActiveMQ中最常用的一种传输方式. 在默认的设置中, TCP连接的端口为61616</p><h3 id="OpenWire协议"><a href="#OpenWire协议" class="headerlink" title="OpenWire协议"></a>OpenWire协议</h3><p>OpenWire协议是Apache的一种跨语言的协议,允许从不同的语言和平台访问ActiveMQ<br>默认就是使用这种协议, 功能很全面</p><p>OpenWire支持TCP、SSL、NIO、UDP、VM等传输方式，但URL只配置传输方式时，默认就是使用OpenWire协议</p><h3 id="MQTT协议"><a href="#MQTT协议" class="headerlink" title="MQTT协议"></a>MQTT协议</h3><p>全称Message Queuing Telemetry Transport，即消息队列遥测传输，由IBM开发， 已成为物联网通信的标准</p><p>它结构简单，相比其他的协议更加轻量级</p><h4 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布-订阅模型"></a>发布-订阅模型</h4><p>MQTT协议使用发布-订阅模型<br>提供者发布消息到主题topic上, 只要订阅了这个topic的消费者,都能收到这条消息</p><p>消费者无法收到启动前topic上的消息</p><h4 id="MQTT中的服务质量-QoS"><a href="#MQTT中的服务质量-QoS" class="headerlink" title="MQTT中的服务质量(QoS)"></a>MQTT中的服务质量(QoS)</h4><p>服务质量(QoS)级别 是一种关于发送者和接受者之间信息传递的保证协议</p><p>MQTT支持三种QoS<br>至多一次(0)客户端只发布一次消息到服务器<br>至少一次(1)客户端发送消息,直到服务器返回成功<br>只有一次(2)在(1)的前提下, 客户端继续发送, 客户端查看是否存在, 有就删除</p><p>QoS是的在不可靠的网络下进行通信变得更加简单,因为即使是在非常不可靠的网络下,协议也可以掌控是否需要重发消息, 并保证消息到达</p><h4 id="ActiveMQ中使用MQTT协议"><a href="#ActiveMQ中使用MQTT协议" class="headerlink" title="ActiveMQ中使用MQTT协议"></a>ActiveMQ中使用MQTT协议</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> qos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String broker = <span class="string">"tcp://activemq.tony.com:1883"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passWord = <span class="string">"admin"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MqttClient <span class="title">connect</span><span class="params">(String clientId, String userName,String password)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        MemoryPersistence persistence = <span class="keyword">new</span> MemoryPersistence();</span><br><span class="line">        MqttConnectOptions connOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        connOpts.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line">        connOpts.setUserName(userName);</span><br><span class="line">        connOpts.setPassword(password.toCharArray());</span><br><span class="line">        connOpts.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">        connOpts.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// connOpts.setServerURIs(uris);  //这个是mqtt客户端实现的负载均衡和容错</span></span><br><span class="line">        <span class="comment">// String[] uris = &#123;"tcp://10.100.124.206:1883","tcp://10.100.124.207:1883"&#125;;</span></span><br><span class="line">        MqttClient mqttClient = <span class="keyword">new</span> MqttClient(broker, clientId, persistence);</span><br><span class="line">        mqttClient.setCallback(<span class="keyword">new</span> PushCallback(<span class="string">"test"</span>));</span><br><span class="line">        mqttClient.connect(connOpts);</span><br><span class="line">        <span class="keyword">return</span> mqttClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pub</span><span class="params">(MqttClient sampleClient, String msg, String topic)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MqttMessage message = <span class="keyword">new</span> MqttMessage(msg.getBytes());</span><br><span class="line">        message.setQos(qos);</span><br><span class="line">        message.setRetained(<span class="keyword">false</span>);</span><br><span class="line">        sampleClient.publish(topic, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String str, String clientId, String topic)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MqttClient mqttClient = connect(clientId, userName, passWord);</span><br><span class="line">        <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pub(mqttClient, str, topic);</span><br><span class="line">            System.out.println(<span class="string">"pub--&gt;"</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mqttClient.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        publish(<span class="string">"message content"</span>, <span class="string">"producer-client-id-0"</span>, <span class="string">"x/y/z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PushCallback</span> <span class="keyword">implements</span> <span class="title">MqttCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String threadId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PushCallback</span><span class="params">(String threadId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadId = threadId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器是否正确接收---------"</span> + token.isComplete());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getPayload());</span><br><span class="line">        System.out.println(threadId + <span class="string">" "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> qos = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String broker = <span class="string">"tcp://activemq.tony.com:1883"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passWord = <span class="string">"admin"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MqttClient <span class="title">connect</span><span class="params">(String clientId)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        MemoryPersistence persistence = <span class="keyword">new</span> MemoryPersistence();</span><br><span class="line">        MqttConnectOptions connOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        connOpts.setCleanSession(<span class="keyword">false</span>);</span><br><span class="line">        connOpts.setUserName(userName);</span><br><span class="line">        connOpts.setPassword(passWord.toCharArray());</span><br><span class="line">        connOpts.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">        connOpts.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line">        MqttClient mqttClient = <span class="keyword">new</span> MqttClient(broker, clientId, persistence);</span><br><span class="line">        mqttClient.connect(connOpts);</span><br><span class="line">        <span class="keyword">return</span> mqttClient;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(MqttClient mqttClient, String topic)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] Qos = &#123;qos&#125;;</span><br><span class="line">        String[] topics = &#123;topic&#125;;</span><br><span class="line">        mqttClient.subscribe(topics, Qos, <span class="keyword">new</span> IMqttMessageListener[]&#123;(s, mqttMessage) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"收到新消息"</span> + s + <span class="string">" &gt; "</span> + mqttMessage.toString());</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runsub</span><span class="params">(String clientId, String topic)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        MqttClient mqttClient = connect(clientId);</span><br><span class="line">        <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sub(mqttClient, topic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        runsub(<span class="string">"consumer-client-id-1"</span>, <span class="string">"x/y/z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AUTO协议"><a href="#AUTO协议" class="headerlink" title="AUTO协议"></a>AUTO协议</h3><p>AUTO自动检测协议,可以自动检测ActiveMQ支持的所有协议, 允许使用各种协议的客户端,使用同一个传输</p><h3 id="Stomp协议"><a href="#Stomp协议" class="headerlink" title="Stomp协议"></a>Stomp协议</h3><p>可以使用webSocket传输协议</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ActiveMQ支持的协议&quot;&gt;&lt;a href=&quot;#ActiveMQ支持的协议&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ支持的协议&quot;&gt;&lt;/a&gt;ActiveMQ支持的协议&lt;/h2&gt;&lt;p&gt;ActiveMQ支持多种协议传输和传输方式,允许客户
      
    
    </summary>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="ActiveMQ" scheme="https://yimchengjie.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
</feed>
