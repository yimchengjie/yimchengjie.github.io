<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycjBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhuyiting.xyz/"/>
  <updated>2019-10-29T14:28:10.857Z</updated>
  <id>https://zhuyiting.xyz/</id>
  
  <author>
    <name>yanchengjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>党的有关理论和习近平新时代中国特色社会主义思想</title>
    <link href="https://zhuyiting.xyz/2019/10/29/%E5%85%9A%E7%9A%84%E6%9C%89%E5%85%B3%E7%90%86%E8%AE%BA%E5%92%8C%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E6%80%9D%E6%83%B3/"/>
    <id>https://zhuyiting.xyz/2019/10/29/党的有关理论和习近平新时代中国特色社会主义思想/</id>
    <published>2019-10-29T13:17:49.000Z</published>
    <updated>2019-10-29T14:28:10.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="党的有关理论知识"><a href="#党的有关理论知识" class="headerlink" title="党的有关理论知识"></a>党的有关理论知识</h3><h4 id="端正入党动机"><a href="#端正入党动机" class="headerlink" title="端正入党动机"></a>端正入党动机</h4><h5 id="1-正确入党动机的内涵"><a href="#1-正确入党动机的内涵" class="headerlink" title="1. 正确入党动机的内涵"></a>1. 正确入党动机的内涵</h5><p>正确的入党动机,指争取入党的内在原因是忠诚地信仰共产主义,把最终实现共产主义社会制度作为自己的最高理想,决心为了壮丽的共产主义事业奋斗终生,全心全意的为人民服务,并随时准备为党和人民的利益牺牲一切.<br>入党,意味着要比群众多吃亏,争取入党就是要为党和人民的利益不怕吃亏.<br>入党,意味着比群众多挑重担,多做贡献.<br>入党,意味着比群众多做牺牲,争取入党就要有革命的自我牺牲精神.</p><h5 id="2-怎样端正入党动机"><a href="#2-怎样端正入党动机" class="headerlink" title="2. 怎样端正入党动机?"></a>2. 怎样端正入党动机?</h5><p>主要以下三个方面的内容:<br>第一,要有为共产主义和中国特色社会主义奋斗终身的坚定信念.<br>第二,要有全心全意为人民服务的思想.<br>第三,要有在生产,工作,学习和社会生活中起先锋模范作用的觉悟.</p><h4 id="党的基本理论知识"><a href="#党的基本理论知识" class="headerlink" title="党的基本理论知识"></a>党的基本理论知识</h4><h5 id="1-中国共产党性质"><a href="#1-中国共产党性质" class="headerlink" title="1. 中国共产党性质:"></a>1. 中国共产党性质:</h5><p>中国共产党是中国工人阶级的先锋队,同时是中国人民和中华民族的先锋队,是中国特色社会主义失业的领导核心,代表中国先进生产力的发展要求,代表中国先进文化的前进方向,代表中国最广大人民的根本利益.</p><h5 id="2-党的行动指南"><a href="#2-党的行动指南" class="headerlink" title="2. 党的行动指南:"></a>2. 党的行动指南:</h5><p>是以马克思列宁主义,毛泽东思想,邓小平理论和”三个代表”重要思想作为自己的行动指南</p><h5 id="3-党的最高理想和最终目标"><a href="#3-党的最高理想和最终目标" class="headerlink" title="3. 党的最高理想和最终目标:"></a>3. 党的最高理想和最终目标:</h5><p>实现共产主义</p><h5 id="4-党的基本路线"><a href="#4-党的基本路线" class="headerlink" title="4. 党的基本路线:"></a>4. 党的基本路线:</h5><p>领导和团结全国各族人民,以经济建设为中心,坚持四项基本原则,坚持改革开放,自力更生,艰苦创业,为把我国建设成为富强,民主,文明,和谐的社会主义现代化国家而奋斗.</p><h5 id="5-党的外交政策"><a href="#5-党的外交政策" class="headerlink" title="5. 党的外交政策:"></a>5. 党的外交政策:</h5><p>坚持独立自主的和平外交政策,维护我国的独立和主权,反对霸权主义和强权政治,维护世界和平,促进人类进步.</p><h5 id="6-党的四项基本原则"><a href="#6-党的四项基本原则" class="headerlink" title="6. 党的四项基本原则"></a>6. 党的四项基本原则</h5><p>坚持社会主义道路,坚持人民民主专政,坚持中国共产党的领导,坚持马克思列宁主义毛泽东思想</p><h5 id="7-党的建设必须坚决实现的四项基本要求"><a href="#7-党的建设必须坚决实现的四项基本要求" class="headerlink" title="7. 党的建设必须坚决实现的四项基本要求"></a>7. 党的建设必须坚决实现的四项基本要求</h5><p>(1)坚持党的基本路线,(2)坚持解放思想,实事求是,与时俱进,(3)坚持全心全意为人民服务,(4)坚持民主集中制</p><h5 id="8-党的工作路线"><a href="#8-党的工作路线" class="headerlink" title="8. 党的工作路线:"></a>8. 党的工作路线:</h5><p>一切为了群众,一切依靠群众,从群众中来,到群众中去,把党的正确主张变为群众的自觉行动</p><h5 id="9-党的最大优势"><a href="#9-党的最大优势" class="headerlink" title="9. 党的最大优势:"></a>9. 党的最大优势:</h5><p>密切联系群众</p><h5 id="10-党执政后的最大危险"><a href="#10-党执政后的最大危险" class="headerlink" title="10. 党执政后的最大危险:"></a>10. 党执政后的最大危险:</h5><p>脱离群众</p><h5 id="11-党员享有的八项权利"><a href="#11-党员享有的八项权利" class="headerlink" title="11. 党员享有的八项权利:"></a>11. 党员享有的八项权利:</h5><p>(1)参加党的有关会议,阅读党的有关文件,接收党的教育和培训<br>(2)在党的会议上和党报党刊上,参加关于党的政策问题的讨论<br>(3)对党的工作提出建议和倡议<br>(4)在党的会议上有根据的批评党的任何组织和任何党员,向党员负责的揭发,检举党的任何组织和任何党员违法乱纪的事实,要求处分违法乱纪的党员,要求罢免或撤换不称职的干部.<br>(5)行使表决权,选举权,有被选举权<br>(6)在党组织讨论决定对党员的党纪处分或作出鉴定时,本人有权参加和进行申辩,其他党员可以为他作证和辩护<br>(7)对党的决议和政策如有不同意见,在坚决执行的前提下,可以声明保留,并且可以把自己的意见向党的上级组织直至中央提出<br>(8)向党的上级组织直至中央给以负责的答复</p><h5 id="12-党员履行的八项义务"><a href="#12-党员履行的八项义务" class="headerlink" title="12. 党员履行的八项义务:"></a>12. 党员履行的八项义务:</h5><p>(1)认真学习马克思列宁主义,毛泽东思想,邓小平理论和”三个代表”重要思想,学习党的路线,方针,政策及决议,学习党的基本知识,学习科学,文化和业务知识,努力提高为人民服务的本领<br>(2)贯彻执行党的基本路线和方针,政策,带头参加改革开放和社会主义现代化建设,带动群众为经济发展和社会进步艰苦奋斗,在生产,工作,学习和社会生活中起先锋模范左右<br>(3)坚持党和人民的利益高于一切,个人利益服从党和人民的利益,吃苦在前,享受在后,克己奉公,多做贡献<br>(4)自觉遵守党的纪律,模范遵守国家的法律法规,严格保守党和国家的秘密,执行党的决定,服从组织分配,积极完成党的任务.<br>(5)维护党的团结和统一,对党忠诚老实,言行一致,坚决反对一切派别组织和小集团活动,反对阳奉阴违的两面派行为和一切阴谋诡计<br>(6)切实开展批评和自我批评,勇于揭露和纠正工作中的缺点,错误,坚决痛消极腐败现象做斗争<br>(7)密切联系群众,向群众宣传党的主张,即时同群众商量,即时向党反应群众的一件和要求,维护群众的正当利益<br>(8)发扬社会主义新风尚,提倡共产主义道德,为了保护国家和人民的利益,在一切困难和危险的时刻挺身而出,英勇斗阵,不怕牺牲.</p><h5 id="13-预备党员的权利"><a href="#13-预备党员的权利" class="headerlink" title="13. 预备党员的权利:"></a>13. 预备党员的权利:</h5><p>除了没有表决权,选举权和被选举权,其他和正式党员一样</p><h5 id="14-党员的党龄"><a href="#14-党员的党龄" class="headerlink" title="14. 党员的党龄:"></a>14. 党员的党龄:</h5><p>从预备期满转为正式党员之日算起.<br>党员如果没有正当理由连续六个月不参加党的组织生活,或不缴纳党费,或不做党所分配的工作,就认为是自行脱党</p><h5 id="15-党的民主集中制的基本原则是"><a href="#15-党的民主集中制的基本原则是" class="headerlink" title="15. 党的民主集中制的基本原则是:"></a>15. 党的民主集中制的基本原则是:</h5><p>党员个人服从党的组织,少数服从多数,下级组织服从上级组织,全党各个组织和全体党员服从党的全国代表大会和中央委员会.</p><h5 id="16-党的纪律处分有五种"><a href="#16-党的纪律处分有五种" class="headerlink" title="16. 党的纪律处分有五种:"></a>16. 党的纪律处分有五种:</h5><p>警告,严重警告,撤销党内职务,留党察看,开除党籍</p><h5 id="17-党的五个作风"><a href="#17-党的五个作风" class="headerlink" title="17. 党的五个作风:"></a>17. 党的五个作风:</h5><p>思想作风,工作作风,领导作风,学风,干部生活作风</p><h5 id="18-两个务必"><a href="#18-两个务必" class="headerlink" title="18. 两个务必:"></a>18. 两个务必:</h5><p>(1)务必继续地保持谦虚,谨慎,不骄,不躁的作风<br>(2)务必继续保持艰苦奋斗的作风</p><h5 id="19-四个人格形象"><a href="#19-四个人格形象" class="headerlink" title="19. 四个人格形象:"></a>19. 四个人格形象:</h5><p>诚实守信的人格形象,<br>公道正派的人格形象,<br>清正廉洁的人格形象,<br>敬业奉献的人格形象.</p><h5 id="20-四个高度认同"><a href="#20-四个高度认同" class="headerlink" title="20. 四个高度认同:"></a>20. 四个高度认同:</h5><p>对祖国的高度认同,<br>对中华民族的高度认同,<br>对中华文化的高度认同,<br>对中国社会主义的高度认同.</p><h5 id="21-四大纪律"><a href="#21-四大纪律" class="headerlink" title="21. 四大纪律:"></a>21. 四大纪律:</h5><p>政治纪律,<br>组织纪律,<br>经济工作纪律,<br>群众工作纪律.</p><h5 id="22-五种精神"><a href="#22-五种精神" class="headerlink" title="22. 五种精神"></a>22. 五种精神</h5><p>解放思想,实事求是;<br>紧跟时代,勇于创新;<br>艰苦奋斗,务求实效;<br>知难而进,一往无前;<br>淡泊名利,无私奉献.</p><h5 id="23-八个坚持-八个反对"><a href="#23-八个坚持-八个反对" class="headerlink" title="23. 八个坚持,八个反对"></a>23. 八个坚持,八个反对</h5><p>(1)坚持解放思想,实事求是,反对因循守旧,不思进取;<br>(2)坚持理论联系实际,反对照抄照搬、本本主义;<br>(3)坚持密切联系群众，反对形式主义、官僚主义;<br>(4)坚持民主集中制，反对独断专行、软弱涣散;<br>(5)坚持党的纪律，反对自由主义;<br>(6)坚持艰苦奋斗，反对享乐主义;<br>(7)坚持清正廉洁，反对以权谋私;<br>(8)坚持任人唯贤，反对用人上的不正之风.</p><h5 id="24-八项要求"><a href="#24-八项要求" class="headerlink" title="24. 八项要求"></a>24. 八项要求</h5><p>(1)要同党中央保持高度一致，不阳奉阴违、自行其是;<br>(2)要遵守民主集中制，不独断专行、软弱放任;<br>(3)要依法行使权力，不滥用职权、玩忽职守;<br>(4)要廉洁奉公，不接受任何影响公正执行公务的利益;<br>(5)要管好配偶、子女和身边工作人员，不允许他们利用本人的影响谋取私利;<br>(6)要公道正派用人，不任人唯亲、营私舞弊;<br>(7)要艰苦奋斗，不奢侈浪费、贪图享受;<br>(8)要务实为民，不弄虚作假、与民争利.</p><h5 id="25-科学发展观的具体内容包括"><a href="#25-科学发展观的具体内容包括" class="headerlink" title="25. 科学发展观的具体内容包括:"></a>25. 科学发展观的具体内容包括:</h5><p>第一要义是发展,<br>核心是以人为本,<br>基本要求是全面协调可持续,<br>根本方法是统筹兼顾.</p><h4 id="发展党员的程序和手续"><a href="#发展党员的程序和手续" class="headerlink" title="发展党员的程序和手续"></a>发展党员的程序和手续</h4><p>（1）要求入党的人自愿向党组织提出入党申请；<br>（2）党组织接到申请入党人的申请书后，应及时研究能否列为入党积极分子；<br>（3）申请入党人被列为入党积极分子后，党组织即应落实对其培养教育和考察的措施；<br>（4）入党积极分之经一年以上的培养教育和考察后，党组织要研究能否确定为发展对象；<br>（5）入党积极分子被确定为发展对象后，党组织要对其进行政治审查；<br>（6）党组织在进行政治审查的同时，要征求党内外群众对发展对象的意见；<br>（7）党组织在接受发展对象入党前，要对其进行入党前期短期集中培训；<br>（8）做完上述工作后，支部委员会要将发展对象的入党材料报上级党组织预审；<br>（9）经上级党组织预审同意后，支部委员会应通知发展对象确定两名正式党员作入党介绍人；<br>（10）入党介绍人或支部领导成员指导发展对象填写《入党志愿书》；<br>（11）支部委员会对《入党志愿书》进行审查，认为合格后，即可召开支部大会讨论，作出决议，并报上级党组织审批；<br>（12）上级党组织在批准申请人入党前要派人同他谈话，作进一步的了解；<br>（13）上级党组织召开委员会，在听取谈话人的汇报和组织部门的意见后，集体讨论审批<br>（14）被批准入党的预备党员接受党组织一年预备期的教育和考察；<br>（15）预备党员在预备期内要面向党旗进行入党宣誓；<br>（16）预备党员预备期满，主动向党组织提出转为正式党员的申请，党组织要及时讨论其能否转为正式党员。</p><h3 id="习近平新时代中国特色社会主义思想"><a href="#习近平新时代中国特色社会主义思想" class="headerlink" title="习近平新时代中国特色社会主义思想"></a>习近平新时代中国特色社会主义思想</h3><h4 id="八个明确"><a href="#八个明确" class="headerlink" title="八个明确"></a>八个明确</h4><p>第一，明确坚持和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国；</p><p>第二，明确新时代我国社会主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人民为中心的发展思想，不断促进人的全面发展、全体人民共同富裕；</p><p>第三，明确中国特色社会主义事业总体布局是“五位一体”、战略布局是“四个全面”，强调坚定道路自信、理论自信、制度自信、文化自信；</p><p>第四，明确全面深化改革总目标是完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化；</p><p>第五，明确全面推进依法治国总目标是建设中国特色社会主义法治体系、建设社会主义法治国家；</p><p>第六，明确党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队；</p><p>第七，明确中国特色大国外交要推动构建新型国际关系，推动构建人类命运共同体；</p><p>第八，明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，党是最高政治领导力量，提出新时代党的建设总要求，突出政治建设在党的建设中的重要地位。</p><h4 id="十四个坚持"><a href="#十四个坚持" class="headerlink" title="十四个坚持"></a>十四个坚持</h4><p>第一条，坚持党对一切工作的领导；</p><p>第二条，坚持以人民为中心；</p><p>第三条，坚持全面深化改革；</p><p>第四条，坚持新发展理念；</p><p>第五条，坚持人民当家作主；</p><p>第六条，坚持全面依法治国；</p><p>第七条，坚持社会主义核心价值体系；</p><p>第八条，坚持在发展中保障和改善民生；</p><p>第九条，坚持人与自然和谐共生；</p><p>第十条，坚持总体国家安全观；</p><p>第十一条，坚持党对人民军队的绝对领导；</p><p>第十二条，坚持“一国两制”和推进祖国统一；</p><p>第十三条，坚持推动构建人类命运共同体；</p><p>第十四条，坚持全面从严治党。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;党的有关理论知识&quot;&gt;&lt;a href=&quot;#党的有关理论知识&quot; class=&quot;headerlink&quot; title=&quot;党的有关理论知识&quot;&gt;&lt;/a&gt;党的有关理论知识&lt;/h3&gt;&lt;h4 id=&quot;端正入党动机&quot;&gt;&lt;a href=&quot;#端正入党动机&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="备忘录" scheme="https://zhuyiting.xyz/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>论市场化改革</title>
    <link href="https://zhuyiting.xyz/2019/10/24/%E8%AE%BA%E5%B8%82%E5%9C%BA%E5%8C%96%E6%94%B9%E9%9D%A9/"/>
    <id>https://zhuyiting.xyz/2019/10/24/论市场化改革/</id>
    <published>2019-10-24T12:42:13.000Z</published>
    <updated>2019-10-29T02:32:58.652Z</updated>
    
    <content type="html"><![CDATA[<h4 id="当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇"><a href="#当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇" class="headerlink" title="当前的市场化改革是否有助于挽救我国经济下滑趋势? 应该怎么样抓住市场化改革带来的巨大机遇?"></a>当前的市场化改革是否有助于挽救我国经济下滑趋势? 应该怎么样抓住市场化改革带来的巨大机遇?</h4><p>最近，<u>全球掀起了一阵降息潮，全球的经济环境普遍不太理想</u>，全球正在经历一轮新的经济周期调整。以10年为周期的金融危机再一次来临。中美的贸易摩擦对于中国金融市场的影响冲击也是巨大的，<u>人民币一度破7，持续的贬值导致国内资金外逃</u>，也导致了人民币国际化的步伐放缓。<br><font color="red">1.<em>[为什么经济不理想的时候要加息?加息为什么可以调整经济]</em><br>因为经济不理想(经济衰退)是市场投资不足(市场中流动的钱少了,都存银行了),政府为了刺激市场,减少银行利息,这样本来钱存在银行的一部分人就会因为收益少了,把钱投向市场中(股票或者消费),都会促进市场健康发展,使经济复苏<br>2.<em>[为什么人民币破7会导致国内资金外逃,人民币破7由什么导致,为什么人民币破7会阻碍人民币国际化?]</em><br>因为人民币破7是1美元兑换7块多人民币,而国际上以美元为主,本来6块多可以买到的东西,现在要多花钱才能买到,这样中国人不愿意买国外的东西(进口不利,因为变贵了).但是相反,中国更愿意卖东西了(出口有利).然后来自国外的资金,会因为人民币不值钱了(能换到的美元变少了)而减少对国内的投资(资本外逃).人民币的贬值是由于美元强势造成的(美国降息,资本都进入市场,经济强势)<br></font></p><p>2019年来，中国的经济形式总体仍延续着2018年的情况，我国经济增速下滑已是事实。由政府主导的央企在2000年后改革缓慢，各大原材料行业都亏损很大，产业的利润下滑非常严重，产能过剩，中国的供需关系面临着很大的结构性失衡，总体上低端产品产能过剩，高端产品产能不足。其次，我国低附加值、高功耗、高污染的产业比重很大；区域人口分布不合理，城镇化率低，导致发展不平衡；随着人口、土地、环境等这些红利慢慢的消失，<u>人工成本的上涨，土地价格的升高，环境的恶化，导致中低端产业较多</u>；我国经济的增长过多的依靠”<u>三驾马车</u>“，我国城乡收入差距大，行业收入差距大，居民贫富差距大。这些问题就会束缚经济的发展。<br><font color="red">1.<em>[为什么会导致中低端产业较多]</em><br>因为红利的消失会导致企业成本的增加,产品价格上涨,高端产品竞争力变弱(比如国产车和进口车一个价格, 选择国产车的人大大减少)<br>2.<em>[三驾马车是什么]</em><br>三驾马车是投资,消费,进口; 三驾马车是用来计算GDP的三部分,是经济发展的结果,不是根本动力. 根本动力是靠企业靠市场自我的健康发展.<br></font></p><p>当前的市场化改革，正式由习近平提出的供给侧结构性改革，<u>供给侧结构性改革，就是从提高供给质量出发，用改革的办法推进结构调整，矫正要素配置扭曲，扩大有效供给，提高供给结构对需求变化的适应性和灵活性，提高全要素生产率</u>，更好满足广大人民群众的需要，促进经济社会持续健康发展。<br><font color="red">1.<em>[解释一下供给侧结构性改革]</em><br>供给侧结构性改革就是强调供给方(也就是企业),能够制造出物美价廉的商品,怎么改呢呢? 通过改革,减少税收,降低土地价格,给予政策福利支持等<br></font></p><p>强调供给侧改革，从生产、供给入手，调整供应结构，才能使经济健康稳固发展。提升居民消费以及当前的供给侧改革并不能完全改变经济下滑趋势，<u>还必须打通供给以及需求，这一层中间地带</u>，一是政府对企业的税收以及居民的社保缴费高，让企业无法生产，市场需求低。二是垄断性国企占有太多的社会资源而效率又太低，靠价格垄断生存，抬高了整个市场的生产成本，比如油价，房价。<br><font color="red">1.<em>[为什么中间地带很重要]</em><br>中间地带是商品产出到消费者买入之间的地带,是企业或者消费者,在商品之外承担的费用,比如企业的税,居民的五险一金. 企业会把这些费用加到商品的价格上或者自己承担损失, 居民手上钱少, 消费降低, 都不利于经济健康发展<br></font></p><p>供给侧结构性改革自2015年提出以后，其主要任务也在不断变化。最初的“<u>三去一降一补</u>”，通过关、停、并、转等方式去掉多余产能，稳定房价去房地产库存，去杠杆减少政府债务，降低企业各项成本，补充生态建设、完善产业链。<br><font color="red">1.<em>[三去一降一补]</em><br>去产能,去库存,去债务,降成本,补生态产业链<br></font></p><p>当前不仅需要优化供给，提高内需，还要解决供给与需求的中间地带，做好减税降费，优化市场生态。供给侧结构性改革是利好于我国经济发展的，在贸易战加剧，逆全球化回溯的国际背景下，我国的供给侧结构性改革要结合一带一路，深化与沿线国家的合作，强化和欧洲，拉美地区国家的科技合作，扩大开放，将中国制造带出国。</p><p>我国要吸取日本经济发展的教训，20世纪后期，日本大力发展建设，逐渐陷入了失控的建设狂奔，建设业创造了庞大的就业机会，并非来自于真正的经济增长，<u>而是人为制造出的就业机会。这大大削弱并延缓了日本高技术产业的发展</u>，但这种失控的建设无法停止，因为一旦停止公共建设，就会出现大量失业。更严重的是，公共建设积累的巨大负债让日本难堪重负。<u>日本的房价泡沫也重创了日本实体工业的发展，泡沫的破灭导致了大量企业倒闭，失业率狂升</u>。当下的日本，也还没有完全走出当年的阴影。日本经济衰退的20年，主要原因就是日本政府对经济把控出现了失误，制定了违背经济规律的政策。<br><font color="red">1.<em>[为什么这会阻碍日本高科技产业发展?]</em><br>因为大量的人口资金投入到了基础建设业,相应的高科技产业就会没钱没人<br>2.<em>[房价的泡沫破裂为什么影响这么大?]</em><br>房价泡沫破灭, 高价买地的开发商,会破产,很多大企业也会因为投资房地产而大出血,这会让市场严重下跌,这样所有人手上的资产都贬值了,同时企业大量倒闭,失业率也会大大提高,已经买房的人失业后也还要承担巨额贷款.整个国家的经济都会受损,日本房价泡沫当时特别高,政府为了防止泡沫更高影响更恶劣,采取了主动刺破的措施.单也还是经济大衰退<br></font><br>我国可以从日本的经济发展的教训中收益到：房地产不能长久作为支柱产业，必须防止货币超发和过度升值，在宏观调控上，政府不能过于频繁也不能过紧过松，政策引导着眼长远，统筹兼顾。<br>面对经济寒冬，我们个人也需要重视，不要觉得离我们很遥远，面对危机，我们要留好资金，节约开销，努力工作，提升个人能力。<br>我国的市场化改革也会带来巨大的机遇，站在风口上，猪都会飞。乱世出英雄，变革带来的巨大机遇可能产生意想不到的风云人物，不过代价也是巨大的，在改革中，抓住机会很重要，不过我们需要做好充足的准备，机会总是留给有准备的人。能力上的准备，思想上的准备，以及恰到好处的机会。<br>在危机来临初期持有货币，<u>在危机崩溃期买入资产，在政体调控收缩货币时期再次抛售就能获利了</u>，但这其中随便哪一步出错，都会损失惨重，即使每一个环节都准确无误，也可能因为突如其来的不可抗力，导致整个投资计划的泡汤。比如限购限售，比如失业，比如投资企业破产。<u>在危机时期，不要轻易触碰杠杆加大交易规模</u>，其次要勤于学习，要对未来的风险做准备。<br><font color="red">1.<em>[为什么在危机崩溃期买入资产，在政体调控收缩货币时期再次抛售就能获利了?]</em><br>通俗点说就是在商品最便宜的时候买进。接下来商品会因为市场规律或者政府调控回升。但是政府为了控制物价（控制通货膨胀），会加息，钱流进银行，商品需求变小。在政府调控的时候，可以看成物价比较理想（高）的时候。这时候卖出。获利就很客观（差价最大的时候）<br>2.<em>[为什么不要触碰杠杆]</em><br>触碰杠杆可以理解为贷款,因为在经济危机时期,银行出于安全考虑不可能把大量的钱借给你, 所以只能贷到很少的钱,而钱越少,承受意外的能力越低,而且贷款需要抵押,(房子或者股票,在危机时期看不到底,随时会被银行卖掉,因为银行不可能等你房子不值钱了再卖,那就失去了抵押的意义),而银行低价卖出也会导致市场供大于求,进一步下跌. 而你通过贷款买入的资产也可能会进一步下跌.很容易破产<br></font><br>在宏观经济下滑的趋势下，要合理分配资产，综合来看2019年上半年的投资者大多以<u>黄金、比特币为代表的避险资产</u>，这些产品或者说是资产的价格也一直在上高，在国际范围中，各大央行实行降息政策，促进经济发展的前提下，黄金和比特币的抗通胀能力就展现出来了。<u>但千万不能在不了解的情况下，进行投资。</u><br><font color="red">1.<em>[为什么黄金,比特币是避险资产?]</em><br>因为他们都有共同属性,价值不受政府调控影响(因为总量固定,且没法造假).这样不管经济怎么样,黄金比特币本来能换多少米还是能换多少米.举例:比如一块黄金本来换一代米,一百块也能换一袋米,但是经济变化,一百块只能买半袋米了,但是一快黄金还是能买一袋米.<br>2.<em>[为什么不了解不能投资呢]</em><br>正式因为他们总量固定 ,他们会被资本炒作,比如大量买入造成供不应求,价格高了以后再高价卖出, 不了解就很可能成了韭菜,承担了这部分人造差价<br></font><br>改革初期，商品紧缺，供不应求，是暴利的时代，后来，电子商务兴起以及产能过剩，商家开启价格战，于是进入了薄利时期，而当前，我国正在转变，产品开始个性化、定制化、高端化，提高增值空间，从而进入厚利时代。<br>2019年下半年，<u>各大二线城市的抢人大战也已经偃旗息鼓，但一线新一线仍然对人才有着很高的需求。这意味着，宏观上的城市化进程将会放缓，大城市的自我迭代会深度展开</u>。其次我国股市长期以来以房地产与科技相关的驱动，目前的房价以稳为主，<u>投资的机会在科技类企业。</u><br><font color="red">1.<em>[为什么二线城市不抢人了?]</em><br>因为人才需要高薪,需要好的企业,而好的企业需要政策扶持,它才愿意来,二线城市没有这样的实力,相反,一线城市企业多,对于人才的需求也大,大城市的建设需要人才.<br>2.<em>[为什么说投资机会在科技类企业]</em><br>因为国家需要发展科技类企业来促进产业升级,政策的支持以及资金的流入,就会让科技类企业更健康的发展<br></font><br>在我国市场化改革的背景下，勤于学习，不多弥补知识盲区，扩充个人知识领域，才能知道更多有用的信息，见多识广的人，更能规避风险，才有更大的机会抓住机遇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇&quot;&gt;&lt;a href=&quot;#当前的市场化改革是否有助于挽救我国经济下滑趋势-应该怎么样抓住市场化改革带来的巨大机遇&quot; class=&quot;headerlink&quot; title=&quot;当前的市场化
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="备忘录" scheme="https://zhuyiting.xyz/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>TED不念过往,不惧将来</title>
    <link href="https://zhuyiting.xyz/2019/10/24/TED%E4%B8%8D%E5%BF%B5%E8%BF%87%E5%BE%80,%E4%B8%8D%E6%83%A7%E5%B0%86%E6%9D%A5/"/>
    <id>https://zhuyiting.xyz/2019/10/24/TED不念过往,不惧将来/</id>
    <published>2019-10-24T02:16:00.000Z</published>
    <updated>2019-10-24T14:19:31.012Z</updated>
    
    <content type="html"><![CDATA[<p><u>“These are the times” said Thomas Paine,”that try men’s souls.”</u><br>“这些时间考验着人们的灵魂”Thomas Paine说.<br><u>And they’re trying ours now.</u><br>现在它们在考验我们.<br><u>This is a fateful moment in the history of the West.</u><br>这是一个西方历史的命运时刻.<br><u>We’ve seen divisive elections and divided societies.</u><br>我们看到了分裂的选举和分裂的社会.<br><u>We’ve seen a growth of extremism in politics and religion,</u><br>我们看到了一群极端分子在政治上和宗教上,<br><u>all of it fueled by anxiety,uncertainty and fear,</u><br>所有的这些都是被焦虑,不确定和害怕所推动,<br><u>of a world that’s changing almost faster than we can bear,</u><br>因为世界几乎在以比我们能够承受的更快的速度在改变,<br><u>and the sure knowledge that it’s going to change faster still.</u><br>并且都知道它未来还会改变的这么快<br><u>I have a friend in Washington.</u><br>我有一个朋友在Washington<br><u>I asked him,what was it like being in America during the recent presidential election?</u><br>我问他,在最近的总统选举期间待在美国像是什么?<br><u>He said to me,”Well,it was like the man sitting on the deck of the Titanic with a glass of whiskey in his hand and he’s saying,’I know I asked for ice–,but this is ridiculous.’”</u><br>他告诉我,”哇,它就像一个人坐在泰坦尼克的甲板上,手里拿着威士忌说’我知道我要了冰,但这太疯狂了’”<br><u>So is there something we can do,each of us,to be able to face the future without fear?</u><br>所以有没有一些事我们每个人都可以做的,可以让我们能够对未来不感到恐惧?<br><u>I think there is.</u><br>我觉得是有的.<br><u>And one way into it is to see that perhaps the most simple way into a culture and into an age is to ask: What do people worship? </u><br>有一个方法 也许是最简单的方法 进入一个文化进入一个时代去问:人们崇拜什么?<br><u>People have worshipped so many different things–the sun,the stars,the storm.</u><br>人们过去崇拜很多不同的是–太阳,星型,风暴.<br><u>Some people worship many gods, some one,some none.</u><br>有些人崇拜很多神,有些人崇拜一个,有些人没有<br><u>In the 19th and 20th centuries,people worshipped the nation,the Aryan race,the communist state.</u><br>在19到20世纪,人们崇拜国家,崇拜Aryan种族,崇拜共产主义.<br><u>What do we worship?</u><br>那我们崇拜什么呢?<br><u>I think future anthropologists will take a look at the books we read on self-help,self-realization,self-esteem.</u><br>我觉得未来的人类学家会看看到我们读过的书,关于自我帮助,自我认识,自我尊重,<br><u>They’ll look at the way we talk about morality as being true to oneself, the way we talk about politics as a matter of individual rights,</u><br>他们会看我们谈论道德的行为当成对自己的正确,我们谈论政治的行为当成个人权利的问题.<br><u>and they’ll look at this wonderful new religious ritual we have created.</u><br>并且他们会看看这些很棒的我们创造的宗教利益</p><p><u>You know the one?</u><br>你知道那是什么嘛?<br><u>Called the “selfie”.</u><br>我们成为”自拍”.<br><u>And I think they’ll conclude that what we worship in our time is the self,the me,the I.</u><br>并且我觉得他们会得出结论 那就是我们在那时候崇拜的就是自我,是我<br><u>And this is great.</u><br>这是很棒的<br><u>It’s liberating.</u><br>这是自由的<br><u>It’s empowering.</u><br>这是有权利的.<br><u>It’s wonderful.</u><br>这是极好的.<br><u>But don’t forget that biologically,</u><br>但是不要在生物上忘了<br><u>we’re social animals.</u><br>我们是社交动物<br><u>We’ve spent most of our evolutionary history in small groups.</u><br>我们进化历史中的很多时间都花在小小的群体中<br><u>We need those face-to-face interactions,where we learn the choreography of altruism and where we create those spiritual goods like friendship and trust and loyalty and love that redeem our solitude.</u><br>我们需要面对面的交流,来学习利他主义并且创造精神上的就像友谊,信任,忠诚和爱的东西以此救赎我们的孤独.<br><u>When we have too much of the “I” and too little of the “we”,</u><br>当我们过于关注我的, 很少关注我们时,<br><u>we can find ourselves vulnerable,fearful and alone.</u><br>我们会发现有多点的,会恐惧的并且孤独的自己.<br><u>It was no accident that Sherry Turkle of MIT called the book she wrote on the impact of social media “Alone together”.</u><br>MIT的Sherry Turkle把他写的关于社交媒体的影响命名为”一起孤单”不是一个意外.<br><u>So I think the simplest way of safeguarding the future “you” is to strengthen the future “us” in three dimensions:</u><br>所以我认为,最简单的保障未来的”你”的方法就是从三个方面来加深未来的”我们”<br><u>the us of relationship,the us of identity and the us of responsibility.</u><br>我们的关系,我们的身份和我们的责任<br><u>So let me first take the us of relationship.</u><br>所以,首先让我谈谈我们的关系.<br><u>And here, forgive me if I get personal.</u><br>在这里,原谅我如果我谈自己的事.<br><u>Once upon a time,a very long time age,I was a 20-year-old undergraduate studying philosophy.</u><br>从前,很长一段时间之前,我是20岁的大学生在学习哲学.<br><u>I was into Nietzsche and Schopenhauer and Sartre and Camus.</u><br>我沉迷于Nietzsche,Schopenhauer,Sartre和Camus<br><u>I was full of ontological uncertainty and existential angst.</u><br>我充满了本体论的不确定性和存在的焦虑<br><u>It was terrific.</u><br>那是极好的.<br><u>I was self-obsessed and thoroughly unpleasant to know,</u><br>我是自恋的并且感到非常厌恶,<br><u>until one day I saw, across the courtyard, a girl who was everything that I wasn’t.</u><br>直到有一天我看到,穿过这院子,一个女孩一切都和我不一样.<br><u>She radiated sunshine.</u><br>她散发着阳光.<br><u>She emanated joy.</u><br>她散发着快乐.<br><u>I found out her name was Elaine.</u><br>我找到她的名字是Elaine.<br><u>We met,We talked,We married.</u><br>我们见面,我们聊天,我们结婚.<br><u>And 47 years,three children and eight grandchildren later,</u><br>47年 有了3个小孩,8个孙子 以后<br><u>I can safely say it was the best decision I ever took in my life,</u><br>我可以说,那是我生命中做的最好的决定.<br><u>because it’s the people not like us that make us grow.</u><br>因为和我们不一样的人会让我们成长.<br><u>And that is why I thik we have to do just that.</u><br>这就是为什么我认为我们必须这样做.<br><u>The trouble with Google filters,Facebook friends and reading the news by narrowcasting rather than broadcasting means that we’re surrounded almost entirely by people like us whose views,whose opinions,whose prejudices,even, are just like ours.</u><br>谷歌过滤,脸书朋友圈以及阅读新闻通过很窄的渠道而不是广播这些麻烦意味着我们几乎完全被那些观点,想法,甚至成见和我们的一样的人包围着.<br><u>And Cass Sunstein of Harvard has shown that if we surround ourselves with people with the same views as us,we get more extreme.</u><br>哈弗的Cass Sunstein展示了如果我们被那些观点和我们一样的自己人包围,我们会变得极端<br><u>I think we need to renew those face-to-face encounters with the people not like us.</u><br>我认为我们需要重新和那些跟我们不一样的人面对面的接触.<br><u>I think we need to do that in order to realize that we can disagree strongly and yet still stay friends.</u><br>我认为我们需要这样做,为了我们能意识到强烈地争执也仍然可以当朋友.<br><u>It’s in those face-to-face encounters that we discover that the people not like us are just people like us.</u><br>在面对面的接触中我们发现那些和我们不同的人就是和我们一样的人<br><u>And actually, every time we hold out the hand of friendship to somebody not like us,whose class or creed or color are different from ours,</u><br>事实上,每一次,我们向那些和我们有不一样种族或者不一样信条或者不一样的肤色的人伸出友谊的手,<br><u>we heal one of the fractures of our wounded world.</u><br>我们治愈了我们破裂世界的一刀伤痕.<br><u>That is the us of relationship.</u><br>这就是我们的关系.<br><u>Second is the us of identity.</u><br>第二点是我们的身份.<br><u>Let me give you a thought experiment.</u><br>让我给你做个思维实验.<br><u>Have you been to Washington?</u><br>你去过Washington嘛?<br><u>Have tou seen the memorials?</u><br>你看过纪念碑嘛?<br><u>Absolutely fascinating.</u><br>绝对让人神魂颠倒.<br><u>There’s the Lincoln Memorial:Gettysburg Address on one side,Second Inaugural on the other.</u><br>在林肯纪念碑,一边是Gettysburg演说,另一边是Inaugural.<br><u>You go to the Jefferson Memorial,screeds of text.</u><br>你去Jefferson纪念碑,有一段话.<br><u>Martin Luther King Memorial,more than a dozen quotes from his speeches.</u><br>马丁路德金纪念碑,超过12条他演讲的引用.<br><u>I didn’t realize,in America you read memorials.</u><br>我不认为,你在美国会读这些纪念碑.<br><u>Now go to the equivalent in London in Parliament Square and you will see that the monument to David Lloyd George contains three words:David Lloyd George.</u><br>现在 一样去了伦敦的国会广场并且你会看到David Lloyd George的纪念碑上包含了三个单词:David Lloyd George.<br><u>Nelson Mandela gets two.</u><br>Nelson Mandela有两个<br><u>Churchill gets just one:Chuichill.</u><br>Churchill只有一个:Chuichill<br><u>Why the difference?</u><br>为什么会有这样的差异呢<br><u>I’ll tell you why the difference.</u><br>我来告诉你们为什么会有这样的差异.<br><u>Because America was from the outset a nation of wave after wave of immigrants,</u><br>因为美国是一个从一波又一波的移民开始的国家<br><u>so it had to create an identity which it did by telling a story which you learned at school, you read on memorials and you heard repeated in presidential inaugural addresses.</u><br>因此,它必须创造一个形象,那个形象可以通过你学校学到的故事,你在纪念碑上读到东西和你反复在总统开幕演讲中听到的故事来讲的.<br><u>Britain until recently wasn’t a nation of immigrants,</u><br>不列颠直到最近也不是一个移民国家,<br><u>so it could take identity for granted.</u><br>所以它可以认为形象是理所当然的.<br><u>The trouble is now that two tings have happened which shouldn’t have happened together.</u><br>麻烦的是现在两件不应该同时发生的事发生了.<br><u>The first thing is in the West we’ve stopped telling this story of who we are and why,even in America</u><br>第一件事是在西方,我们停止讲述我是谁还有为什么的故事了,甚至是美国<br><u>And at the same time,immigration is higher than it’s ever been before.</u><br>同时,移民人口变得比以前更高了.<br><u>So when you tell a story and your identity is strong,you can welcome the stranger,</u><br>因此,当你们讲述一个故事并且你们形象很强的时候,你们能欢迎那些陌生人<br><u>but when you stop telling the story,your identity gets weak and you fell threatened by the stranger.</u><br>但是,当你们停止讲述故事,你们的形象变弱了,并且你们感到了陌生人的威胁<br><u>And that’s bad.</u><br>那就糟了<br><u>I tell you,Jews have been scattered and dispersed and exiled for 2000 years.</u><br>我告诉你们,犹太人已经被分开,被分散并且被流亡了2000多年.<br><u>We never lost our identity.</u><br>我们从来没有失去我们的形象.<br><u>Why?Because at least once a year,on the festival of Passover,</u><br>为什么? 因为么每年至少一次,在Passover节<br><u>we told our story and we taught it to our children and we ate the unleavened bread of affliction and tasted the bitter herbs of slavery.</u><br>我们谈论我们的故事并且我们教它给我们的孩子,并且我们吃过还没发酵的苦的面包并且吃过奴隶制的苦.<br><u>So we never lost our identity.</u><br>所以我们从来没有丢失我们的形象.<br><u>I think collectively we’ve got to get back to telling our story,who we are,where we came from,what ideals by which we live.</u><br>我认为共同的,我们必须回到的我们的故事上来说,我们是谁,我们来自哪里,我们生活的理想是什么<br><u>And if that happens,we will become strong enough to welcome the stranger and say,</u><br>如果发生这样的事,我们会变得强壮的足够欢迎陌生人并且说<br><u>“Come and share our lives,share our stories,share our aspirations and dreams.”</u><br>“过来并且分享我们的生活,分享我们的故事,分享我们的愿望和梦想”.<br><u>That is the us of identity.</u><br>这就是我们的形象.<br><u>And finally,the us of responsibility.</u><br>最后,是我们的责任.<br><u>Do you know something?</u><br>你知道嘛?<br><u>My favorite phrase in all of politics,very American phrase,is:”We the people.”</u><br>我最喜欢的一句话在所有的政治言论中,一句非常美国的话,就是”我们人”<br><u>Why “we the people?”</u><br>为什么是”我们人”?<br><u>Because it says that we all share collective responsibility for our collective future.</u><br>因为它表达了我们分享所有集体的责任为了我们集体的未来.<br><u>And that’s how things really are and should be.</u><br>并且那就是应该有的样子<br><u>Have you noticed how magical thinking has taken over our politics?</u><br>你有没有注意到多少神奇的思想占据着我们的政治?<br><u>So we say, all you’ve got to do is elect this strong leader and he or she will solve all our problems for us.</u><br>因此我们说,我们都要去选一个强力的领导并且他会为我们解决我们的问题.<br><u>Believe me, that is magical thinking.</u><br>相信我,那是幻想.<br><u>And then we get the extremes:the far right,the far left,the extreme religious and extreme anti-religious,</u><br>当我们变得极端以后:极右,极左,极端宗教注意或者极端反宗教,<br><u>the far right dreaming of a golden age that never was,</u><br>极端的右派梦想着一个从未有过的黄金时代,<br><u>the far left dreaming of a utopia that never will be,</u><br>极端的左派梦想着一个从未出现过的乌托邦,<br><u>and the religious and anti-religious equally convinced that all it takes id God or the absence of God to save us from ourselves.</u><br>宗教和反宗教同意相信上帝或者没有上帝来拯救我们.<br><u>That,too,is magical thinking,</u><br>这是非常神奇的想法.<br><u>because the only people who will save us from ourselves is we the people,all of us together.</u><br>因为可以拯救我们只有我们自己,所有的我们一起.<br><u>And when we do that,and when we move from the politics of me to the politics of all of us together,</u><br>并且当我们去做,当我们从我的政治中到所有的我们的政治中<br><u>we rediscover those beautiful,counterintuitive truths:</u><br>我们重新发现了那些美丽的,与直觉相反的事实:<br><u>that a nation is strong when it cares for the weak,</u><br>当一个国家关注弱者的时候它是强大的,<br><u>that it becomes rich when it cares for the poor,</u><br>当一个国家关心穷人的时候它是富裕的,<br><u>it becomes invulnerable when it cares about the vulnerable.</u><br>当一个国家开始关心那些有弱点的人的时候,它是无懈可击的.<br><u>That is what makes great nations.</u><br>这就是伟大的国家的形成.<br><u>So here is my simple suggestion.</u><br>因此,这有一个我的简单简易<br><u>It might just change your life,</u><br>它也许可以改变你的生活,<br><u>and it might just help to begin to change the world.</u><br>它也许可以帮助开始改变这个世界<br><u>Do a search and replace operation one the text of your mind,</u><br>做一个搜索和替换操作,一是你心中的文字,<br><u>and wherever you encounter the word “self”, substitute the word “other”.</u><br>并且无论在哪你遇到了单词”自己”,替换成单词”其他人”<br><u>So instead of self-help,other-help;</u><br>替代”自我帮助”为”他人帮助”<br><u>instead of self-esteem,other-esteem.</u><br>替代”自我尊重”为”他人尊重”<br><u>And if you do that,you will begin to fell the power of what for me is one of the most moving sentences in all of religious literature.</u><br>如果你这么做,你会开始感受到力量,这力量对我来说就是所有宗教文学中最动人的句子之一<br><u>“Though I walk through the valley of the shadow of death,I will fear no evil,for you are with me.”</u><br>虽然我在死亡的阴影的深渊里走,但是我不会害怕邪恶,因为你和我在一起<br><u>We can face any future without fear so long as we know we will not face it alone.</u><br>我们能够不害怕面对任何我们知道的我们不能独自面对的未来<br><u>So for the sake of the future “you”,together let us strengthen the future “us”.</u><br>为了未来的”你”,让我们一起加固未来的”我们”</p><p><u>Thank you.</u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;u&gt;“These are the times” said Thomas Paine,”that try men’s souls.”&lt;/u&gt;&lt;br&gt;“这些时间考验着人们的灵魂”Thomas Paine说.&lt;br&gt;&lt;u&gt;And they’re trying ours now.
      
    
    </summary>
    
    
      <category term="英语" scheme="https://zhuyiting.xyz/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="TED" scheme="https://zhuyiting.xyz/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>延期年金现值的计算</title>
    <link href="https://zhuyiting.xyz/2019/10/18/%E5%BB%B6%E6%9C%9F%E5%B9%B4%E9%87%91%E7%8E%B0%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
    <id>https://zhuyiting.xyz/2019/10/18/延期年金现值的计算/</id>
    <published>2019-10-18T01:56:00.000Z</published>
    <updated>2019-10-29T02:32:30.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="延期年金"><a href="#延期年金" class="headerlink" title="延期年金"></a>延期年金</h2><p>==延期年金==又称递延年金,是指在最初若干期没有收付款项的情况下,后面若干期有等额的系列收付款项的年金.<br>==延期年金现值计算==假定最初又m期没有收付款项,后面n期每年有等额的系列收付款项,则此延期年金的现值即为后n期年金先折现至n期期初(m期期末),再折现至第一期期初的现值.</p><p>==年金==是指定期定额的收付款项</p><p>==现值==成本或收益的价值以今天的现金来计量时,称为现值</p><p>==终值==是指现在某一时点上的一定量现金折合到未来的价值</p><ol><li>延期年金的==终值==大小和延期数m无关<br>所以延期m期之后的n期年金终值为<br>$ F=A\frac{(1+i)^n-1}{i} $</li><li>普通年金的==现值==计算<br>$ P=A\frac{1-\frac{1}{(1+i)^n}}{i}$</li><li>==延期年金==的现值计算<br>延期年金的现值与延期数m相关,m越长,现值越低.<ul><li>方法一:先当成n期普通年金,求出现值P1,在将P作为第m期终值,再折现到第一期的现值P2<br>$P1=A\frac{1-\frac{1}{(1+i)^n}}{i}$<br>$P2=P1\frac{1-\frac{1}{(1+i)^m}}{i} $</li><li>方法二:先计算m+n期现值,再减去m期年金现值<br>$P=A(\frac{1-\frac{1}{(1+i)^m(1+i)^n}}{i}-\frac{1-\frac{1}{(1+i)^m}}{i}) $</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;延期年金&quot;&gt;&lt;a href=&quot;#延期年金&quot; class=&quot;headerlink&quot; title=&quot;延期年金&quot;&gt;&lt;/a&gt;延期年金&lt;/h2&gt;&lt;p&gt;==延期年金==又称递延年金,是指在最初若干期没有收付款项的情况下,后面若干期有等额的系列收付款项的年金.&lt;br&gt;==延期年
      
    
    </summary>
    
    
      <category term="生活" scheme="https://zhuyiting.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活技巧" scheme="https://zhuyiting.xyz/tags/%E7%94%9F%E6%B4%BB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JVM指令手册</title>
    <link href="https://zhuyiting.xyz/2019/07/30/JVM%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
    <id>https://zhuyiting.xyz/2019/07/30/JVM指令手册/</id>
    <published>2019-07-30T07:18:00.000Z</published>
    <updated>2019-10-20T00:56:02.507Z</updated>
    
    <content type="html"><![CDATA[<p>栈和局部变量操作<br>将常量压入栈的指令<br>aconst_null 将null对象引用压入栈<br>iconst_m1 将int类型常量-1压入栈<br>iconst_0 将int类型常量0压入栈<br>iconst_1 将int类型常量1压入栈<br>iconst_2 将int类型常量2压入栈<br>iconst_3 将int类型常量3压入栈<br>iconst_4 将int类型常量4压入栈<br>iconst_5 将int类型常量5压入栈<br>lconst_0 将long类型常量0压入栈<br>lconst_1 将long类型常量1压入栈<br>fconst_0 将float类型常量0压入栈<br>fconst_1 将float类型常量1压入栈<br>dconst_0 将double类型常量0压入栈<br>dconst_1 将double类型常量1压入栈<br>bipush 将一个8位带符号整数压入栈<br>sipush 将16位带符号整数压入栈<br>ldc 把常量池中的项压入栈<br>ldc_w 把常量池中的项压入栈（使用宽索引）<br>ldc2_w 把常量池中long类型或者double类型的项压入栈（使用宽索引）<br>从栈中的局部变量中装载值的指令<br>iload 从局部变量中装载int类型值<br>lload 从局部变量中装载long类型值<br>fload 从局部变量中装载float类型值<br>dload 从局部变量中装载double类型值<br>aload 从局部变量中装载引用类型值（refernce）<br>iload_0 从局部变量0中装载int类型值<br>iload_1 从局部变量1中装载int类型值<br>iload_2 从局部变量2中装载int类型值<br>iload_3 从局部变量3中装载int类型值<br>lload_0 从局部变量0中装载long类型值<br>lload_1 从局部变量1中装载long类型值<br>lload_2 从局部变量2中装载long类型值<br>lload_3 从局部变量3中装载long类型值<br>fload_0 从局部变量0中装载float类型值<br>fload_1 从局部变量1中装载float类型值<br>fload_2 从局部变量2中装载float类型值<br>fload_3 从局部变量3中装载float类型值<br>dload_0 从局部变量0中装载double类型值<br>dload_1 从局部变量1中装载double类型值<br>dload_2 从局部变量2中装载double类型值<br>dload_3 从局部变量3中装载double类型值<br>aload_0 从局部变量0中装载引用类型值<br>aload_1 从局部变量1中装载引用类型值<br>aload_2 从局部变量2中装载引用类型值<br>aload_3 从局部变量3中装载引用类型值<br>iaload 从数组中装载int类型值<br>laload 从数组中装载long类型值<br>faload 从数组中装载float类型值<br>daload 从数组中装载double类型值<br>aaload 从数组中装载引用类型值<br>baload 从数组中装载byte类型或boolean类型值<br>caload 从数组中装载char类型值<br>saload 从数组中装载short类型值<br>将栈中的值存入局部变量的指令<br>istore 将int类型值存入局部变量<br>lstore 将long类型值存入局部变量<br>fstore 将float类型值存入局部变量<br>dstore 将double类型值存入局部变量<br>astore 将将引用类型或returnAddress类型值存入局部变量<br>istore_0 将int类型值存入局部变量0<br>istore_1 将int类型值存入局部变量1<br>istore_2 将int类型值存入局部变量2<br>istore_3 将int类型值存入局部变量3<br>lstore_0 将long类型值存入局部变量0<br>lstore_1 将long类型值存入局部变量1<br>lstore_2 将long类型值存入局部变量2<br>lstore_3 将long类型值存入局部变量3<br>fstore_0 将float类型值存入局部变量0<br>fstore_1 将float类型值存入局部变量1<br>fstore_2 将float类型值存入局部变量2<br>fstore_3 将float类型值存入局部变量3<br>dstore_0 将double类型值存入局部变量0<br>dstore_1 将double类型值存入局部变量1<br>dstore_2 将double类型值存入局部变量2<br>dstore_3 将double类型值存入局部变量3<br>astore_0 将引用类型或returnAddress类型值存入局部变量0<br>astore_1 将引用类型或returnAddress类型值存入局部变量1<br>astore_2 将引用类型或returnAddress类型值存入局部变量2<br>astore_3 将引用类型或returnAddress类型值存入局部变量3<br>iastore 将int类型值存入数组中<br>lastore 将long类型值存入数组中<br>fastore 将float类型值存入数组中<br>dastore 将double类型值存入数组中<br>aastore 将引用类型值存入数组中<br>bastore 将byte类型或者boolean类型值存入数组中<br>castore 将char类型值存入数组中<br>sastore 将short类型值存入数组中<br>wide指令<br>wide 使用附加字节扩展局部变量索引<br>通用(无类型）栈操作<br>nop 不做任何操作<br>pop 弹出栈顶端一个字长的内容<br>pop2 弹出栈顶端两个字长的内容<br>dup 复制栈顶部一个字长内容<br>dup_x1 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的两个字长的内容压入栈<br>dup_x2 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br>dup2 复制栈顶部两个字长内容<br>dup2_x1 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br>dup2_x2 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的四个字长的内容压入栈<br>swap 交换栈顶部两个字长内容<br>类型转换<br>i2l 把int类型的数据转化为long类型<br>i2f 把int类型的数据转化为float类型<br>i2d 把int类型的数据转化为double类型<br>l2i 把long类型的数据转化为int类型<br>l2f 把long类型的数据转化为float类型<br>l2d 把long类型的数据转化为double类型<br>f2i 把float类型的数据转化为int类型<br>f2l 把float类型的数据转化为long类型<br>f2d 把float类型的数据转化为double类型<br>d2i 把double类型的数据转化为int类型<br>d2l 把double类型的数据转化为long类型<br>d2f 把double类型的数据转化为float类型<br>i2b 把int类型的数据转化为byte类型<br>i2c 把int类型的数据转化为char类型<br>i2s 把int类型的数据转化为short类型<br>整数运算<br>iadd 执行int类型的加法<br>ladd 执行long类型的加法<br>isub 执行int类型的减法<br>lsub 执行long类型的减法<br>imul 执行int类型的乘法<br>lmul 执行long类型的乘法<br>idiv 执行int类型的除法<br>ldiv 执行long类型的除法<br>irem 计算int类型除法的余数<br>lrem 计算long类型除法的余数<br>ineg 对一个int类型值进行取反操作<br>lneg 对一个long类型值进行取反操作<br>iinc 把一个常量值加到一个int类型的局部变量上<br>逻辑运算<br>移位操作<br>ishl 执行int类型的向左移位操作<br>lshl 执行long类型的向左移位操作<br>ishr 执行int类型的向右移位操作<br>lshr 执行long类型的向右移位操作<br>iushr 执行int类型的向右逻辑移位操作<br>lushr 执行long类型的向右逻辑移位操作<br>按位布尔运算<br>iand 对int类型值进行“逻辑与”操作<br>land 对long类型值进行“逻辑与”操作<br>ior 对int类型值进行“逻辑或”操作<br>lor 对long类型值进行“逻辑或”操作<br>ixor 对int类型值进行“逻辑异或”操作<br>lxor 对long类型值进行“逻辑异或”操作<br>浮点运算<br>fadd 执行float类型的加法<br>dadd 执行double类型的加法<br>fsub 执行float类型的减法<br>dsub 执行double类型的减法<br>fmul 执行float类型的乘法<br>dmul 执行double类型的乘法<br>fdiv 执行float类型的除法<br>ddiv 执行double类型的除法<br>frem 计算float类型除法的余数<br>drem 计算double类型除法的余数<br>fneg 将一个float类型的数值取反<br>dneg 将一个double类型的数值取反<br>对象和数组<br>对象操作指令<br>new 创建一个新对象<br>checkcast 确定对象为所给定的类型<br>getfield 从对象中获取字段<br>putfield 设置对象中字段的值<br>getstatic 从类中获取静态字段<br>putstatic 设置类中静态字段的值<br>instanceof 判断对象是否为给定的类型<br>数组操作指令<br>newarray 分配数据成员类型为基本上数据类型的新数组<br>anewarray 分配数据成员类型为引用类型的新数组<br>arraylength 获取数组长度<br>multianewarray 分配新的多维数组<br>控制流<br>条件分支指令<br>ifeq 如果等于0，则跳转<br>ifne 如果不等于0，则跳转<br>iflt 如果小于0，则跳转<br>ifge 如果大于等于0，则跳转<br>ifgt 如果大于0，则跳转<br>ifle 如果小于等于0，则跳转<br>if_icmpcq 如果两个int值相等，则跳转<br>if_icmpne 如果两个int类型值不相等，则跳转<br>if_icmplt 如果一个int类型值小于另外一个int类型值，则跳转<br>if_icmpge 如果一个int类型值大于或者等于另外一个int类型值，则跳转<br>if_icmpgt 如果一个int类型值大于另外一个int类型值，则跳转<br>if_icmple 如果一个int类型值小于或者等于另外一个int类型值，则跳转<br>ifnull 如果等于null，则跳转<br>ifnonnull 如果不等于null，则跳转<br>if_acmpeq 如果两个对象引用相等，则跳转<br>if_acmpnc 如果两个对象引用不相等，则跳转<br>比较指令<br>lcmp 比较long类型值<br>fcmpl 比较float类型值（当遇到NaN时，返回-1）<br>fcmpg 比较float类型值（当遇到NaN时，返回1）<br>dcmpl 比较double类型值（当遇到NaN时，返回-1）<br>dcmpg 比较double类型值（当遇到NaN时，返回1）<br>无条件转移指令<br>goto 无条件跳转<br>goto_w 无条件跳转（宽索引）<br>表跳转指令<br>tableswitch 通过索引访问跳转表，并跳转<br>lookupswitch 通过键值匹配访问跳转表，并执行跳转操作<br>异常<br>athrow 抛出异常或错误<br>finally子句<br>jsr 跳转到子例程<br>jsr_w 跳转到子例程（宽索引）<br>rct 从子例程返回<br>方法调用与返回<br>方法调用指令<br>invokcvirtual 运行时按照对象的类来调用实例方法<br>invokespecial 根据编译时类型来调用实例方法<br>invokestatic 调用类（静态）方法<br>invokcinterface 调用接口方法<br>方法返回指令<br>ireturn 从方法中返回int类型的数据<br>lreturn 从方法中返回long类型的数据<br>freturn 从方法中返回float类型的数据<br>dreturn 从方法中返回double类型的数据<br>areturn 从方法中返回引用类型的数据<br>return 从方法中返回，返回值为void<br>线程同步<br>montiorenter 进入并获取对象监视器<br>monitorexit 释放并退出对象监视器</p><hr><p>JVM指令助记符<br>变量到操作数栈：iload,iload_,lload,lload_,fload,fload_,dload,dload_,aload,aload_<br>操作数栈到变量：istore,istore_,lstore,lstore_,fstore,fstore_,dstore,dstor_,astore,astore_<br>常数到操作数栈：bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_,lconst_,fconst_,dconst_<br>加：iadd,ladd,fadd,dadd<br>减：isub,lsub,fsub,dsub<br>乘：imul,lmul,fmul,dmul<br>除：idiv,ldiv,fdiv,ddiv<br>余数：irem,lrem,frem,drem<br>取负：ineg,lneg,fneg,dneg<br>移位：ishl,lshr,iushr,lshl,lshr,lushr<br>按位或：ior,lor<br>按位与：iand,land<br>按位异或：ixor,lxor<br>类型转换：i2l,i2f,i2d,l2f,l2d,f2d(放宽数值转换)<br>i2b,i2c,i2s,l2i,f2i,f2l,d2i,d2l,d2f(缩窄数值转换)<br>创建类实便：new<br>创建新数组：newarray,anewarray,multianwarray<br>访问类的域和类实例域：getfield,putfield,getstatic,putstatic<br>把数据装载到操作数栈：baload,caload,saload,iaload,laload,faload,daload,aaload<br>从操作数栈存存储到数组：bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore<br>获取数组长度：arraylength<br>检相类实例或数组属性：instanceof,checkcast<br>操作数栈管理：pop,pop2,dup,dup2,dup_xl,dup2_xl,dup_x2,dup2_x2,swap<br>有条件转移：ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpene,<br>if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne,lcmp,fcmpl<br>fcmpg,dcmpl,dcmpg<br>复合条件转移：tableswitch,lookupswitch<br>无条件转移：goto,goto_w,jsr,jsr_w,ret<br>调度对象的实便方法：invokevirtual<br>调用由接口实现的方法：invokeinterface<br>调用需要特殊处理的实例方法：invokespecial<br>调用命名类中的静态方法：invokestatic<br>方法返回：ireturn,lreturn,freturn,dreturn,areturn,return<br>异常：athrow<br>finally关键字的实现使用：jsr,jsr_w,ret</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;栈和局部变量操作&lt;br&gt;将常量压入栈的指令&lt;br&gt;aconst_null 将null对象引用压入栈&lt;br&gt;iconst_m1 将int类型常量-1压入栈&lt;br&gt;iconst_0 将int类型常量0压入栈&lt;br&gt;iconst_1 将int类型常量1压入栈&lt;br&gt;iconst_
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JVM" scheme="https://zhuyiting.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目搭建</title>
    <link href="https://zhuyiting.xyz/2018/12/16/Vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>https://zhuyiting.xyz/2018/12/16/Vue项目搭建/</id>
    <published>2018-12-16T11:39:42.000Z</published>
    <updated>2019-11-14T07:13:41.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue项目实战"><a href="#Vue项目实战" class="headerlink" title="Vue项目实战"></a>Vue项目实战</h2><p>做一个简单的Vue前端项目,练习与巩固知识点,做一个总结</p><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p>node环境<br>github+git项目管理</p><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><ol><li><p>在github上创建一个仓库,作为本次项目仓库<br>然后clone到本地</p></li><li><p>命令行工具初始化一个Vue项目<br>前提:先安装好vue脚手架(全局), 可以使用vue命令<br>进入项目根目录,然后执行<code>vue init webpack</code>初始化一个vue</p></li><li><p>尝试启动项目<br>运行<code>npm run dev</code>命令,访问成功,一个vue的demo创建完成</p></li></ol><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><strong>src项目源代码结构</strong><br>业务开发根目录<br><img src="/2018/12/16/Vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p><ul><li>main.js — 项目入口文件</li><li>App.vue — 项目原始根组件</li><li>router<ul><li>index.js — 项目路由</li></ul></li><li>components — 项目中的组件</li><li>assests — 项目中的图片资源文件</li></ul><p><strong>config配置文件夹</strong></p><ul><li>index.js — 基础配置文件</li><li>dev.env.js — 开发环境</li><li>prod.env.js — 上线环境</li></ul><p><strong>build项目打包的webpack的配置内容</strong><br>一般也不需要修改</p><h4 id="vue文件结构"><a href="#vue文件结构" class="headerlink" title=".vue文件结构"></a>.vue文件结构</h4><p>.vue是一种单文件组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue单组件文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件逻辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入fastclick第三方模块"><a href="#引入fastclick第三方模块" class="headerlink" title="引入fastclick第三方模块"></a>引入fastclick第三方模块</h4><p>引入fastclick包解决有些浏览器延迟300ms响应click事件的问题<br><code>npm install fastclick --save</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue项目实战&quot;&gt;&lt;a href=&quot;#Vue项目实战&quot; class=&quot;headerlink&quot; title=&quot;Vue项目实战&quot;&gt;&lt;/a&gt;Vue项目实战&lt;/h2&gt;&lt;p&gt;做一个简单的Vue前端项目,练习与巩固知识点,做一个总结&lt;/p&gt;
&lt;h4 id=&quot;前期准备&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue的Ajax(axios)</title>
    <link href="https://zhuyiting.xyz/2018/11/14/Vue%E7%9A%84Ajax-axios/"/>
    <id>https://zhuyiting.xyz/2018/11/14/Vue的Ajax-axios/</id>
    <published>2018-11-14T03:15:38.000Z</published>
    <updated>2019-11-14T03:36:06.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue的Ajax-axios"><a href="#Vue的Ajax-axios" class="headerlink" title="Vue的Ajax(axios)"></a>Vue的Ajax(axios)</h2><p>Vue推荐使用axios来完成ajax请求</p><p>Axios是一个基于Promise的HTTP库,可以在浏览器或者Node中使用</p><h3 id="简单的Axios实例"><a href="#简单的Axios实例" class="headerlink" title="简单的Axios实例"></a>简单的Axios实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  GET 请求远程图片</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br></pre></td></tr></table></figure><h4 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h4><p>axios.request(config)<br>axios.get(url[, config])<br>axios.delete(url[, config])<br>axios.head(url[, config])<br>axios.post(url[, data[, config]])<br>axios.put(url[, data[, config]])<br>axios.patch(url[, data[, config]])<br><strong>注意：</strong>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p><h4 id="请求结构"><a href="#请求结构" class="headerlink" title="请求结构"></a>请求结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">"/user"</span>,</span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">"get"</span>, <span class="comment">// 默认是 get</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">"https://some-domain.com/api/"</span>,</span><br><span class="line"></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="comment">//修改完后再提交</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="comment">// 修改完后再响应</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">"brackets"</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 "PUT", "POST", 和 "PATCH"</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">"Fred"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求花费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">"janedoe"</span>,</span><br><span class="line">    password: <span class="string">"s00pers3cret"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 "arraybuffer", "blob", "document", "json", "text", "stream"</span></span><br><span class="line">  responseType: <span class="string">"json"</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">"XSRF-TOKEN"</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class="line">  xsrfHeaderName: <span class="string">"X-XSRF-TOKEN"</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &amp;gt;= <span class="number">200</span> &amp;amp;&amp;amp; status &amp;lt; <span class="number">300</span>; <span class="comment">// 默认的</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "proxy" 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: <span class="string">"mikeymike"</span>,</span><br><span class="line">      password: <span class="string">"rapunz3l"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// `status`  HTTP 状态码</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.config);</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue的Ajax-axios&quot;&gt;&lt;a href=&quot;#Vue的Ajax-axios&quot; class=&quot;headerlink&quot; title=&quot;Vue的Ajax(axios)&quot;&gt;&lt;/a&gt;Vue的Ajax(axios)&lt;/h2&gt;&lt;p&gt;Vue推荐使用axios来完成ajax请
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由</title>
    <link href="https://zhuyiting.xyz/2018/11/02/Vue%E8%B7%AF%E7%94%B1/"/>
    <id>https://zhuyiting.xyz/2018/11/02/Vue路由/</id>
    <published>2018-11-02T02:51:54.000Z</published>
    <updated>2019-11-14T06:54:13.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><p>Vue路由允许我们通过不同的URL访问不同的内容<br>以前都是在服务端对路由进行划分,不同路由处理不同的请求<br>现在前端的路由可以实现在不重新请求页面的情况下,改变URL展示不同的页面内容</p><p>利用Vue.js + vue.router可以实现单页应用</p><h3 id="传统多页应用和单页应用对比"><a href="#传统多页应用和单页应用对比" class="headerlink" title="传统多页应用和单页应用对比"></a>传统多页应用和单页应用对比</h3><p><strong>多页应用</strong></p><ul><li><strong>优点</strong>: 首页响应快</li><li><strong>缺点</strong>: 页面切换慢</li></ul><p><strong>单页应用</strong></p><ul><li><strong>优点</strong>: js动态切换页面,无需再请求html文件</li><li><strong>缺点</strong>: 首页加载慢</li></ul><h3 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue.router"></a>Vue.router</h3><p><code>vue.router</code>是Vue官方的路由插件<br>路由引入的就是模板</p><h4 id="lt-rout-link-gt"><a href="#lt-rout-link-gt" class="headerlink" title="&lt;rout-link&gt;"></a><code>&lt;rout-link&gt;</code></h4><p>使用<code>&lt;rout-link&gt;</code>标签,引入定义好的路由</p><h4 id="lt-router-view-gt"><a href="#lt-router-view-gt" class="headerlink" title="&lt;router-view&gt;"></a><code>&lt;router-view&gt;</code></h4><p><code>&lt;router-view&gt;</code>区域用来显示路由匹配到的组件</p><h3 id="路由的创建"><a href="#路由的创建" class="headerlink" title="路由的创建"></a>路由的创建</h3><p>定义路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>创建路由实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  routes:routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue路由&quot;&gt;&lt;a href=&quot;#Vue路由&quot; class=&quot;headerlink&quot; title=&quot;Vue路由&quot;&gt;&lt;/a&gt;Vue路由&lt;/h2&gt;&lt;p&gt;Vue路由允许我们通过不同的URL访问不同的内容&lt;br&gt;以前都是在服务端对路由进行划分,不同路由处理不同的请求&lt;br
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue实例详解</title>
    <link href="https://zhuyiting.xyz/2018/10/20/Vue%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>https://zhuyiting.xyz/2018/10/20/Vue实例详解/</id>
    <published>2018-10-20T02:20:51.000Z</published>
    <updated>2019-11-14T06:21:17.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue属性"><a href="#Vue属性" class="headerlink" title="Vue属性"></a>Vue属性</h2><p>每一个Vue实例都拥有一些属性，比如之前的<code>el</code>、<code>data</code>、<code>methods</code>等<br>还有一些其他的属性</p><h4 id="el属性"><a href="#el属性" class="headerlink" title="el属性"></a>el属性</h4><p>用于绑定id，指示Vue的作用范围</p><h4 id="data属性"><a href="#data属性" class="headerlink" title="data属性"></a>data属性</h4><p>Vue的数据属性，用来定义Vue中的数据</p><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><p>方法属性，一般的逻辑方法都写在这里</p><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>计算属性，定义计算属性，也是函数方法，和methods类似，但是基于它的依赖缓存，可以说computed性能更好，但不需要缓存时，可以使用methods</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>监听属性，可以通过watch来响应数据的变化，每当监听的变量改变，就调用方法函数</p><h4 id="components"><a href="#components" class="headerlink" title="components"></a>components</h4><p>组件属性,用于注册组件<br>注意:在一个Vue实例内部注册的组件,只有这个Vue的作用范围内可以使用</p><h4 id="directives"><a href="#directives" class="headerlink" title="directives"></a>directives</h4><p>自定义指令<br>注意:在一个Vue实例内部注册的自定义指令,只有这个Vue的作用范围内可以使用</p><h2 id="Vue方法"><a href="#Vue方法" class="headerlink" title="Vue方法"></a>Vue方法</h2><p>Vue实例内部定义了8个方法,涵盖了一个Vue的生命周期</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>beforeCreate()<ul><li>Vue实例被创建后,但为空,内部数据和方法都还没有初始化</li></ul></li><li>created()<ul><li>内部数据和方法初始化已经完成</li></ul></li><li>beforeMount()<ul><li>Vue模板已经编译好,但还没有挂载到页面</li></ul></li><li>mounted()<ul><li>模板挂载完成</li></ul></li></ul><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><ul><li>beforeUpdate()<ul><li>页面的数据还是旧的数据,没有同步为最新的data数据</li></ul></li><li>updated()<ul><li>页面的数据已经更新到最新的data数据了</li></ul></li></ul><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><ul><li>beforeDestory()<ul><li>Vue即将销毁,但当前的数据和方法都还是可用状态</li></ul></li><li>destoryed()<ul><li>Vue已经销毁,所有数据和方法都不可用了</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue属性&quot;&gt;&lt;a href=&quot;#Vue属性&quot; class=&quot;headerlink&quot; title=&quot;Vue属性&quot;&gt;&lt;/a&gt;Vue属性&lt;/h2&gt;&lt;p&gt;每一个Vue实例都拥有一些属性，比如之前的&lt;code&gt;el&lt;/code&gt;、&lt;code&gt;data&lt;/code&gt;、&lt;co
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础</title>
    <link href="https://zhuyiting.xyz/2018/10/13/webpack%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhuyiting.xyz/2018/10/13/webpack基础/</id>
    <published>2018-10-13T06:22:50.000Z</published>
    <updated>2019-11-13T06:58:29.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p>webpack是一个现代的JavaScript应用程序的静态模块打包器,当webpack处理应用程序时,它会递归的构建一个依赖关系,然后将模块打包成一个或多个bundle<br>webpack有四个核心概念:entry,output,loader,plugins</p><ul><li>entry<br>entry(入口)之时webpack应该使用哪个模块,来作为构建内部依赖的开始<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个入口语法</span></span><br><span class="line"><span class="keyword">const</span> config=&#123;</span><br><span class="line">  entry:<span class="string">"./src/main.js"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象语法</span></span><br><span class="line"><span class="keyword">const</span> config=&#123;</span><br><span class="line">  app:<span class="string">"./src/main.js"</span>,</span><br><span class="line">  vendors:<span class="string">"./src/vendors.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>output<br>output属性会告诉webpack在哪里输出bundle,以及如何命名,默认设置./list<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config=&#123;</span><br><span class="line">  entry:<span class="string">"./src/main.js"</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">"bundle.js"</span>,</span><br><span class="line">    path:path.resolve(_dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>loader<br>loader让webpack可以处理那些非JavaScript的文件,例如开发ES6时,通过loader将ES6语法转成ES5<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: [</span><br><span class="line">          presets: [<span class="string">"env"</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>plugins<br>loader被用于转换某些类型的模块,而插件则可以做更多的事,包括打包优化,压缩,定义环境变量等等<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">// 用于访问内置插件 </span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="webpack基本配置"><a href="#webpack基本配置" class="headerlink" title="webpack基本配置"></a>webpack基本配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>, <span class="comment">// "production" | "development"</span></span><br><span class="line">  <span class="comment">// 选择 development 为开发模式， production 为生产模式</span></span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: [</span><br><span class="line">          presets: [<span class="string">"env"</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack新建项目"><a href="#webpack新建项目" class="headerlink" title="webpack新建项目"></a>webpack新建项目</h4><p>前提有node.js环境</p><ol><li>进入项目根目录执行npm init -y<br>创建默认package.json文件, -y表示使用默认配置</li><li>npm install webpack webpack-cli –save-dev<br>将webpack安装到本地项目,可以看到目录中会下载一些文件</li><li>新建项目结构<br><img src="/2018/10/13/webpack%E5%9F%BA%E7%A1%80/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="webpack项目结构"><br>app存放原始项目,public存放之后生成的浏览器可用的js代码,以及一个index.html</li><li>修改index.html文件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 之后webpack打包会生成的bundle.js --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写Geeter.js,改文件为项目文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> greet=<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">   greet.textContent=<span class="string">'Hello Webpack'</span>;</span><br><span class="line">   <span class="keyword">return</span> greet;</span><br><span class="line">   <span class="comment">// 随便写一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在main.js中引入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入js</span></span><br><span class="line"><span class="keyword">const</span> greeter=<span class="built_in">require</span>(<span class="string">'./Greeter'</span>)</span><br><span class="line"><span class="comment">// 查询id为root的标签,在这个标签中拼接Greeter返回的内容</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>).appendChild(greeter());</span><br></pre></td></tr></table></figure></li><li>打包webpack app/main.js -o public/bundle.js<br>注意webpack要全局安装<br>打包完,项目内就会出现bundle.js<br>在运行index.html就ok啦</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Webpack是一款前端的模块化打包工具,就像java可以把项目打包为jar,webpack可以将模块化的前端打包成一个js<br>webpack需要node.js的环境,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h4&gt;&lt;p&gt;webpack是一个现代的JavaScript应用程序的静态模块打包器,当webpack处理应用程序
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaScript" scheme="https://zhuyiting.xyz/tags/JavaScript/"/>
    
      <category term="webpack" scheme="https://zhuyiting.xyz/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件基础</title>
    <link href="https://zhuyiting.xyz/2018/09/30/Vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhuyiting.xyz/2018/09/30/Vue组件基础/</id>
    <published>2018-09-30T07:33:56.000Z</published>
    <updated>2019-11-14T01:06:08.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h4 id="1-什么是组件"><a href="#1-什么是组件" class="headerlink" title="1. 什么是组件"></a>1. 什么是组件</h4><p>组件是可重复使用的Vue实例,开发中可以把经常重复的功能封装为组件.<br>组件可以将整个页面尽显模块化分割.<br>组件分为全局组件和局部组件.</p><h4 id="2-基本实例"><a href="#2-基本实例" class="headerlink" title="2. 基本实例"></a>2. 基本实例</h4><p>全局组件的创建方式</p><ol><li>使用Vue.extend来创建全局的Vue组件 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    // 使用组件,直接把组件的名字以HTML标签形式引入</span><br><span class="line">    //注意: HTML大小写忽略,所以驼峰命名失效,要采用 xxx-xxx来代替xxxXxx</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-con1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-con1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 注册组件Vue.component('组件名称',组件对象)</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'myCon1'</span>,Vue.extend(&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用Vue.extend创建全局组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过template属性指定组件要展示的HTML结构</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是使用Vue.extend创建的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line">  )</span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;&#125;);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line"><span class="comment">//使用Vue.component函数创建组件,该函数有两个参数, 第一个是组件的名称,第二个是以对象的形式,描述一个组件</span></span><br><span class="line"><span class="comment">//因为组件是可复用的Vue实例,所以与new Vue接收相同的选项</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123; </span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-con3</span>&gt;</span><span class="tag">&lt;/<span class="name">my-con3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>在Vue实例外部定义组件,使用template标签,这种方式有代码提示,好用,推荐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 注册组件Vue.component('组件名称',组件对象)</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'myCon3'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用Vue.extend创建全局组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过template属性指定组件要展示的HTML结构</span></span></span><br><span class="line"><span class="actionscript">    template: <span class="string">'#tmp1'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;&#125;);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>局部组件,在Vue实例内部的components方法内创建,只有这个Vue实例可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-con</span>&gt;</span><span class="tag">&lt;/<span class="name">my-con</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>在Vue实例外部定义组件,使用template标签,这种方式有代码提示,好用,推荐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      myCon:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#tmp1'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意: 无论使用什么方式, 模板最外层只能用一个根标签包含</strong></p><h4 id="3-组件复用"><a href="#3-组件复用" class="headerlink" title="3. 组件复用"></a>3. 组件复用</h4><p>组件的优点在于重复利用<br>注意:复用组件内的data必须是一个函数,如果是一个对象,组件之间会相互影响(多个组件会共用一个对象),使用函-数会分别管理数据<br>vue提供component标签来有用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>在Vue实例外部定义组件,使用template标签,这种方式有代码提示,好用,推荐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"tmp1"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-组件之间的通信"><a href="#4-组件之间的通信" class="headerlink" title="4. 组件之间的通信"></a>4. 组件之间的通信</h4><p>组件也需要数据的通信,而vue中子组件默认无法访问父组件的数据</p><h5 id="父子组件之props"><a href="#父子组件之props" class="headerlink" title="父子组件之props"></a>父子组件之props</h5><p>props是一个单向的数据流,只允许父组件向子组件传值,可以是数值、字符、布尔值、数值、对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com1</span> <span class="attr">v-bind:parentmsg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">com1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; parentmsg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      msg:<span class="string">'hello'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      com1:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">"#tmp1"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义一个参数接收</span></span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'parentmsg'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组件基础&quot;&gt;&lt;a href=&quot;#组件基础&quot; class=&quot;headerlink&quot; title=&quot;组件基础&quot;&gt;&lt;/a&gt;组件基础&lt;/h2&gt;&lt;h4 id=&quot;1-什么是组件&quot;&gt;&lt;a href=&quot;#1-什么是组件&quot; class=&quot;headerlink&quot; title=&quot;1. 
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础</title>
    <link href="https://zhuyiting.xyz/2018/09/25/ES6%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhuyiting.xyz/2018/09/25/ES6基础/</id>
    <published>2018-09-25T06:06:54.000Z</published>
    <updated>2019-11-13T07:35:52.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6基础"><a href="#ES6基础" class="headerlink" title="ES6基础"></a>ES6基础</h2><p>ES6全称ECMAScript6.0 是JavaScript的下一个版本标准,但现在已经有很多浏览器支持了ES6</p><p>JavaScript只是Oracle公司注册的一个商标,它的正式名称就是ECMAScript</p><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><p>ES6新增了两个重要的关键字:<code>let</code>和<code>const</code><br><code>let</code>声明的变量只在let所在代码块有效<br><code>const</code>声明一个只读常量,不可修改</p><h4 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5中对变量的赋值</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">userName</span>: <span class="string">'aaaa'</span>, <span class="attr">password</span>: <span class="number">123456</span>&#125;</span><br><span class="line"><span class="keyword">var</span> userName = data.userName</span><br><span class="line"><span class="keyword">var</span> password = data.password</span><br><span class="line"><span class="built_in">console</span>.log(userName)</span><br><span class="line"><span class="built_in">console</span>.log(password)</span><br><span class="line"><span class="keyword">var</span> data1 = [<span class="string">'aaaa'</span>, <span class="number">123456</span>]</span><br><span class="line"><span class="keyword">var</span> userName1 = data1[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> password1 = data1[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(userName1)</span><br><span class="line"><span class="built_in">console</span>.log(password1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6中的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;userName, password&#125; = &#123;<span class="attr">userName</span>: <span class="string">'aaaa'</span>, <span class="attr">password</span>: <span class="number">123456</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(userName)</span><br><span class="line"><span class="built_in">console</span>.log(password)</span><br><span class="line"><span class="keyword">const</span> [userName1, password1] = [<span class="string">'aaaa'</span>, <span class="number">123456</span>]</span><br><span class="line"><span class="built_in">console</span>.log(userName1)</span><br><span class="line"><span class="built_in">console</span>.log(password1)</span><br></pre></td></tr></table></figure><h4 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h4><p>ES6 引入了模块化，其设计思想是在编译时就能确定模块的依赖关系，以及输入和输出的变量。<br>ES6 的模块化分为导出（export） 与导入（import）两个模块。</p><ul><li>import命令特性<ul><li><strong>只读</strong>:可以改写 import 变量类型为对象的属性值，不能改写 import 变量类型为基本类型的值。</li><li><strong>单例模式</strong></li><li><strong>静态执行模式</strong>:不支持import的值为变量或者表达式</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES6基础&quot;&gt;&lt;a href=&quot;#ES6基础&quot; class=&quot;headerlink&quot; title=&quot;ES6基础&quot;&gt;&lt;/a&gt;ES6基础&lt;/h2&gt;&lt;p&gt;ES6全称ECMAScript6.0 是JavaScript的下一个版本标准,但现在已经有很多浏览器支持了ES6&lt;/
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaScript" scheme="https://zhuyiting.xyz/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://zhuyiting.xyz/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue基本指令</title>
    <link href="https://zhuyiting.xyz/2018/09/15/Vue%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    <id>https://zhuyiting.xyz/2018/09/15/Vue基本指令/</id>
    <published>2018-09-15T11:40:33.000Z</published>
    <updated>2019-11-14T01:13:00.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue基本指令"><a href="#Vue基本指令" class="headerlink" title="Vue基本指令"></a>Vue基本指令</h2><h4 id="1-v-cloak"><a href="#1-v-cloak" class="headerlink" title="1:v-cloak"></a>1:v-cloak</h4><p>能够解决插值表达式闪烁问题</p><h4 id="2-v-text"><a href="#2-v-text" class="headerlink" title="2:v-text"></a>2:v-text</h4><p>和<code></code>功能一样,但是没有闪烁问题<br><code></code>可以在插值前后有内容,v-text会覆盖元素中原本的内容</p><h4 id="3-v-html"><a href="#3-v-html" class="headerlink" title="3:v-html"></a>3:v-html</h4><p>将数据已HTML格式输出</p><h4 id="4-v-bind"><a href="#4-v-bind" class="headerlink" title="4:v-bind"></a>4:v-bind</h4><p>v-bind: 是Vue中提供的用于绑定属性的指令<br>v-bind可以缩写为<code>:</code><br>用法:</p><ul><li>v-bind:title(需要绑定的属性)</li><li>可简写为:title(需要绑定的属性)</li><li>绑定元素设置class样式<ol><li>用数组<code>:class=&quot;[&#39;class1&#39;,&#39;class2&#39;]&quot;</code></li><li>三元表达式<code>:class=&quot;[&#39;class1&#39;,&#39;class2&#39;,flag?&#39;class3&#39;:&#39;&#39;]&quot;</code></li><li>数组中嵌套对象<code>:class=&quot;[&#39;class1&#39;,&#39;class2&#39;,{&#39;class3&#39;:boolean}]&quot;</code></li><li>直接使用对象<code>:class=&quot;{class1:true,class2:true,class3:false}&quot;</code>(可以在data中定义<code>classobj:{class1:true,class2:true,class3:false}</code>然后在属性中直接饮用<code>:class=&quot;classobj&quot;</code>)</li></ol></li></ul><h4 id="5-v-on"><a href="#5-v-on" class="headerlink" title="5:v-on"></a>5:v-on</h4><p>v-on:是Vue中提供的用于绑定事件的指令<br>v-on可以缩写为<code>@</code><br>用法:</p><ul><li>v-on:click=”show”<br>需要在Vue对象中定义show方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">method:&#123;</span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>时间修饰符<ol><li>.stop:阻止冒泡;</li><li>.prevent:阻止默认事件的发生;</li><li>.capture:捕获冒泡,有该修饰符的dom元素会先执行，如果有多个，从外到内依次执行，然后再按自然顺序执行触发的事件。 </li><li>.self:将事件绑定到自身,只有自身能被触发,通常用于避免冒泡事件的影响;</li><li>.once:设置事件只能触发一次,比如按钮的点击;</li><li>.passive:用于对DOM的默认事件进行性能优化,比如超出最大范围的滚动条滚动;</li><li>.native:把vue组件转化成一个普通的HTML标签,对普通的HTML标签是没有任何作用的;</li></ol></li></ul><h4 id="6-v-modle"><a href="#6-v-modle" class="headerlink" title="6:v-modle"></a>6:v-modle</h4><p>v-modle:是Vue中用于数据双向绑定的指令<br><strong>注意:</strong> <strong><em>只能运用在表单元素中</em></strong>    </p><p>v-bind只能实现数据单向绑定,从M=&gt;V</p><h4 id="7-v-for"><a href="#7-v-for" class="headerlink" title="7:v-for"></a>7:v-for</h4><p>v-for是循环迭代指令</p><ul><li>用法:<ol><li>迭代数组<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item i) in list"</span>&gt;</span></span><br><span class="line">          索引:&#123;&#123;i&#125;&#125;----姓名:&#123;&#123;item.name&#125;&#125;----年龄:&#123;&#123;item.age&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  ```    </span><br><span class="line">2. 迭代对象中的属性</span><br><span class="line">  ```html</span><br><span class="line">  <span class="comment">&lt;!-- 循环遍历对象的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(val,key,i) in list"</span>&gt;</span></span><br><span class="line">      &#123;&#123;val&#125;&#125;---&#123;&#123;key&#125;&#125;---&#123;&#123;i&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>迭代数字<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"i in 10"</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>v-for中key的使用注意(key相当于主键,是唯一的)<ol><li>v-for循环时,key属性只能用number或者string</li><li>key在使用的时候必须使用v-bind绑定来指定key的值</li></ol></li></ul><h4 id="8-v-if"><a href="#8-v-if" class="headerlink" title="8:v-if"></a>8:v-if</h4><p>v-if是条件渲染指令,v-if有更高的切换渲染开销.如果在运行时条件不太可能改变，则使用 v-if 较好.</p><ul><li>用法  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app-3"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">if</span>=<span class="string">"seen"</span>&gt;现在你看到我了&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-v-show"><a href="#9-v-show" class="headerlink" title="9:v-show"></a>9:v-show</h4><p>v-show有更高的初始渲染开销</p><ul><li>用法  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=<span class="string">"ifShow"</span>&gt;</span><br><span class="line">    show</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue基本指令&quot;&gt;&lt;a href=&quot;#Vue基本指令&quot; class=&quot;headerlink&quot; title=&quot;Vue基本指令&quot;&gt;&lt;/a&gt;Vue基本指令&lt;/h2&gt;&lt;h4 id=&quot;1-v-cloak&quot;&gt;&lt;a href=&quot;#1-v-cloak&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue概述</title>
    <link href="https://zhuyiting.xyz/2018/09/13/Vue%E6%A6%82%E8%BF%B0/"/>
    <id>https://zhuyiting.xyz/2018/09/13/Vue概述/</id>
    <published>2018-09-13T02:37:09.000Z</published>
    <updated>2019-11-13T02:42:44.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul><li>Vue.js是目前最火的前端框架,React是最流行的一个前端框架(React除了开发网站,还可以开发手机APP,Vue语法也可以用于手机开发,需要借助于Weex)</li><li>Vue.js是前端的主流框架之一,和Angular.js,React.js一起,并成为前端三大主流框架</li><li>Vue.js是一套构建用户界面的框架,<strong>只关注视图层</strong>,它易于上手,还便于第三方库或既有项目整合.(Vue有配套的第三方类库,可以整合起来做大型项目的开发)</li><li>前端的主要工作,负责MVC中的V层,主要工作就是制作前端页面效果.</li></ul><h3 id="为什么要学习前端框架"><a href="#为什么要学习前端框架" class="headerlink" title="为什么要学习前端框架"></a>为什么要学习前端框架</h3><ul><li>提高开发效率<ul><li>提高开发效率的发展历程:原生JS-&gt;jQuery类库-&gt;前端模板引擎-&gt;Angular.js/Vue.js(能够帮助我们减少不必要的DOM操作,提高渲染效率;双向数据绑带[通过框架提供的指令,前端程序员只需要关心业务逻辑,不必关心DOM是如何渲染了]);</li><li>在Vue.js中,一个核心的概念,就是让用户不再操作DOM元素,解放了用户的双手,让程序员可以更多的关注业务逻辑</li></ul></li></ul><h3 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h3><ul><li>框架: 是一套完整的解决方案;对项目的侵入性较大,项目如果需要更换框架,则需要重新架构整个项目.<ul><li>node中的express</li></ul></li><li>库: 提供某一个小功能,对项目的侵入性小,如果某个库无法完成某些需求,可以很容易的切换到其他库实现需求.</li></ul><h3 id="后端-Node-中的MVC与前端中的MVVM之间的区别"><a href="#后端-Node-中的MVC与前端中的MVVM之间的区别" class="headerlink" title="后端(Node)中的MVC与前端中的MVVM之间的区别"></a>后端(Node)中的MVC与前端中的MVVM之间的区别</h3><ul><li>MVC是后端的分层开发概念</li><li>MVVM是前端视图层的概念,主要关注与视图层分层,也就是说:MVVM把前端的视图层,把每个页面分成了M,V和VM层,VM是MVVM思想的核心,因为VM层是M与V之间的调度者.<ul><li>M保存的是每个页面中单独的数据</li><li>V就是每个页面的HTML结构</li><li>VM是一个调度者,分割了V和M,每当V层需要获取或保存数据的时候,都需要VM做中间处理.</li><li>前端页面使用MVVM的思想,主要是为了使开发更方便,VM提供了数据的双向绑定<br><img src="/2018/09/13/Vue%E6%A6%82%E8%BF%B0/MVC%E4%B8%8EMVVM.png" alt="mvc与mvvm"></li></ul></li></ul><h3 id="Vue中和MVVM之间的对应关系"><a href="#Vue中和MVVM之间的对应关系" class="headerlink" title="Vue中和MVVM之间的对应关系"></a>Vue中和MVVM之间的对应关系</h3>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1.导入Vue的包 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- MVVM中的V层 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- new的Vue实例,会控制这个元素中的内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 2.创建一个Vue的实例</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 当我们导入包之后,在浏览器的内存中,就多了一个Vue的构造函数</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 这个vue对象就是MVVM中的调度者</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 其中的date就是MVVM中的M 数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">              el:<span class="string">'#app'</span>, <span class="comment">//标书,当前我们new的这个vue实例,要控制页面上的哪个区域</span></span></span><br><span class="line"><span class="actionscript">              data:&#123; <span class="comment">//data属性中,存放的是el中要用到的数据</span></span></span><br><span class="line"><span class="actionscript">                  msg:<span class="string">"Hello Vue.js"</span> <span class="comment">//通过Vue提供的指令,很方便的就能把数据渲染到页面上,程序员不需要操作DOM元素了</span></span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;什么是Vue-js&quot;&gt;&lt;a href=&quot;#什么是Vue-js&quot; class=&quot;headerlink&quot; title=&quot;什么是Vue.
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="前端框架" scheme="https://zhuyiting.xyz/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue.js" scheme="https://zhuyiting.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>jQuery笔记</title>
    <link href="https://zhuyiting.xyz/2018/08/14/jQuery%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhuyiting.xyz/2018/08/14/jQuery笔记/</id>
    <published>2018-08-14T01:40:22.000Z</published>
    <updated>2019-11-14T01:43:12.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念:"></a>1. 概念:</h3><p>jQuery是一个优秀的JavaScript库,而非JavaScript,它是轻量级的库.</p><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><p>jQuery使用户能更方便的处理HTML、events、实现动画效果,并且方便的为网站提供Ajax交互,</p><h3 id="3-优势"><a href="#3-优势" class="headerlink" title="3. 优势"></a>3. 优势</h3><p>它的文档说明齐全,而且应用详细,同时还有很多成熟的插件可供选择</p><h3 id="4-核心概念"><a href="#4-核心概念" class="headerlink" title="4. 核心概念"></a>4. 核心概念</h3><p>write less,do more</p><h3 id="5-语法"><a href="#5-语法" class="headerlink" title="5. 语法"></a>5. 语法</h3><ul><li><strong>jQuery入口函数</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line">或者</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比JavaScript入口函数:</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>jQuery选择器</strong><blockquote><ol><li>元素选择器<br><code>$(&quot;p&quot;)</code></li><li>#id选择器<br><code>$(&quot;#id&quot;)</code></li><li>.class选择器<br><code>$(&quot;.class&quot;)</code></li></ol></blockquote></li><li><strong>DOM操作</strong>   </li></ul><p>捕获和设置</p><blockquote><ol><li><code>text()</code> - 设置或返回所选元素的文本内容</li><li><code>html()</code> - 设置或返回所选元素的内容(包含HTML标签)</li><li><code>val()</code> - 设置或返回表单字段的值 </li><li><code>attr()</code> - 获取属性</li></ol></blockquote><p>添加和删除HTML元素</p><blockquote><ol><li><code>append()</code> - 在被选元素的结尾插入内容</li><li><code>prepend()</code> - 在被选元素的开头插入内容</li><li><code>after()</code> - 在被选元素之后插入内容</li><li><code>before()</code> - 在被选元素之前插入内容</li><li><code>remove()</code> - 删除被选元素（及其子元素）</li><li><code>empty()</code> - 从被选元素中删除子元素</li></ol></blockquote><p>获取和操作CSS</p><blockquote><ol><li><code>addClass()</code> - 向被选元素添加一个或多个类</li><li><code>removeClass()</code> - 从被选元素删除一个或多个类</li><li><code>toggleClass()</code> - 对被选元素进行添加/删除类的切换操作</li><li><code>css()</code> - 设置或返回样式属性</li></ol></blockquote><p>遍历DOM树</p><blockquote><ol><li><code>parent()</code> - 方法返回被选元素的直接父元素。</li><li><code>parents()</code> - 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。</html></li><li><code>parentsUntil()</code> - 方法返回介于两个给定元素之间的所有祖先元素。</li><li><code>children()</code> - 方法返回被选元素的所有直接子元素。</li><li><code>find()</code> - 方法返回被选元素的后代元素，一路向下直到最后一个后代。</li><li><code>siblings()</code> - 方法返回被选元素的所有同胞元素。</li><li><code>next()</code> - 方法返回被选元素的下一个同胞元素。</li><li><code>nextAll()</code> - 方法返回被选元素的所有跟随的同胞元素。</li><li><code>nextUntil()</code> - 方法返回介于两个给定参数之间的所有跟随的同胞元素。</li><li><code>prev() , prevAll() , prevUntil()</code> - 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历）。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h2&gt;&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaScript" scheme="https://zhuyiting.xyz/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://zhuyiting.xyz/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>HTML5基础</title>
    <link href="https://zhuyiting.xyz/2018/08/13/HTML5%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhuyiting.xyz/2018/08/13/HTML5基础/</id>
    <published>2018-08-13T01:15:32.000Z</published>
    <updated>2019-11-14T01:42:23.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML5基础"><a href="#HTML5基础" class="headerlink" title="HTML5基础"></a>HTML5基础</h3><p>HTML5是最新的HTML标准</p><h4 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h4><ol><li>在HTML5中,添加了新的HTML标签,比如<code>&lt;article&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;section&gt;</code>等<ul><li><strong>section标签:</strong><br><code>&lt;section&gt;</code>表示文档中的一个区域.比如章节、页眉、页脚或文档中的其他部分,一般来说会包含一个标题<br>一般来说,一个<code>&lt;section&gt;</code>标签应该出现在文档大纲中.</li><li><strong>article标签:</strong><br><code>&lt;article&gt;</code>标签定义独立的内容,常用在论坛帖子,报纸文章,博客条目,用户评论等独立内容项目中.</li><li><strong>nav标签:</strong><br><code>&lt;nav&gt;</code>标签定义导航栏链接部分,描述一个包含多个链接的区域.</li><li><strong>header标签:</strong><br><code>&lt;header&gt;</code>标签定义文档页眉,通常是一些引导和导航信息</li><li><strong>footer标签:</strong><br><code>&lt;footer&gt;</code>标签定义section或document的页脚</li><li><strong>aside标签:</strong><br><code>&lt;aside&gt;</code>标签标示一个页与其余页面几乎无关的内容,表现为侧边栏或者嵌入内容</li><li><strong>figure标签:</strong><br><code>&lt;figure&gt;</code>标签规定独立的流(图片,图像,代码等)</li></ul></li></ol><h4 id="HTML视频音频"><a href="#HTML视频音频" class="headerlink" title="HTML视频音频"></a>HTML视频音频</h4><p>在以前,想要在网页上展示视频音频通常需要使用flash这样的插件,很麻烦,而HTML5中提供了音频视频的标准接口</p><h5 id="视频标签-lt-video-gt"><a href="#视频标签-lt-video-gt" class="headerlink" title="视频标签&lt;video&gt;"></a>视频标签<code>&lt;video&gt;</code></h5><p>video元素允许多个source子元素,可以链接不同的视频文件,浏览器自动使用第一个可使用的视频(用来引入多种格式以支持不同浏览器访问)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="视频字幕的使用"><a href="#视频字幕的使用" class="headerlink" title="视频字幕的使用"></a>视频字幕的使用</h5><p>在<code>&lt;video&gt;</code>标签中使用<code>&lt;track&gt;</code>元素引入字幕<code>.vtt</code>格式的字幕文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">"video_ch.vtt"</span>  <span class="attr">srclang</span>=<span class="string">"zh"</span> <span class="attr">kind</span>=<span class="string">"subtitles"</span> <span class="attr">label</span>=<span class="string">"中文"</span> <span class="attr">default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.vtt</code>内容格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WEBVTT</span><br><span class="line"> </span><br><span class="line">00:00:01.000 --&gt; 00:00:04.000</span><br><span class="line">Don&apos;t play games in class！</span><br><span class="line">00:00:05.000 --&gt; 00:00:09.000</span><br><span class="line">Study hard and make progress every day！</span><br></pre></td></tr></table></figure><h5 id="音频标签-lt-audio-gt"><a href="#音频标签-lt-audio-gt" class="headerlink" title="音频标签&lt;audio&gt;"></a>音频标签<code>&lt;audio&gt;</code></h5><p>audio标签也支持多种source子标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HTML5拖放"><a href="#HTML5拖放" class="headerlink" title="HTML5拖放"></a>HTML5拖放</h4><p>拖放是HTML标准的组成部分,任何元素都能进行拖放</p><ol><li>首先要定义元素的draggable属性为true,再加上全局处理事件函数ondragstart<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragstart</span>=<span class="string">"drag(event)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li>定义拖放数据<br>每个drag event都有一个dataTransfer属性保存事件数据,setData()方法添加一个项目的拖拽数据 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function drag(ev)&#123;</span><br><span class="line">    ev.dataTransfer.setData("Text",ev.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义一个放置区<br>ondragover事件规定了在哪里放置拖动的数据,默认阻止,我们要开启 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function allowDrop(ev) &#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>进行放置<br>放置被拖动数据时,会发生drop事件 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function drop(ev) &#123;</span><br><span class="line">    //调用 preventDefault() 来避免浏览器对数据的默认处理</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    //通过 dataTransfer.getData("Text") 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</span><br><span class="line">    var data = ev.dataTransfer.getData("Text");</span><br><span class="line">    //被拖数据是被拖元素的 id ("drag1"),把被拖元素追加到放置元素（目标元素）中</span><br><span class="line">    ev.target.appendChild(document.getElementById(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Canvas画布"><a href="#Canvas画布" class="headerlink" title="Canvas画布"></a>Canvas画布</h4><p>Canvas可以用于图形表示,图像绘制,游戏制作,,需要通过js控制来绘制</p><p>使用来操作HTML图形图标</p><h4 id="HTML5表单"><a href="#HTML5表单" class="headerlink" title="HTML5表单"></a>HTML5表单</h4><ul><li><p>datalist元素,使用 <code>&lt;datalist&gt;</code> 元素来为表单小部件提供建议的、自动完成的值，并使用一些 <code>&lt;option&gt;</code> 子元素来指定要显示的值。然后使用 list 属性将数据列表绑定到一个文本域(通常是一个 <code>&lt;input&gt;</code>元素)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"myColor"</span> <span class="attr">id</span>=<span class="string">"myColor"</span> <span class="attr">list</span>=<span class="string">"mySuggestion"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"mySuggestion"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"blue"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"green"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"yellow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>autocomplete属性规定表单是否应该启用自动完成功能,当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</p></li><li><p>form属性,适用所有input标签,让其可以在form域之外,但仍属于form的一部分.</p></li><li><p>multiple属性规定输入域可以选择多个值,适用于以下input:email和file</p></li><li><p>novalidate属性,规定在表单提交时不应该验证form域</p></li><li><p>pattern属性,指定正则表达式,用于验证</p></li><li><p>required属性规定提交时不能为空</p></li></ul><h4 id="HTML5输入类型"><a href="#HTML5输入类型" class="headerlink" title="HTML5输入类型"></a>HTML5输入类型</h4><ul><li>input-email类型,提交时自动验证</li><li>input-url类型,自动验证url域的值</li><li>input-number,允许设置最大最小值和数字间隔</li><li>input-range类型,显示为滑动条,也有最大最小值和数字间隔</li><li>input-Date Pickers时间选择器</li><li>input-search搜索域</li><li>input-color颜色选择器</li></ul><h4 id="Web-Storage本地存储"><a href="#Web-Storage本地存储" class="headerlink" title="Web Storage本地存储"></a>Web Storage本地存储</h4><p>由于Cookie的限制,HTML5支持了两种Web Storage:永久性的本地存储（localStorage）和会话级别的本地存储（sessionStorage）</p><h4 id="HTML5文件上传"><a href="#HTML5文件上传" class="headerlink" title="HTML5文件上传"></a>HTML5文件上传</h4><p>在 HTML4 标准中文件上传控件只接受一个文件，而在新标准中，只需要设置 multiple，就支持多文件上传。按住 Ctrl 或者 Shift 即可选择多个文件。<br><strong>可以限制文件的上传类型</strong><br>使用accept属性,使用accept接受一个逗号分隔的 MIME 类型字符串。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML5基础&quot;&gt;&lt;a href=&quot;#HTML5基础&quot; class=&quot;headerlink&quot; title=&quot;HTML5基础&quot;&gt;&lt;/a&gt;HTML5基础&lt;/h3&gt;&lt;p&gt;HTML5是最新的HTML标准&lt;/p&gt;
&lt;h4 id=&quot;HTML5新特性&quot;&gt;&lt;a href=&quot;#HT
      
    
    </summary>
    
    
      <category term="前端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="HTML5" scheme="https://zhuyiting.xyz/tags/HTML5/"/>
    
      <category term="HTML" scheme="https://zhuyiting.xyz/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Mybatis之动态SQL</title>
    <link href="https://zhuyiting.xyz/2018/07/25/SpringBoot-Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL/"/>
    <id>https://zhuyiting.xyz/2018/07/25/SpringBoot-Mybatis之动态SQL/</id>
    <published>2018-07-25T08:28:07.000Z</published>
    <updated>2019-11-14T02:02:37.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot-Mybatis之动态SQL"><a href="#SpringBoot-Mybatis之动态SQL" class="headerlink" title="SpringBoot+Mybatis之动态SQL"></a>SpringBoot+Mybatis之动态SQL</h3><p>在ssm项目中,使用xml文件利用标签,可以实现复杂的动态sql语句,那在SpringBoot+Mybatis项目下,注解的方式如何实现动态sql</p><h4 id="1-使用-lt-script-gt-标签包裹XML方式的语句"><a href="#1-使用-lt-script-gt-标签包裹XML方式的语句" class="headerlink" title="1. 使用&lt;script&gt;标签包裹XML方式的语句"></a>1. 使用<code>&lt;script&gt;</code>标签包裹XML方式的语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" &lt;script&gt; SELECT * FROM myuser "</span> +</span><br><span class="line">            <span class="string">" &lt;where&gt; "</span> +</span><br><span class="line">                <span class="string">" &lt;if test='uid!=null' &gt; "</span> +</span><br><span class="line">                    <span class="string">" uid=#&#123;uid&#125; "</span> +</span><br><span class="line">                <span class="string">" &lt;/if&gt; "</span> +</span><br><span class="line">                <span class="string">" &lt;if test='uname!=null' &gt; "</span> +</span><br><span class="line">                   <span class="string">" and uname like CONCAT('%',#&#123;uname&#125;,'%') "</span> +</span><br><span class="line">                <span class="string">" &lt;/if&gt; "</span> +</span><br><span class="line">                <span class="string">" &lt;if test='usex!=null' &gt; "</span> +</span><br><span class="line">                  <span class="string">" and usex=#&#123;usex&#125; "</span> +</span><br><span class="line">                <span class="string">" &lt;/if&gt; "</span> +</span><br><span class="line">            <span class="string">" &lt;/where&gt; "</span> +</span><br><span class="line">            <span class="string">" &lt;/script&gt; "</span>)</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; userInfo(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方式我们比较熟悉,但是用字符串包裹<code>&lt;script&gt;</code>语句就变得很复杂, 难以维护,所以不推荐, 这样的写法和XML的写法没有什么本质区别.</p><h4 id="2-在Mapper中创建内部类-构建sql"><a href="#2-在Mapper中创建内部类-构建sql" class="headerlink" title="2. 在Mapper中创建内部类,构建sql"></a>2. 在Mapper中创建内部类,构建sql</h4><p><code>@SelectProvider</code>等<code>@XXXProvider</code>注解允许我们指定一个类的方法来返回sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SelectProvider</span>(type = UserMapperProvider.class , method = <span class="string">"userInfo"</span>)</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; userInfo(User user);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UserMapperProvider</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">userInfo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">            StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            sql.append(<span class="string">" SELECT * FROM myuser where 1=1 "</span>);</span><br><span class="line">            <span class="keyword">if</span> (user.getUid() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sql.append(<span class="string">" AND uid=#&#123;uid&#125; "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (user.getUname() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sql.append(<span class="string">" AND uname like CONCAT('%',#&#123;uname&#125;,'%') "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (user.getUsex() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sql.append(<span class="string">" AND usex=#&#123;usex&#125; "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sql.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建内部类-使用结构化SQL方法"><a href="#3-创建内部类-使用结构化SQL方法" class="headerlink" title="3. 创建内部类,使用结构化SQL方法"></a>3. 创建内部类,使用结构化SQL方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SelectProvider</span>(type = UserMapperProvider.class , method = <span class="string">"userInfo"</span>)</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; userInfo(User user);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UserMapperProvider</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">userInfo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;&#123;</span><br><span class="line">                SELECT(<span class="string">" * "</span>);</span><br><span class="line">                FROM(<span class="string">" myuser "</span>);</span><br><span class="line">                <span class="keyword">if</span> (user.getUid() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    WHERE(<span class="string">" uid=#&#123;uid&#125; "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (user.getUname() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    WHERE(<span class="string">" uname like CONCAT('%',#&#123;uname&#125;,'%') "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (user.getUsex() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    WHERE(<span class="string">" AND usex=#&#123;usex&#125; "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><p><strong>方法1是XML语法的注解方式实现,方法2和方法3比较相似,可读性高,易于维护, 方法2适用面可能更广,而且更加接近我们熟悉的自然sql语法, 推荐使用方法2</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringBoot-Mybatis之动态SQL&quot;&gt;&lt;a href=&quot;#SpringBoot-Mybatis之动态SQL&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot+Mybatis之动态SQL&quot;&gt;&lt;/a&gt;SpringBoot+Myb
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaWeb框架" scheme="https://zhuyiting.xyz/tags/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="https://zhuyiting.xyz/tags/SpringBoot/"/>
    
      <category term="MyBatis" scheme="https://zhuyiting.xyz/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+MyBatis整合</title>
    <link href="https://zhuyiting.xyz/2018/07/12/SpringBoot-MyBatis%E6%95%B4%E5%90%88/"/>
    <id>https://zhuyiting.xyz/2018/07/12/SpringBoot-MyBatis整合/</id>
    <published>2018-07-12T06:25:16.000Z</published>
    <updated>2019-11-14T02:02:34.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot-MyBatis整合"><a href="#SpringBoot-MyBatis整合" class="headerlink" title="SpringBoot+MyBatis整合"></a>SpringBoot+MyBatis整合</h3><p>以往我们需要用到MyBatis时,需要繁琐的xml配置,而且很容易造成spring和mybatis的jar冲突, 非常麻烦<br>而在SpringBoot下,只需要添加mybatis的starter启动器,就能很方便的和spring整合了,无需xml配置</p><h4 id="1-添加mybatis的starter包"><a href="#1-添加mybatis的starter包" class="headerlink" title="1. 添加mybatis的starter包"></a>1. 添加mybatis的starter包</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-在application-properties中添加数据源"><a href="#2-在application-properties中添加数据源" class="headerlink" title="2. 在application.properties中添加数据源"></a>2. 在application.properties中添加数据源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis.type-aliases-package=com.ycj.entity</span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/ssmdemo?characterEncoding=utf8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br></pre></td></tr></table></figure><p>springboot会自动加载application.properties然后注入DateSource类中</p><h4 id="3-在springboot启动类上添加Mapper包的扫描注解"><a href="#3-在springboot启动类上添加Mapper包的扫描注解" class="headerlink" title="3. 在springboot启动类上添加Mapper包的扫描注解"></a>3. 在springboot启动类上添加Mapper包的扫描注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.ycj.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootApplicationMain</span></span></span><br></pre></td></tr></table></figure><p>注意:也可以在每一个mapper接口上添加<code>@Mapper</code>注解, 不过比较麻烦,并且容易遗漏. 推荐直接扫描包</p><h4 id="4-添加mapper接口-并用注解实现"><a href="#4-添加mapper接口-并用注解实现" class="headerlink" title="4. 添加mapper接口,并用注解实现"></a>4. 添加mapper接口,并用注解实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" SELECT * FROM myuser WHERE uname Like CONCAT('%',#&#123;uname&#125;,'%') "</span>)</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; userInfo(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-完善代码-service层和controller层"><a href="#5-完善代码-service层和controller层" class="headerlink" title="5. 完善代码,service层和controller层"></a>5. 完善代码,service层和controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/userInfo.do"</span>)</span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userInfo(User user)&#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list=userService.userInfo(user);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><p><img src="/2018/07/12/SpringBoot-MyBatis%E6%95%B4%E5%90%88/success.png" alt="成功"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringBoot-MyBatis整合&quot;&gt;&lt;a href=&quot;#SpringBoot-MyBatis整合&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot+MyBatis整合&quot;&gt;&lt;/a&gt;SpringBoot+MyBatis整合&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaWeb框架" scheme="https://zhuyiting.xyz/tags/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="https://zhuyiting.xyz/tags/SpringBoot/"/>
    
      <category term="MyBatis" scheme="https://zhuyiting.xyz/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门</title>
    <link href="https://zhuyiting.xyz/2018/07/03/SpringBoot%E5%85%A5%E9%97%A8/"/>
    <id>https://zhuyiting.xyz/2018/07/03/SpringBoot入门/</id>
    <published>2018-07-03T07:55:05.000Z</published>
    <updated>2019-11-14T02:02:39.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h3><p>SpringBoot是用来快速构建Spring+SpringMvc项目的框架,其设计就是为了尽可能的减少配置文件,快速开发spring应用</p><p>在使用springboot之前,我们开发一个web项目需要繁琐的配置, 还要担心jar的冲突和可行性</p><p>springboot让一切都变得简单</p><ul><li>springboot内嵌Tomcat等web容器</li><li>提供starter简化maven配置</li><li>自动配置spring</li><li>无代码生成,无需xml配置</li><li>提供完善的项目测试</li><li>采用java类来配置</li></ul><p><u>可以说 SpringBoot 是一个简便快捷强大的Spring+SpringMvc,也是目前非常主流的javaWeb技术</u></p><h3 id="第一个SpringBoot"><a href="#第一个SpringBoot" class="headerlink" title="第一个SpringBoot"></a>第一个SpringBoot</h3><h4 id="采用maven项目创建springboot"><a href="#采用maven项目创建springboot" class="headerlink" title="采用maven项目创建springboot"></a>采用maven项目创建springboot</h4><ol><li>新建maven项目,在pom.xml导入springboot所需包 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建springboot启动入口<br>该启动类位于src下,且与controller,dao,service等包同级 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootApplicationMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootApplicationMain.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个controller <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, produces=<span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello SpringBoot"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行启动类, 无需XML配置, 无需tomcat配置, 创建快速,一键启动<br>4. 浏览器访问<br>   <img src="/2018/07/03/SpringBoot%E5%85%A5%E9%97%A8/success.png" alt="成功"></p><h3 id="SpringBoot项目的基础依赖关系"><a href="#SpringBoot项目的基础依赖关系" class="headerlink" title="SpringBoot项目的基础依赖关系"></a>SpringBoot项目的基础依赖关系</h3><p><strong>在项目目录使用命令:<code>mvn dependency:tree</code></strong><br><img src="/2018/07/03/SpringBoot%E5%85%A5%E9%97%A8/%E5%8C%85%E4%BE%9D%E8%B5%96.png" alt="包依赖"></p><h3 id="对于SpringBoot中的starter的理解"><a href="#对于SpringBoot中的starter的理解" class="headerlink" title="对于SpringBoot中的starter的理解"></a>对于SpringBoot中的starter的理解</h3><p>starter可以理解为启动器,它是一系列可以直接集成进springboot应用的依赖包的集合,只需要一站式的添加starter包,而不需要配置XML,和解决包依赖、包冲突的问题。</p><h3 id="SpringBoot接口开发"><a href="#SpringBoot接口开发" class="headerlink" title="SpringBoot接口开发"></a>SpringBoot接口开发</h3><h4 id="JSON接口开发"><a href="#JSON接口开发" class="headerlink" title="JSON接口开发"></a>JSON接口开发</h4><p>在controller类上使用<code>@RestController</code></p><p>或者在controller类的方法上加上<code>@ResponseBody</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringBoot简介&quot;&gt;&lt;a href=&quot;#SpringBoot简介&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot简介&quot;&gt;&lt;/a&gt;SpringBoot简介&lt;/h3&gt;&lt;p&gt;SpringBoot是用来快速构建Spring+Spring
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaWeb框架" scheme="https://zhuyiting.xyz/tags/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="https://zhuyiting.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合</title>
    <link href="https://zhuyiting.xyz/2018/06/16/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <id>https://zhuyiting.xyz/2018/06/16/SSM框架整合/</id>
    <published>2018-06-16T12:50:53.000Z</published>
    <updated>2019-11-14T02:02:43.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h3><p>Spring+SpringMVC+MyBatis框架整合</p><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1. 创建maven项目"></a>1. 创建maven项目</h4><p>创建一个maven项目,在pom.xml文件中导入相关包基本包有:</p><ol><li>mysql连接驱动jar</li><li>mybatis的jar</li><li>mybatis与spring整合的jar</li><li>spring相关jar</li><li>springmvc的jar<br>项目中会用到的日志记录包:</li><li>log4j的jar</li><li>slf4j的接口jar</li><li>slf4j和log4j的整合jar<br>项目中会用到的单元测试包:</li><li>junit的jar<br>可能会用到jsp时需要的包:</li><li>servlet的jar</li><li>servlet-jsp的jar</li><li>jstl标签支持的jar</li></ol><h4 id="2-创建项目结构"><a href="#2-创建项目结构" class="headerlink" title="2. 创建项目结构"></a>2. 创建项目结构</h4><ul><li>项目<ul><li>pom.xml</li><li>src<ul><li>test</li><li>main<ul><li>java<ul><li>entity</li><li>dao</li><li>service<ul><li>impl</li></ul></li><li>controller</li><li>util</li></ul></li><li>resources<ul><li>mapper<ul><li>mapper.xml</li></ul></li><li>jdbc.properties</li><li>mybatis-config.xml</li><li>applicationContext.xml</li><li>springmvc.xml</li><li>log4j.properties</li></ul></li><li>webapp<ul><li>WEB-INF<ul><li>web.xml</li></ul></li><li>index.jsp</li><li>index.html </li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="3-配置各个框架的配置文件"><a href="#3-配置各个框架的配置文件" class="headerlink" title="3. 配置各个框架的配置文件"></a>3. 配置各个框架的配置文件</h4><ol><li><strong>配置web.xml</strong> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;display-name&gt;ssmdemo&lt;/display-name&gt;</span></span><br><span class="line"><span class="comment">    &lt;welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span></span><br><span class="line"><span class="comment">        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span></span><br><span class="line"><span class="comment">    &lt;/welcome-file-list&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载spring的ApplicationContext容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载src目录下的 applicationContext.xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring中的监听器,可以在启动项目时自动装配spring的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.context.ContextLoaderListener</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载springmvc的 DispatcherServlet (请求分发器)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要加载的springmvc-servlet.xml配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表示容器再启动时立即加载servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理*.do的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置过滤器,解决请求乱码问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--拦截所有请求,过滤乱码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>配置spring监听器来创建容器,加载spring配置文件</li><li>配置springmvc分发器,加载springmvc配置文件</li><li>配置过滤器,解决乱码</li></ul><ol start="2"><li><strong>applicationContext.xml</strong> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&amp;lt;!&amp;ndash;开启注解扫描&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">    &lt;context:component-scan base-package="com.ycj"/&gt;</span></span><br><span class="line"><span class="comment">    &amp;lt;!&amp;ndash;注解配置&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">    &lt;context:annotation-config/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入数据库properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&amp;lt;!&amp;ndash;配置数据源&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="url" value="jdbc:mysql://localhost:3306/ssmdemo?characterEncoding=utf8"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="username" value="root"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="password" value="123456"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;pwd&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置spring整合mybatis的工厂类对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.ycj.entity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描Dao接口,装配mapper.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.ycj.dao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定需要扫描的包,使注解生效,dao包在上面已经扫描, 不需要了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ycj.service"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入DataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>配置mysql数据源</li><li>配置spring-mybatis整合工厂类对象<ul><li>加载数据源</li><li>扫描实体包</li><li>扫描mapper.xml文件</li></ul></li><li>配置mapper注入工厂<ul><li>扫描dao层包</li><li>加载spring-mybatis整合工厂类对象</li></ul></li><li>扫描有注解的包,使注解生效</li><li>开启事务管理</li><li>开启事务管理注解扫描</li></ul><ol start="3"><li>配置springmvc-servlet <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置spring创建I容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ycj.controller"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring MVC的视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 有时我们需要访问JSP页面,可理解为在控制器controller的返回值加前缀和后缀,变成一个可用的URL地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>扫描控制器包</li><li>开启注解驱动</li><li>配置视图解析器</li></ul><p>包版本参考:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志管理包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--json版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-spring整合包版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-错误记录"><a href="#4-错误记录" class="headerlink" title="4. 错误记录"></a>4. 错误记录</h4><blockquote><p>错误1:<br>tomcat报错org.apache.tomcat.util.modeler.BaseModelMBean.invoke Exception invoking method manageApp<br>解决方案:<br>检查maven包是否正确,clean-&gt;compile<br><img src="/2018/06/16/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/%E9%94%99%E8%AF%AF1.png" alt="mybatis的包出错"><br>进入maven仓库删除相应包, 重新下载</p></blockquote><blockquote><p>错误2:<br>java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener<br>解决方案:<br>项目包中存在,打开项目结构,在artifacts,将可选项添加到输出文件中,可以看到WEB-INF中多了一个lib文件,存放依赖的包. 找到原因,没有将项目中的包添加到输出war中<br><img src="/2018/06/16/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/%E9%94%99%E8%AF%AF2.png" alt="加载不到依赖包"></p></blockquote><blockquote><p>错误3:<br>无法接收json数据<br>解决方案:<br>spring5以上版本不需要在参数前添加@RequestBody,删除注解后成功</p></blockquote><blockquote><p>错误4:<br>无法返回json格式数据<br>解决方案:<br>配置json转换器,需要正确的包(参考spring5.1.5;fastjson2.9.8)<br>spring5.0以上版本,只要开启注解驱动即可<code>&lt;mvc:annotation-driven /&gt;</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SSM框架整合&quot;&gt;&lt;a href=&quot;#SSM框架整合&quot; class=&quot;headerlink&quot; title=&quot;SSM框架整合&quot;&gt;&lt;/a&gt;SSM框架整合&lt;/h3&gt;&lt;p&gt;Spring+SpringMVC+MyBatis框架整合&lt;/p&gt;
&lt;h4 id=&quot;1-创建maven
      
    
    </summary>
    
    
      <category term="后端技术栈" scheme="https://zhuyiting.xyz/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="JavaWeb框架" scheme="https://zhuyiting.xyz/tags/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://zhuyiting.xyz/tags/MyBatis/"/>
    
      <category term="Spring" scheme="https://zhuyiting.xyz/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="https://zhuyiting.xyz/tags/SpringMVC/"/>
    
  </entry>
  
</feed>
