<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycjBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yimchengjie.github.io/"/>
  <updated>2020-01-24T07:47:21.170Z</updated>
  <id>https://yimchengjie.github.io/</id>
  
  <author>
    <name>yanchengjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法与数据结构/时间复杂度和空间复杂度</title>
    <link href="https://yimchengjie.github.io/2020/01/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://yimchengjie.github.io/2020/01/24/算法与数据结构/时间复杂度和空间复杂度/</id>
    <published>2020-01-24T07:47:21.170Z</published>
    <updated>2020-01-24T07:47:21.170Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="https://yimchengjie.github.io/2019/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/11/08/设计模式/享元模式/</id>
    <published>2019-11-08T12:58:21.000Z</published>
    <updated>2020-01-07T13:37:32.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>属于结构型模式</p><p>又叫共享模式, 共享系统对象</p><h3 id="为什么使用享元模式"><a href="#为什么使用享元模式" class="headerlink" title="为什么使用享元模式"></a>为什么使用享元模式</h3><p>解决重复对象的内存浪费的问题</p><p>常用场景为数据库连接池</p><h3 id="使用享元模式"><a href="#使用享元模式" class="headerlink" title="使用享元模式"></a>使用享元模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolObj</span> <span class="keyword">implements</span> <span class="title">Pool</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String db;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoolObj</span><span class="params">(String db)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.db = db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接 "</span>+db);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Pool&gt; pools=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pool <span class="title">getPool</span><span class="params">(String db)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pools.get(db)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> pools.get(db);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Pool pool=<span class="keyword">new</span> PoolObj(db);</span><br><span class="line">            pools.put(db,pool);</span><br><span class="line">            <span class="keyword">return</span> pool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMapCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(pools.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlyWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PoolFactory poolFactory=<span class="keyword">new</span> PoolFactory();</span><br><span class="line">    Pool pool1=poolFactory.getPool(<span class="string">"mysql"</span>);</span><br><span class="line">    Pool pool2=poolFactory.getPool(<span class="string">"oracle"</span>);</span><br><span class="line">    pool1.connect();</span><br><span class="line">    pool2.connect();</span><br><span class="line">    Pool pool3=poolFactory.getPool(<span class="string">"mysql"</span>);</span><br><span class="line">    Pool pool4=poolFactory.getPool(<span class="string">"oracle"</span>);</span><br><span class="line">    pool3.connect();</span><br><span class="line">    pool4.connect();</span><br><span class="line"></span><br><span class="line">    poolFactory.printMapCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;又叫共享模式, 共享系统对象&lt;/p&gt;
&lt;h3 id=&quot;为什么使用享元模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://yimchengjie.github.io/2019/10/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/30/设计模式/外观模式/</id>
    <published>2019-10-30T12:31:05.000Z</published>
    <updated>2020-01-07T13:37:21.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>属于结构型模式</p><p>外观模式其实就是将一段代码中不变的部分提炼出来,做成一个接口暴露给用户</p><h3 id="为什么使用外观模式"><a href="#为什么使用外观模式" class="headerlink" title="为什么使用外观模式"></a>为什么使用外观模式</h3><p>降低访问复杂系统的内部子系统时的复杂度,减少系统相互依赖。提高灵活性.提高安全性</p><h3 id="使用外观模式"><a href="#使用外观模式" class="headerlink" title="使用外观模式"></a>使用外观模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一些列方法封装成接口暴露给用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeviceA deviceA=<span class="keyword">new</span> DeviceA();</span><br><span class="line">    <span class="keyword">private</span> DeviceB deviceB=<span class="keyword">new</span> DeviceB();</span><br><span class="line">    <span class="keyword">private</span> DeviceC deviceC=<span class="keyword">new</span> DeviceC();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        deviceA.method();</span><br><span class="line">        deviceB.method();</span><br><span class="line">        deviceC.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceA的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceB的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceC的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">    facade.methed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;外观模式其实就是将一段代码中不变的部分提炼出来,做成一个接口暴露给用户&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之索引</title>
    <link href="https://yimchengjie.github.io/2019/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
    <id>https://yimchengjie.github.io/2019/10/28/数据库/MySQL数据库之索引/</id>
    <published>2019-10-28T11:21:16.000Z</published>
    <updated>2020-01-07T12:27:49.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库之索引"><a href="#MySQL数据库之索引" class="headerlink" title="MySQL数据库之索引"></a>MySQL数据库之索引</h2><p>MySQL索引的简历对于MySQL的高效运行至关重要,索引可以大大提高MySQL检索速度</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。所以建立索引会占用磁盘空间的索引文件。</p><p>对表中数据增删改时,索引也要进行相应维护</p><h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><ol><li><p>在创建表的时候创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    author <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    info <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">INDEX</span>(author)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>CREATE INDEX直接创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">index</span> index_name ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> primary <span class="keyword">key</span> ;</span><br></pre></td></tr></table></figure></li><li><p>组合索引和前缀索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用column_list1(4)建立column_list1的前4位的索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list1(<span class="number">4</span>),column_list2,column_list3);</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><h4 id="不走索引的情况"><a href="#不走索引的情况" class="headerlink" title="不走索引的情况"></a>不走索引的情况</h4><ol><li>索引列参与到计算式</li><li>索引列参与到函数运算</li><li>正则表达式匹配</li><li>条件中带or</li><li>like ‘%XX%’</li><li>where中有不等号</li></ol><p>注意: like’XXX%’ 走索引</p><p>索引虽然大大提高了查询速度, 但是降低了更新速度;</p><h3 id="索引技巧"><a href="#索引技巧" class="headerlink" title="索引技巧"></a>索引技巧</h3><ol><li>只要列中有NULL值, 索引就无效</li><li>使用短索引,对长字段建索引时使用前缀建立</li><li>ORDER BY中的列不会使用索引</li><li>使用like语句走索引要用’XXX%’</li><li>不要在列上运算</li><li>索引要建立在经常进行select操作的字段上</li><li>索引要建立在值相对唯一的字段上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据库之索引&quot;&gt;&lt;a href=&quot;#MySQL数据库之索引&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库之索引&quot;&gt;&lt;/a&gt;MySQL数据库之索引&lt;/h2&gt;&lt;p&gt;MySQL索引的简历对于MySQL的高效运行至关重要,索引可以大大提
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://yimchengjie.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之事务</title>
    <link href="https://yimchengjie.github.io/2019/10/22/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
    <id>https://yimchengjie.github.io/2019/10/22/数据库/MySQL数据库之事务/</id>
    <published>2019-10-22T10:23:20.000Z</published>
    <updated>2020-01-07T11:19:50.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库之事务"><a href="#MySQL数据库之事务" class="headerlink" title="MySQL数据库之事务"></a>MySQL数据库之事务</h2><p>MySQL事务主要用于处理操作量大的一系列操作;比如在人员管理系统中,删除一个人员的同时还要删除人员的基本资料,也要删除一些其他相关的信息,这样的数据库操作就叫事务.</p><h3 id="MySQL事务处理的两种方式"><a href="#MySQL事务处理的两种方式" class="headerlink" title="MySQL事务处理的两种方式"></a>MySQL事务处理的两种方式</h3><ol><li>用BEGIN(开始一个事务),ROLLBACK(事务回滚),COMMIT(事务确认)实现</li><li>用SET来改变MySQL的自动提交模式</li></ol><h3 id="实现事务管理"><a href="#实现事务管理" class="headerlink" title="实现事务管理"></a>实现事务管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一次转账</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Connection conn = <span class="keyword">null</span>;</span><br><span class="line">  PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      conn = DBUtils.getConnection();</span><br><span class="line">      <span class="comment">//这里关闭自动事务提交, 相当于开启事务 begin ,并且需要手动提交</span></span><br><span class="line">      conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">      <span class="comment">//用户A转出100</span></span><br><span class="line">      ps = conn.prepareStatement(<span class="string">"update account set money=money-100 where name='A'"</span>);</span><br><span class="line">      ps.executeUpdate();</span><br><span class="line">      <span class="comment">//模拟异常</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">      <span class="comment">//用户B转入100</span></span><br><span class="line">      ps = conn.prepareStatement(<span class="string">"update account set money=money+100 where name='B'"</span>);</span><br><span class="line">      ps.executeUpdate();</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      conn.commit();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//事务回滚</span></span><br><span class="line">        conn.rollback();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      DBUtils.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis中的事务管理"><a href="#Mybatis中的事务管理" class="headerlink" title="Mybatis中的事务管理"></a>Mybatis中的事务管理</h3><p>Mybatis的事务在环境配置中, 环境配置传入SqlSessionFactory工厂</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用JDBC开启事务 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启事务后,Mybatis会创建一个TransactionFactory 事务工厂<br>Mybatis中Transaction(事务)是由TransactionFactory(事务工厂)创建的</p><p>事务由Connection实例管理</p><h3 id="Spring-Mybatis实现事务管理"><a href="#Spring-Mybatis实现事务管理" class="headerlink" title="Spring+Mybatis实现事务管理"></a>Spring+Mybatis实现事务管理</h3><p>使用Managed事务管理,Mybatis对事务的创建提交回滚没有实现,是交给容器来实现的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis中开启Managed事务管理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"managed"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"><span class="comment">&lt;!-- Spring配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringBoot开启事务</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开始事务</span></span><br></pre></td></tr></table></figure><p>抽离出事务Service,使用@Transational注解事务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransationalService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Service service</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transationMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 调用其他增删改查, 组成一个事务</span></span><br><span class="line">        service.select();</span><br><span class="line">        service.update();</span><br><span class="line">        service.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据库之事务&quot;&gt;&lt;a href=&quot;#MySQL数据库之事务&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库之事务&quot;&gt;&lt;/a&gt;MySQL数据库之事务&lt;/h2&gt;&lt;p&gt;MySQL事务主要用于处理操作量大的一系列操作;比如在人员管理系统中
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mybatis" scheme="https://yimchengjie.github.io/tags/Mybatis/"/>
    
      <category term="MySQL" scheme="https://yimchengjie.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://yimchengjie.github.io/2019/10/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/15/设计模式/组合模式/</id>
    <published>2019-10-15T08:53:46.000Z</published>
    <updated>2020-01-05T03:06:23.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>属于结构型模式</p><p>组合模式又叫部分整体模式,它创建了对象组的树形结构, 将对象组成树状结构来表示整体的层次关系</p><h3 id="为什么使用组合模式"><a href="#为什么使用组合模式" class="headerlink" title="为什么使用组合模式"></a>为什么使用组合模式</h3><p>组合模式能够使用户对单个对象和组合对象的访问具有一致性</p><p>有时候功能的扩展对象可能是包含关系, 而不是继承关系, 需要使用组合模式</p><h3 id="使用组合模式"><a href="#使用组合模式" class="headerlink" title="使用组合模式"></a>使用组合模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组织, 大学 学院 部门都继承组织</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Origanization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Origanization</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Origanization origanization)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加: "</span>+origanization.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Origanization origanization)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"移除: "</span>+origanization.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Origanization&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", info='"</span> + info + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大学</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">Origanization</span></span>&#123;</span><br><span class="line">    <span class="comment">// 管理学院</span></span><br><span class="line">    List&lt;Origanization&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.add(origanization);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.remove(origanization);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----"</span>+<span class="keyword">this</span>+<span class="string">"----"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Origanization origanization: list)&#123;</span><br><span class="line">            origanization.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学院</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">Origanization</span></span>&#123;</span><br><span class="line">    <span class="comment">//管理部门</span></span><br><span class="line">    List&lt;Origanization&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.add(origanization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Origanization origanization)</span> </span>&#123;</span><br><span class="line">        list.remove(origanization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--"</span>+<span class="keyword">this</span>+<span class="string">"--"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Origanization origanization: list)&#123;</span><br><span class="line">            origanization.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门 叶子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">Origanization</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComposite</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Origanization university = <span class="keyword">new</span> University(<span class="string">"浙江大学"</span>,<span class="string">"大学"</span>);</span><br><span class="line">    Origanization college1 = <span class="keyword">new</span> College(<span class="string">"计算机学院"</span>,<span class="string">"学院"</span>);</span><br><span class="line">    Origanization college2 = <span class="keyword">new</span> College(<span class="string">"国际学院"</span>,<span class="string">"学院"</span>);</span><br><span class="line">    university.add(college1);</span><br><span class="line">    university.add(college2);</span><br><span class="line">    Origanization department1 = <span class="keyword">new</span> Department(<span class="string">"信息工程"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    Origanization department2 = <span class="keyword">new</span> Department(<span class="string">"软件工程"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    college1.add(department1);</span><br><span class="line">    college1.add(department2);</span><br><span class="line">    Origanization department3 = <span class="keyword">new</span> Department(<span class="string">"国际英语"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    Origanization department4 = <span class="keyword">new</span> Department(<span class="string">"商务英语"</span>,<span class="string">"部门"</span>);</span><br><span class="line">    college2.add(department3);</span><br><span class="line">    college2.add(department4);</span><br><span class="line">    university.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;组合模式又叫部分整体模式,它创建了对象组的树形结构, 将对象组成树状结构来表示整体的层次关系&lt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="https://yimchengjie.github.io/2019/10/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/08/设计模式/装饰者模式/</id>
    <published>2019-10-08T07:11:25.000Z</published>
    <updated>2020-01-05T02:13:28.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>属于结构型模式</p><p>装饰者模式动态的给一个对象添加一些额外的职责</p><h3 id="为什么使用装饰者模式"><a href="#为什么使用装饰者模式" class="headerlink" title="为什么使用装饰者模式"></a>为什么使用装饰者模式</h3><p>通常使用继承类来扩展功能, 如果功能种类很多, 会造成类爆炸(类的数量很多);不方便管理<br>使用装饰者模式, 可以让用户决定动态的加入扩展功能;</p><h3 id="使用装饰者模式"><a href="#使用装饰者模式" class="headerlink" title="使用装饰者模式"></a>使用装饰者模式</h3><p>装饰者模式有Component(主体), (装饰部分),ConcreteComponent(具体的主体);<br>装饰者和具体的主体都要继承主体;装饰者内维护一个主体,并将主体进行装饰.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主体 饮品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price = <span class="number">0.0</span>d;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="comment">// 计算饮品价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体的实现 咖啡</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setInfo(<span class="string">"咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">18</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体的实现 奶茶</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setInfo(<span class="string">"奶茶"</span>);</span><br><span class="line">        setPrice(<span class="number">15</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Drink drink;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getInfo()+<span class="string">" "</span>+drink.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()+drink.cost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink drink)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.drink=drink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者的实现 加奶盖</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkCap</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkCap</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setInfo(<span class="string">"加奶盖"</span>);</span><br><span class="line">        setPrice(<span class="number">6</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者的实现 加芝士</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cheese</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cheese</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setInfo(<span class="string">"加芝士"</span>);</span><br><span class="line">        setPrice(<span class="number">5</span>d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDecorator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 点一份咖啡</span></span><br><span class="line">    Drink coffee=<span class="keyword">new</span> Coffee();</span><br><span class="line">    System.out.println(coffee.getInfo()+coffee.cost());</span><br><span class="line">    <span class="comment">// 加一份奶盖</span></span><br><span class="line">    Drink coffee1=<span class="keyword">new</span> MilkCap(coffee);</span><br><span class="line">    System.out.println(coffee1.getInfo()+coffee1.cost());</span><br><span class="line">    <span class="comment">// 加一份芝士</span></span><br><span class="line">    Drink coffee2=<span class="keyword">new</span> Cheese(coffee1);</span><br><span class="line">    System.out.println(coffee2.getInfo()+coffee2.cost());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点一份奶茶</span></span><br><span class="line">    Drink milkTea=<span class="keyword">new</span> MilkTea();</span><br><span class="line">    System.out.println(milkTea.getInfo()+milkTea.cost());</span><br><span class="line">    <span class="comment">// 加一份芝士</span></span><br><span class="line">    Drink milkTea1=<span class="keyword">new</span> Cheese(milkTea);</span><br><span class="line">    System.out.println(milkTea1.getInfo()+milkTea1.cost());</span><br><span class="line">    <span class="comment">// 加一份奶盖</span></span><br><span class="line">    Drink milkTea2=<span class="keyword">new</span> MilkCap(milkTea1);</span><br><span class="line">    System.out.println(milkTea2.getInfo()+milkTea2.cost());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;装饰者模式动态的给一个对象添加一些额外的职责&lt;/p&gt;
&lt;h3 id=&quot;为什么使用装饰者
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="https://yimchengjie.github.io/2019/09/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/09/29/设计模式/桥接模式/</id>
    <published>2019-09-29T02:23:41.000Z</published>
    <updated>2020-01-05T01:23:03.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>属于结构型模式</p><p>桥接模式将抽象和实现分离开来,各自独立,但能动态的结合;</p><h3 id="为什么使用桥接模式"><a href="#为什么使用桥接模式" class="headerlink" title="为什么使用桥接模式"></a>为什么使用桥接模式</h3><p>桥接模式基于类的最小设计原则, 通过使用封装、聚合及继承，让不同的类承担不同的职责；<br>将事物的抽象和实现分离， 从而保持各部分的独立性功能的扩展性；</p><h3 id="使用桥接模式"><a href="#使用桥接模式" class="headerlink" title="使用桥接模式"></a>使用桥接模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象事物 消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageImplementor = messageImplementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageImplementor messageImplementor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageImplementor.send(message,toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的子类, 默认消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(messageImplementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMessage(message, toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的子类, 加急消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrgencyMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMessage(<span class="string">"加急"</span>+message, toUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UrgencyMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(messageImplementor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的子类, 特快消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExpressMessage</span><span class="params">(MessageImplementor messageImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(messageImplementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMessage(<span class="string">"特快"</span>+message, toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageImplementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String message,String toUser)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为的实现, 用邮件发</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageMail</span> <span class="keyword">implements</span> <span class="title">MessageImplementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用邮件给 "</span>+toUser+<span class="string">" 发送: "</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为的实现, 用微信发</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageWeChat</span> <span class="keyword">implements</span> <span class="title">MessageImplementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, String toUser)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用微信给 "</span>+toUser+<span class="string">" 发送: "</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBridging</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AbstractMessage message1=<span class="keyword">new</span> DefaultMessage(<span class="keyword">new</span> MessageMail());</span><br><span class="line">    AbstractMessage message2=<span class="keyword">new</span> DefaultMessage(<span class="keyword">new</span> MessageWeChat());</span><br><span class="line">    AbstractMessage message3=<span class="keyword">new</span> UrgencyMessage(<span class="keyword">new</span> MessageMail());</span><br><span class="line">    AbstractMessage message4=<span class="keyword">new</span> UrgencyMessage(<span class="keyword">new</span> MessageWeChat());</span><br><span class="line">    AbstractMessage message5=<span class="keyword">new</span> ExpressMessage(<span class="keyword">new</span> MessageMail());</span><br><span class="line">    AbstractMessage message6=<span class="keyword">new</span> ExpressMessage(<span class="keyword">new</span> MessageWeChat());</span><br><span class="line">    message1.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message2.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message3.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message4.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message5.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    message6.sendMessage(<span class="string">"在吗"</span>,<span class="string">"小明"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;桥接模式将抽象和实现分离开来,各自独立,但能动态的结合;&lt;/p&gt;
&lt;h3 id=&quot;为什么使用桥
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://yimchengjie.github.io/2019/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/09/21/设计模式/适配器模式/</id>
    <published>2019-09-21T04:51:31.000Z</published>
    <updated>2020-01-04T09:13:11.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>属于结构型模式</p><p>适配器模式将两个不兼容的类通过适配器能够做到兼容;<br>用户调用适配器转化后的接口方法, 适配器再调用被适配者的接口方法;<br>用户只要关心适配器暴露的接口方法</p><h3 id="为什么使用适配器模式"><a href="#为什么使用适配器模式" class="headerlink" title="为什么使用适配器模式"></a>为什么使用适配器模式</h3><p>现实中,存在很多的适配器, 比如电源适配器; 让原本不能直接兼容的两个对象, 通过适配器进行兼容</p><h3 id="使用适配器模式"><a href="#使用适配器模式" class="headerlink" title="使用适配器模式"></a>使用适配器模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被适配者, 比如插座 交流220V</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器 电源适配器 转化成低压直流电</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Adaptee adaptee)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输入电压: "</span>+adaptee.output());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输出电压: "</span>+<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用者  需要充电的电池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Battery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(Adapter adapter)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (adapter.output()==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"不适配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;适配器模式将两个不兼容的类通过适配器能够做到兼容;&lt;br&gt;用户调用适配器转化后的接口方
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://yimchengjie.github.io/2019/09/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/09/14/设计模式/建造者模式/</id>
    <published>2019-09-14T08:34:15.000Z</published>
    <updated>2020-01-04T08:04:52.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>属于创建者模式</p><p>建造者模式将一个复杂对象的构建和对象分离,实现解耦;<br>比如一辆汽车的创建,需要一整套过程和很多的部件,建造者模式实现了将部件和过程分离</p><h3 id="为什么使用建造者模式"><a href="#为什么使用建造者模式" class="headerlink" title="为什么使用建造者模式"></a>为什么使用建造者模式</h3><p>是为了将创建一个复杂对象的过程与它的属性解耦</p><h3 id="使用建造者模式"><a href="#使用建造者模式" class="headerlink" title="使用建造者模式"></a>使用建造者模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</span><br><span class="line">                <span class="string">"wheel='"</span> + wheel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", engine='"</span> + engine + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", chassis='"</span> + chassis + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模拟汽车 轮子 发动机 底盘</span></span><br><span class="line">    <span class="keyword">private</span> String wheel;</span><br><span class="line">    <span class="keyword">private</span> String engine;</span><br><span class="line">    <span class="keyword">private</span> String chassis;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWheel</span><span class="params">()</span> </span>&#123;  <span class="keyword">return</span> wheel;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWheel</span><span class="params">(String wheel)</span> </span>&#123;<span class="keyword">this</span>.wheel = wheel; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngine</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> engine;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(String engine)</span> </span>&#123; <span class="keyword">this</span>.engine = engine;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChassis</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> chassis; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChassis</span><span class="params">(String chassis)</span> </span>&#123;   <span class="keyword">this</span>.chassis = chassis; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建组件A</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 创建组件B</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 创建组件C</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Product <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造者的具体实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = <span class="keyword">new</span> Product();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;product.setWheel(<span class="keyword">new</span> String(<span class="string">"米其林轮胎"</span>));  &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;product.setEngine(<span class="keyword">new</span> String(<span class="string">"三菱发动机"</span>));  &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span> </span>&#123;product.setChassis(<span class="keyword">new</span> String(<span class="string">"宝马底盘"</span>));   &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> product; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥者</span></span><br><span class="line"><span class="comment">// 客户端直接利用指挥者创建对象, 给指挥者传入一个建造者实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Diector</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">        <span class="keyword">return</span> builder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h2&gt;&lt;p&gt;属于创建者模式&lt;/p&gt;
&lt;p&gt;建造者模式将一个复杂对象的构建和对象分离,实现解耦;&lt;br&gt;比如一辆汽车的创建,需要一
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://yimchengjie.github.io/2019/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/08/27/设计模式/原型模式/</id>
    <published>2019-08-27T14:09:01.000Z</published>
    <updated>2020-01-04T03:05:48.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>属于创建者模式</p><p>原型对象负责创建需要用到的对象, 使用者直接拷贝原型,作为创建的对象</p><p>注意, 是拷贝, 不是引用; 核心点是object对象的clone方法</p><h3 id="为什么要使用原型模式"><a href="#为什么要使用原型模式" class="headerlink" title="为什么要使用原型模式"></a>为什么要使用原型模式</h3><ol><li>使用原型模式拷贝对象, 可以获得对象的运行状态, 不会产生一个初始全新对象</li><li>拷贝的效率比创建的效率更高</li><li>一个对象有多个访问者的时候,可以考虑用原型模式</li><li>对于一个创建过程很复杂的类来说, 可以使用原型模式</li></ol><h3 id="使用原型模式"><a href="#使用原型模式" class="headerlink" title="使用原型模式"></a>使用原型模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型类</span></span><br><span class="line"><span class="comment">// 实现拷贝需要继承Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sheep&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", master="</span> + master +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Master <span class="title">getMaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> master;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaster</span><span class="params">(Master master)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.master = master;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Master master;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把引用的对象也进行拷贝</span></span><br><span class="line">    <span class="comment">// 这种方法要把所有要拷贝的类都继承Cloneable,并且当有多层引用关系时, 代码会很复杂</span></span><br><span class="line">    <span class="comment">// 不推荐</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepCloneAbandon</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Sheep clone=(Sheep) <span class="keyword">super</span>.clone();</span><br><span class="line">        clone.master=(Master) <span class="keyword">this</span>.master.clone();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用流的方法实现深拷贝, 推荐使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">            objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">            <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">            iOException.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            classNotFoundException.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                byteArrayOutputStream.close();</span><br><span class="line">                objectOutputStream.close();</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">                objectInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">                iOException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrototype</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Sheep sheep = <span class="keyword">new</span> Sheep();</span><br><span class="line">    sheep.setName(<span class="string">"喜洋洋"</span>);</span><br><span class="line">    sheep.setMaster(<span class="keyword">new</span> Master(<span class="string">"村长"</span>));</span><br><span class="line">    Sheep copysheep = (Sheep) sheep.clone();</span><br><span class="line">    <span class="comment">// hashCode不同,说明不是复制引用而是拷贝对象</span></span><br><span class="line">    <span class="comment">// 拷贝对象中的属性为引用类型的时候, 拷贝的引用地址</span></span><br><span class="line">    <span class="comment">// 所以默认的clone方法是浅拷贝的方法</span></span><br><span class="line">    System.out.println(sheep.hashCode() + <span class="string">" "</span> + sheep.toString());</span><br><span class="line">    System.out.println(copysheep.hashCode() + <span class="string">" "</span> + copysheep.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 人工再拷贝实现深拷贝</span></span><br><span class="line">    System.out.println(<span class="string">"人工再拷贝实现深拷贝"</span>);</span><br><span class="line">    Sheep deepCopySheepAbandon = (Sheep) sheep.deepCloneAbandon();</span><br><span class="line">    System.out.println(deepCopySheepAbandon.hashCode() + <span class="string">" "</span> + deepCopySheepAbandon.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用流深拷贝</span></span><br><span class="line">    System.out.println(<span class="string">"用流深拷贝"</span>);</span><br><span class="line">    Sheep deepCopySheep = (Sheep) sheep.deepClone();</span><br><span class="line">    System.out.println(deepCopySheep.hashCode() + <span class="string">" "</span> + deepCopySheep.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring中应用"><a href="#Spring中应用" class="headerlink" title="Spring中应用"></a>Spring中应用</h3><p>bean的scope属性可以指定为<code>prototype</code>原型模式, 每次创建bean时都是clone创建;</p><h3 id="注意-缺点"><a href="#注意-缺点" class="headerlink" title="注意(缺点)"></a>注意(缺点)</h3><p>在实现深度克隆时, 代码复杂<br>需要给每个类写克隆方法, 对于已有不支持clone的类,工作量大,而且违背了开闭原则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h2&gt;&lt;p&gt;属于创建者模式&lt;/p&gt;
&lt;p&gt;原型对象负责创建需要用到的对象, 使用者直接拷贝原型,作为创建的对象&lt;/p&gt;
&lt;p&gt;注意, 是
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ入门</title>
    <link href="https://yimchengjie.github.io/2019/08/25/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/08/25/消息中间件/RabbitMQ入门/</id>
    <published>2019-08-25T13:55:17.000Z</published>
    <updated>2020-01-24T07:48:12.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ入门"><a href="#RabbitMQ入门" class="headerlink" title="RabbitMQ入门"></a>RabbitMQ入门</h2><p>RabbitMQ是一个开源的机遇AMQP协议的实现,服务端用Erlang语言编写,支持多种客户端,用于在分布式系统中存储转发消息</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><h3 id="RabbitMQ的安装"><a href="#RabbitMQ的安装" class="headerlink" title="RabbitMQ的安装"></a>RabbitMQ的安装</h3><ol><li>官网安装rabbitmq,注意需要安装erlang对应的版本</li><li>安装完,可以直接启动服务<code>systemctl start rabbitmq-server</code></li></ol><h3 id="Web管理平台"><a href="#Web管理平台" class="headerlink" title="Web管理平台"></a>Web管理平台</h3><ol><li><p>开启插件<code>rabbitmq-plugins enable rabbitmq_management</code></p></li><li><p>创建新用户,配置权限<br> <code>rabbitmqctl add_user admin admin</code><br> 分配操作权限<br> <code>rabbitmqctl set_user_tags admin administrator</code><br> 分配资源权限<br> <code>rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p></li><li><p>开启防火墙</p></li></ol><h3 id="java中的使用"><a href="#java中的使用" class="headerlink" title="java中的使用"></a>java中的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单队列生产者</span></span><br><span class="line"><span class="comment"> * 使用RabbitMQ的默认交换器发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2、设置连接属性</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.100.242"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、从连接工厂获取连接</span></span><br><span class="line">            connection = factory.newConnection(<span class="string">"生产者"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、从链接中创建通道</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5、声明（创建）队列</span></span><br><span class="line"><span class="comment">             * 如果队列不存在，才会创建</span></span><br><span class="line"><span class="comment">             * RabbitMQ 不允许声明两个队列名相同，属性不同的队列，否则会报错</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * queueDeclare参数说明：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> queue 队列名称</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> durable 队列是否持久化</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exclusive 是否排他，即是否为私有的，如果为true,会对当前队列加锁，其它通道不能访问，并且在连接关闭时会自动删除，不受持久化和自动删除的属性控制</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> arguments 队列参数，设置队列的有效期、消息最大长度、队列中所有消息的生命周期等等</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">            <span class="comment">// 6、发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, <span class="string">"queue1"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"消息已发送！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7、关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8、关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单队列消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2、设置连接属性</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.100.242"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、从连接工厂获取连接</span></span><br><span class="line">            connection = factory.newConnection(<span class="string">"消费者"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、从链接中创建通道</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5、声明（创建）队列</span></span><br><span class="line"><span class="comment">             * 如果队列不存在，才会创建</span></span><br><span class="line"><span class="comment">             * RabbitMQ 不允许声明两个队列名相同，属性不同的队列，否则会报错</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * queueDeclare参数说明：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> queue 队列名称</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> durable 队列是否持久化</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exclusive 是否排他，即是否为私有的，如果为true,会对当前队列加锁，其它通道不能访问，</span></span><br><span class="line"><span class="comment">             *                  并且在连接关闭时会自动删除，不受持久化和自动删除的属性控制。</span></span><br><span class="line"><span class="comment">             *                  一般在队列和交换器绑定时使用</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> arguments 队列参数，设置队列的有效期、消息最大长度、队列中所有消息的生命周期等等</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6、定义收到消息后的回调</span></span><br><span class="line">            DeliverCallback callback = <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"收到消息："</span> + <span class="keyword">new</span> String(message.getBody(), <span class="string">"UTF-8"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 7、监听队列</span></span><br><span class="line">            channel.basicConsume(<span class="string">"queue1"</span>, <span class="keyword">true</span>, callback, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"开始接收消息"</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 8、关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 9、关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RabbitMQ入门&quot;&gt;&lt;a href=&quot;#RabbitMQ入门&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ入门&quot;&gt;&lt;/a&gt;RabbitMQ入门&lt;/h2&gt;&lt;p&gt;RabbitMQ是一个开源的机遇AMQP协议的实现,服务端用Erlang语言
      
    
    </summary>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="RabbitMQ入门" scheme="https://yimchengjie.github.io/tags/RabbitMQ%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://yimchengjie.github.io/2019/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/08/18/设计模式/工厂模式/</id>
    <published>2019-08-18T12:31:20.000Z</published>
    <updated>2020-01-03T07:48:47.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>属于创建型模式</p><p>专门定义一个类来负责创建一个接口的一系列实现类的实例;即负责创建一些列有公共父类或者实现接口的对象</p><h3 id="为什么使用工厂模式"><a href="#为什么使用工厂模式" class="headerlink" title="为什么使用工厂模式"></a>为什么使用工厂模式</h3><ol><li>使用工厂模式, 将创建实例和使用实例进行分离, 更便于后期的维护和扩展;实现了<strong>解耦</strong></li><li>工厂模式可以减少重复代码, 创建实例的代码只要重复调用工厂模式中的创建方法就行了</li></ol><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式又叫<strong>静态工厂方法模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String kindName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKindName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kindName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKindName</span><span class="params">(String kindName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kindName = kindName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"呼吸中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类dog</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗啃骨头..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类cat</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">getAnimal</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name==<span class="string">"dog"</span>||name==<span class="string">"Dog"</span>)&#123;</span><br><span class="line">            Animal dog=<span class="keyword">new</span> Dog();</span><br><span class="line">            dog.setKindName(<span class="string">"dog"</span>);</span><br><span class="line">            <span class="keyword">return</span> dog;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name==<span class="string">"cat"</span>||name==<span class="string">"Cat"</span>) &#123;</span><br><span class="line">            Animal cat = <span class="keyword">new</span> Cat();</span><br><span class="line">            cat.setKindName(<span class="string">"dog"</span>);</span><br><span class="line">            <span class="keyword">return</span> cat;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"出错"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>当简单工厂模式要创建的对象非常多, 或者工厂类有它自己的实现类了,代码量也会增多, 不易维护.<br>上述代码的例子下, <code>AnimalFactory</code>有了继承它的<code>DogFactory</code>, <code>CatFactory</code>创建的对象变成ChinaDog<br> ChinaCat EnglishDog EnglishCat..怎么办呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">    AbstractAnimalFactory abstractAnimalFactory=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(String country,String kind)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (kind==<span class="string">"dog"</span>)&#123;</span><br><span class="line">            abstractAnimalFactory=<span class="keyword">new</span> DogFactoryAbstract();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (kind==<span class="string">"cat"</span>)&#123;</span><br><span class="line">            abstractAnimalFactory=<span class="keyword">new</span> CatFactoryAbstract();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"工厂错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        abstractAnimalFactory.createAnimal(country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Animal <span class="title">createAnimal</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类实现工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatFactoryAbstract</span> <span class="keyword">extends</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (country == <span class="string">"chinese"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseCat();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (country == <span class="string">"english"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EnglishCat();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogFactoryAbstract</span> <span class="keyword">extends</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">createAnimal</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (country == <span class="string">"chinese"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseDog();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (country == <span class="string">"english"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EnglishDog();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;p&gt;属于创建型模式&lt;/p&gt;
&lt;p&gt;专门定义一个类来负责创建一个接口的一系列实现类的实例;即负责创建一些列有公共父类或者实现接口的
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://yimchengjie.github.io/2019/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/08/10/设计模式/单例模式/</id>
    <published>2019-08-10T10:55:45.000Z</published>
    <updated>2020-01-03T04:50:38.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>属于创建型模式</p><p>单例模式,就是采取一定的方法保证在整个系统中,对于某个类,只存在一个实例对象.</p><h3 id="为什么使用单例模式"><a href="#为什么使用单例模式" class="headerlink" title="为什么使用单例模式"></a>为什么使用单例模式</h3><ol><li>使用单例模式,对于那些经常使用的实例, 可以减少创建对象的开销</li><li>实例化减少,可能减少虚拟机垃圾回收的压力</li></ol><h3 id="使用单例模式的几种方法"><a href="#使用单例模式的几种方法" class="headerlink" title="使用单例模式的几种方法"></a>使用单例模式的几种方法</h3><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造器, 防止外部进行new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized保证线程安全性, 但是会影响效率,存在实例时也要进行同步, 这是不必要的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><p>在静态方法保证线程安全的基础上,提高了系统效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保证可见性,一但有实例时,所有线程都会知道</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheck instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheck</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DoubleCheck <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> instance=<span class="keyword">new</span> DoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>比较推荐的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类装载时,静态内部类不会被加载, 保证了懒加载</span></span><br><span class="line">    <span class="comment">// 静态内部类装载时, JVM提供了线程安全, 保证了线程安全</span></span><br><span class="line">    <span class="comment">// 类的静态属性,只在类装载时被加载,保证了单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClassIntance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerClass INTANCE = <span class="keyword">new</span> StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StaticInnerClassIntance.INTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举方法"><a href="#枚举方法" class="headerlink" title="枚举方法"></a>枚举方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTACNE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title">getIntance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTACNE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举方法是最好的一种,也是官方推荐的一种, 它完美的解决了懒加载, 线程安全, 单例等问题</p><p>而且他不会被反射影响, 上面几种方法都可以通过反射的方式, 破坏单例, 而枚举类型是无法通过反射创建实例的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;属于创建型模式&lt;/p&gt;
&lt;p&gt;单例模式,就是采取一定的方法保证在整个系统中,对于某个类,只存在一个实例对象.&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>6大设计原则</title>
    <link href="https://yimchengjie.github.io/2019/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://yimchengjie.github.io/2019/08/10/设计模式/6大设计原则/</id>
    <published>2019-08-10T04:45:11.000Z</published>
    <updated>2020-01-05T01:26:14.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6大设计原则"><a href="#6大设计原则" class="headerlink" title="6大设计原则"></a>6大设计原则</h2><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h3><p>SRP(Single Responsiblity Principle)</p><p><strong>核心定义</strong>:一个接口或者一个类或者一个方法,只负责一件事;</p><p>就像流水线生产,分工合作, 每个人只负责一件事情, 一个人不能负责太多事情, 否则效率低下,而且可能会出问题</p><p>在java程序中, 特别要注意接口的设计, 要遵循单一职责原则, 定义所有实现类通用的职责, 不能把实现类特有的职责放在接口上,否则所有实现类都会受到影响; 但要注意, 要根据业务合理划分责任, 过于细分,会导致类的数量非常庞大, 而且需要相互的耦合, 造成不必要的负责度</p><h3 id="2-里式替换原则"><a href="#2-里式替换原则" class="headerlink" title="2. 里式替换原则"></a>2. 里式替换原则</h3><p>LSP(Liskov Substitution Principle)</p><p><strong>核心定义</strong>:子类应该是可以替换父类,并且在所有使用父类的地方都能够换成子类;</p><p>在java中,子类必须完全实现父类的方法;父类出现的地方换成子类,程序依然能正常运行;子类可以在父类基础上增加新的行为.</p><h3 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3. 依赖倒置原则"></a>3. 依赖倒置原则</h3><p>DIP(Dependence Inversion Principle)</p><p><strong>核心定义</strong>:就是面向接口(或抽象类)编程,各个模块之间不能直接进行依赖, 要通过接口的方式,使各个模块相互独立</p><p>在java中,每个类都尽量继承一个接口;依赖的变量尽量使用接口而不是实现类(比如service依赖dao层,在service接口定义中,只是用dao接口而不是dao实现类);如果基类是抽象类或类,且实现了一些方法,那么尽量不要覆写基类的方法;</p><h3 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h3><p>ISP(Interface Segregation Principle)</p><p><strong>核心定义</strong>:接口的方法要少,类之间的关系要建立在最小接口上;这个单一职责要区分开, 单一职责讲的是类的业务功能单一</p><p>在java中体现为接口的拆分,接口方法尽量定义的少,不要定义没意义的接口</p><h3 id="5-开放封闭原则"><a href="#5-开放封闭原则" class="headerlink" title="5. 开放封闭原则"></a>5. 开放封闭原则</h3><p>OCP(Open Close Principle)</p><p><strong>核心定义</strong>:一个模块的扩展性方面应该是开放的, 而在更改性方面应该是封闭的</p><p>一个网络模块, 原来只有服务端功能,现在要加入客户端功能,那么在不需要修改服务端代码的前提下, 就能扩展客户端, 这样就是前后端分离,在设计之初, 将服务端和客户端分开</p><h3 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6. 迪米特法则"></a>6. 迪米特法则</h3><p>LOD(Law Of Demter)</p><p><strong>核心定义</strong>:一个类应该对自己需要耦合或者调用的类保持最少的了解,也就是低耦合,高内聚</p><p>类与类之间不能有过多的耦合,在系统设计时,不要让一个类依赖太多其他的类, 尽量减少依赖关系</p><h2 id="设计模式概览"><a href="#设计模式概览" class="headerlink" title="设计模式概览"></a>设计模式概览</h2><h3 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h3><p>用于描述”怎样创建对象”,它的主要特点是”将对象的创建与使用分离”</p><p>有<strong>单例</strong>,<strong>原型</strong>,<strong>工厂方法</strong>,<strong>抽象工厂</strong>,<strong>建造者</strong> 5种创造型模式</p><h3 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2. 结构型模式"></a>2. 结构型模式</h3><p>用于描述”如何将对象按某种布局组成更大的结构”</p><p>有<strong>代理</strong>,<strong>适配器</strong>,<strong>桥接</strong>,<strong>装饰者</strong>,<strong>外观</strong>,<strong>享元</strong>,<strong>组合</strong> 7种结构型模式</p><h3 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3. 行为型模式"></a>3. 行为型模式</h3><p>用于描述”类或对象之间怎么相互协作共同完成单个对象无法单独完成的任务,以及怎么样分配职责”</p><p>有<strong>模板方法</strong>,<strong>策略</strong>,<strong>命令</strong>,<strong>责任链</strong>,<strong>状态</strong>,<strong>观察者</strong>,<strong>中介者</strong>,<strong>迭代器</strong>,<strong>访问者</strong>,<strong>备忘录</strong>,<strong>解释器</strong> 11种行为型模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;6大设计原则&quot;&gt;&lt;a href=&quot;#6大设计原则&quot; class=&quot;headerlink&quot; title=&quot;6大设计原则&quot;&gt;&lt;/a&gt;6大设计原则&lt;/h2&gt;&lt;h3 id=&quot;1-单一职责原则&quot;&gt;&lt;a href=&quot;#1-单一职责原则&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ支持的协议</title>
    <link href="https://yimchengjie.github.io/2019/07/30/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/ActiveMQ%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE/"/>
    <id>https://yimchengjie.github.io/2019/07/30/消息中间件/ActiveMQ支持的协议/</id>
    <published>2019-07-30T11:40:31.000Z</published>
    <updated>2019-12-31T09:13:13.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ支持的协议"><a href="#ActiveMQ支持的协议" class="headerlink" title="ActiveMQ支持的协议"></a>ActiveMQ支持的协议</h2><p>ActiveMQ支持多种协议传输和传输方式,允许客户端使用多种协议连接.</p><p>ActiveMQ支持的协议: AUTO、OpenWire、AMQP、Stomp、MQTT等<br>在<code>${ACTIVE_HOME}/conf/activemq.xml</code>中, 通过配置<code>&lt;transportConnectors&gt;</code>就可以使用多种传输方式(==注意配置文件中可能会用到转义字符串, 比如&amp;要用&amp;来表示==)</p><p>ActiveMQ支持的基础传输方式有: VM、TCP、SSL、UDP、Peer、Multicast、HTTP(S)等</p><p>由于TCP的稳定性, 它也是ActiveMQ中最常用的一种传输方式. 在默认的设置中, TCP连接的端口为61616</p><h3 id="OpenWire协议"><a href="#OpenWire协议" class="headerlink" title="OpenWire协议"></a>OpenWire协议</h3><p>OpenWire协议是Apache的一种跨语言的协议,允许从不同的语言和平台访问ActiveMQ<br>默认就是使用这种协议, 功能很全面</p><p>OpenWire支持TCP、SSL、NIO、UDP、VM等传输方式，但URL只配置传输方式时，默认就是使用OpenWire协议</p><h3 id="MQTT协议"><a href="#MQTT协议" class="headerlink" title="MQTT协议"></a>MQTT协议</h3><p>全称Message Queuing Telemetry Transport，即消息队列遥测传输，由IBM开发， 已成为物联网通信的标准</p><p>它结构简单，相比其他的协议更加轻量级</p><h4 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布-订阅模型"></a>发布-订阅模型</h4><p>MQTT协议使用发布-订阅模型<br>提供者发布消息到主题topic上, 只要订阅了这个topic的消费者,都能收到这条消息</p><p>消费者无法收到启动前topic上的消息</p><h4 id="MQTT中的服务质量-QoS"><a href="#MQTT中的服务质量-QoS" class="headerlink" title="MQTT中的服务质量(QoS)"></a>MQTT中的服务质量(QoS)</h4><p>服务质量(QoS)级别 是一种关于发送者和接受者之间信息传递的保证协议</p><p>MQTT支持三种QoS<br>至多一次(0)客户端只发布一次消息到服务器<br>至少一次(1)客户端发送消息,直到服务器返回成功<br>只有一次(2)在(1)的前提下, 客户端继续发送, 客户端查看是否存在, 有就删除</p><p>QoS是的在不可靠的网络下进行通信变得更加简单,因为即使是在非常不可靠的网络下,协议也可以掌控是否需要重发消息, 并保证消息到达</p><h4 id="ActiveMQ中使用MQTT协议"><a href="#ActiveMQ中使用MQTT协议" class="headerlink" title="ActiveMQ中使用MQTT协议"></a>ActiveMQ中使用MQTT协议</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> qos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String broker = <span class="string">"tcp://activemq.tony.com:1883"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passWord = <span class="string">"admin"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MqttClient <span class="title">connect</span><span class="params">(String clientId, String userName,String password)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        MemoryPersistence persistence = <span class="keyword">new</span> MemoryPersistence();</span><br><span class="line">        MqttConnectOptions connOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        connOpts.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line">        connOpts.setUserName(userName);</span><br><span class="line">        connOpts.setPassword(password.toCharArray());</span><br><span class="line">        connOpts.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">        connOpts.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// connOpts.setServerURIs(uris);  //这个是mqtt客户端实现的负载均衡和容错</span></span><br><span class="line">        <span class="comment">// String[] uris = &#123;"tcp://10.100.124.206:1883","tcp://10.100.124.207:1883"&#125;;</span></span><br><span class="line">        MqttClient mqttClient = <span class="keyword">new</span> MqttClient(broker, clientId, persistence);</span><br><span class="line">        mqttClient.setCallback(<span class="keyword">new</span> PushCallback(<span class="string">"test"</span>));</span><br><span class="line">        mqttClient.connect(connOpts);</span><br><span class="line">        <span class="keyword">return</span> mqttClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pub</span><span class="params">(MqttClient sampleClient, String msg, String topic)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MqttMessage message = <span class="keyword">new</span> MqttMessage(msg.getBytes());</span><br><span class="line">        message.setQos(qos);</span><br><span class="line">        message.setRetained(<span class="keyword">false</span>);</span><br><span class="line">        sampleClient.publish(topic, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String str, String clientId, String topic)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MqttClient mqttClient = connect(clientId, userName, passWord);</span><br><span class="line">        <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pub(mqttClient, str, topic);</span><br><span class="line">            System.out.println(<span class="string">"pub--&gt;"</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mqttClient.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        publish(<span class="string">"message content"</span>, <span class="string">"producer-client-id-0"</span>, <span class="string">"x/y/z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PushCallback</span> <span class="keyword">implements</span> <span class="title">MqttCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String threadId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PushCallback</span><span class="params">(String threadId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadId = threadId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器是否正确接收---------"</span> + token.isComplete());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getPayload());</span><br><span class="line">        System.out.println(threadId + <span class="string">" "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> qos = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String broker = <span class="string">"tcp://activemq.tony.com:1883"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passWord = <span class="string">"admin"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MqttClient <span class="title">connect</span><span class="params">(String clientId)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        MemoryPersistence persistence = <span class="keyword">new</span> MemoryPersistence();</span><br><span class="line">        MqttConnectOptions connOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        connOpts.setCleanSession(<span class="keyword">false</span>);</span><br><span class="line">        connOpts.setUserName(userName);</span><br><span class="line">        connOpts.setPassword(passWord.toCharArray());</span><br><span class="line">        connOpts.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">        connOpts.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line">        MqttClient mqttClient = <span class="keyword">new</span> MqttClient(broker, clientId, persistence);</span><br><span class="line">        mqttClient.connect(connOpts);</span><br><span class="line">        <span class="keyword">return</span> mqttClient;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(MqttClient mqttClient, String topic)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] Qos = &#123;qos&#125;;</span><br><span class="line">        String[] topics = &#123;topic&#125;;</span><br><span class="line">        mqttClient.subscribe(topics, Qos, <span class="keyword">new</span> IMqttMessageListener[]&#123;(s, mqttMessage) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"收到新消息"</span> + s + <span class="string">" &gt; "</span> + mqttMessage.toString());</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runsub</span><span class="params">(String clientId, String topic)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        MqttClient mqttClient = connect(clientId);</span><br><span class="line">        <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sub(mqttClient, topic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        runsub(<span class="string">"consumer-client-id-1"</span>, <span class="string">"x/y/z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AUTO协议"><a href="#AUTO协议" class="headerlink" title="AUTO协议"></a>AUTO协议</h3><p>AUTO自动检测协议,可以自动检测ActiveMQ支持的所有协议, 允许使用各种协议的客户端,使用同一个传输</p><h3 id="Stomp协议"><a href="#Stomp协议" class="headerlink" title="Stomp协议"></a>Stomp协议</h3><p>可以使用webSocket传输协议</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ActiveMQ支持的协议&quot;&gt;&lt;a href=&quot;#ActiveMQ支持的协议&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ支持的协议&quot;&gt;&lt;/a&gt;ActiveMQ支持的协议&lt;/h2&gt;&lt;p&gt;ActiveMQ支持多种协议传输和传输方式,允许客户
      
    
    </summary>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="ActiveMQ" scheme="https://yimchengjie.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>深入理解SpringAOP</title>
    <link href="https://yimchengjie.github.io/2019/07/21/JavaWeb%E6%A1%86%E6%9E%B6/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SpringAOP/"/>
    <id>https://yimchengjie.github.io/2019/07/21/JavaWeb框架/深入理解SpringAOP/</id>
    <published>2019-07-21T13:30:45.000Z</published>
    <updated>2019-12-26T09:12:34.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入理解-SpringAOP"><a href="#深入理解-SpringAOP" class="headerlink" title="深入理解 SpringAOP"></a>深入理解 SpringAOP</h2><p>AOP 是指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式</p><p>SpringAOP 的底层其实就是动态代理</p><h3 id="Spring-是如何使用动态代理的"><a href="#Spring-是如何使用动态代理的" class="headerlink" title="Spring 是如何使用动态代理的"></a>Spring 是如何使用动态代理的</h3><ol><li>将业务组件和切面组件添加到容器中,</li><li>创建对象的时候, 根据切入点表达式拦截的类, 加入通知,生成代理对象.</li><li>如果目标对象有实现接口就用 JDK 代理, 反之就用 CGLIB 代理.</li></ol><h3 id="SpringAOP-注解驱动原理"><a href="#SpringAOP-注解驱动原理" class="headerlink" title="SpringAOP 注解驱动原理"></a>SpringAOP 注解驱动原理</h3><p>IoC容器启动中,创建了哪些和AOP有关的组件? 这些组件什么时候工作? 工作内容是什么?</p><h4 id="1-实现入口-EnableAspectJAutoProxy"><a href="#1-实现入口-EnableAspectJAutoProxy" class="headerlink" title="1. 实现入口@EnableAspectJAutoProxy"></a>1. 实现入口@EnableAspectJAutoProxy</h4><p>主要工作:</p><ul><li>@Import(AspectJAutoProxyRegistrar.class)给容器导入 <code>AspectJAutoProxyRegistrar</code> 组件(切面自动代理注册器)</li><li>利用 AspectJAutoProxyRegistrar 给容器中注册一个切面相关的 bean<code>AnnotationAwareAspectJAutoProxyCreator</code>(支持注解的 AspectJ 自动代理创建器)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *代码跟进演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//出发点</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="comment">//跟进</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AspectJAutoProxyRegistrar.class&#125;)</span><br><span class="line"><span class="comment">//点进AspectJAutoProxyRegistrar</span></span><br><span class="line">AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line"><span class="comment">//点进registerAspectJAnnotationAutoProxyCreatorIfNecessary方法</span></span><br><span class="line"><span class="keyword">return</span> registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry, (Object)<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//点进registerAspectJAnnotationAutoProxyCreatorIfNecessary</span></span><br><span class="line"><span class="keyword">return</span> registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);</span><br><span class="line"><span class="comment">//点进AnnotationAwareAspectJAutoProxyCreator</span></span><br></pre></td></tr></table></figure><h4 id="2-AnnotationAwareAspectJAutoProxyCreator-创建过程"><a href="#2-AnnotationAwareAspectJAutoProxyCreator-创建过程" class="headerlink" title="2. AnnotationAwareAspectJAutoProxyCreator 创建过程"></a>2. AnnotationAwareAspectJAutoProxyCreator 创建过程</h4><p><img src="/2019/07/21/JavaWeb%E6%A1%86%E6%9E%B6/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SpringAOP/AnnotationAwareAspectJAutoProxyCreator%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="AnnotationAwareAspectJAutoProxyCreator继承关系"></p><p>主要关注的是它继承了BeanFactoryAware和BeanPostProcessor接口,</p><p>所以它的创建是在BeanFactory进行初始化,注册BeanPostProcessor阶段(也就是BeanFactoryPostProcessor注册完成之后)</p><p>registerBeanPostProcessors(beanFactory);注册 BeanPostProcessor 来处理拦截 bean 的创建(在bean创建前后执行)；</p><ol><li>先获取 IOC 容器已经定义的需要创建对象的所有 BeanPostProcessor</li><li>注册 BeanPostProcessor,实际上就是创建 BeanPostProcessor 对象，保存在容器中；<br>创建 internalAutoProxyCreator 的 BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】<ol><li>创建 Bean 的实例</li><li>populateBean；给 bean 的各种属性赋值</li><li>initializeBean</li><li>invokeAwareMethods()：处理 Aware 接口的方法回调</li><li>applyBeanPostProcessorsBeforeInitialization();应用后置处理器的 postProcessBeforeInitialization();</li><li>invokeInitMethods()；执行自定义的初始化方法</li><li>applyBeanPostProcessorsAfterInitialization()；执行后置处理器的 postProcessAfterInitialization();</li><li>BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；–》aspectJAdvisorsBuilder</li></ol></li><li>把 BeanPostProcessor 注册到 BeanFactory 中；<br>beanFactory.addBeanPostProcessor(postProcessor);</li></ol><h4 id="3-起作用阶段"><a href="#3-起作用阶段" class="headerlink" title="3. 起作用阶段"></a>3. 起作用阶段</h4><p>BeanPostProcessor是在bean实例化前后起作用的, 所以它的执行是在beanFactroy对bean实例化的阶段进行</p><p>finishBeanFactoryInitialization(beanFactory);实例化所有单例 bean</p><ol><li>遍历所有Bean,依次创建对象,使用getBean(beanName);方法</li><li>创建bean<ol><li>先看看容器中是否存在bean,如果存在直接使用,没有再创建</li><li>创建bean;<ol><li>resolveBeforeInstantiation解析,如果能返回一个代理对象则直接用,不能继续</li><li>createBean<ol><li>拿到所有BeanPostProcessor并执行postProcessBeforeInstantiation</li><li>doCreateBean真正的创建bean</li><li>创建完,执行</li></ol></li></ol></li></ol></li></ol><h4 id="4-AnnotationAwareAspectJAutoProxyCreator的作用"><a href="#4-AnnotationAwareAspectJAutoProxyCreator的作用" class="headerlink" title="4. AnnotationAwareAspectJAutoProxyCreator的作用"></a>4. AnnotationAwareAspectJAutoProxyCreator的作用</h4><h5 id="postProcessBeforeInstantiation"><a href="#postProcessBeforeInstantiation" class="headerlink" title="postProcessBeforeInstantiation"></a>postProcessBeforeInstantiation</h5><p>每一个bean创建之前,调用postProcessBeforeInstantiation</p><p>前提: 容器加载了@AspectJ注解的类,并加载了信息,再匹配切入点表达式与哪些类、方法匹配</p><ol><li>判断当前的bean是否在advisedBeans中(里面保存了所有需要增强的bean)</li><li>判断当前bean是否Advice、Pointcut、Advisor、AopInfrastructureBean、被@Aspect注解的类型 或者是设置了跳过自动代理</li><li>是否配置了跳过通知</li></ol><h5 id="postProcessAfterInitialization"><a href="#postProcessAfterInitialization" class="headerlink" title="postProcessAfterInitialization"></a>postProcessAfterInitialization</h5><p>前提：bean实例化完成</p><ol><li>获取bean的所有通知器</li><li>找到当前bean所匹配的通知器</li><li>对通知器进行优先级排序</li><li>将通知器存入adviseBeans</li><li>如果当前的bean需要注入切面,创建bean的代理对象(jdk代理或者cglib代理)</li><li>向容器返回增强后的代理对象</li></ol><h4 id="代理对象如何工作"><a href="#代理对象如何工作" class="headerlink" title="代理对象如何工作"></a>代理对象如何工作</h4><p>容器中保存了基础组件的代理对象</p><ol><li>拦截器拦截目标方法的执行</li><li>根据ProxyFactory对象获取将要执行的目标方法的增强器链</li><li>以任务栏的形式执行通知和目标方法</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><code>@EnableAspectJAutoProxy</code> 开启AOP功能<br>会在容器启动阶段注册一个组件 <code>AnnotationAwareAspectJAutoProxyCreator</code></li><li>容器开始创建</li><li>容器注册后置处理器;<br><code>AnnotationAwareAspectJAutoProxyCreator</code> 继承了后置处理器接口. 被创建并注册进容器</li><li>容器开始创建bean;<ol><li>创建业务逻辑bean;和切面bean</li><li><code>AnnotationAwareAspectJAutoProxyCreator</code>拦截组件创建,如果有已代理对象,直接返回</li><li>组件创建</li><li><code>AnnotationAwareAspectJAutoProxyCreator</code>执行postProcessBeforeInstantiation,给需要增强bean创建代理对象<br>获取目标对象以及advisor(增强器,切面的通知方法) 创建代理</li></ol></li><li>执行目标方法<ol><li>CglibAopProxy.intercept();拦截</li><li>执行通知任务链和目标方法</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深入理解-SpringAOP&quot;&gt;&lt;a href=&quot;#深入理解-SpringAOP&quot; class=&quot;headerlink&quot; title=&quot;深入理解 SpringAOP&quot;&gt;&lt;/a&gt;深入理解 SpringAOP&lt;/h2&gt;&lt;p&gt;AOP 是指在程序运行期间动态的将某段代码切
      
    
    </summary>
    
    
      <category term="JavaWeb框架" scheme="https://yimchengjie.github.io/categories/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JavaWeb框架" scheme="https://yimchengjie.github.io/tags/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://yimchengjie.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringIoC详解</title>
    <link href="https://yimchengjie.github.io/2019/07/10/JavaWeb%E6%A1%86%E6%9E%B6/SpringIoC%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yimchengjie.github.io/2019/07/10/JavaWeb框架/SpringIoC详解/</id>
    <published>2019-07-10T08:30:45.000Z</published>
    <updated>2019-12-26T09:12:31.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringIoC详解"><a href="#SpringIoC详解" class="headerlink" title="SpringIoC详解"></a>SpringIoC详解</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>对于SpringIoC来说,最重要的就是容器了,容器管理这所有的Bean,控制这Bean的依赖注入</p><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>早期基础容器, 可以理解成一个HashMap,key是BeanName,value是Bean实例.</p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>应用上下午,高级容器,相比BeanFactory功能全面很多</p><h4 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h4><p>Bean对象在Spring中是以BeanDefinition来描述的</p><p>Bean的解析主要就是对配置文件或者配置类的解析</p><h3 id="SpringIoC注解驱动初始化过程"><a href="#SpringIoC注解驱动初始化过程" class="headerlink" title="SpringIoC注解驱动初始化过程"></a>SpringIoC注解驱动初始化过程</h3><p>SpringIoC的初始化过程也是ApplicationContext容器的初始化过程</p><p>入口:<code>AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);</code></p><ol><li><p>调用AnnotationConfigApplicationContext构造函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(Class... annotatedClasses)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 先执行父类构造方法,再执行本类无参构造方法</span></span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    <span class="comment">// 2. 注册带注解的类</span></span><br><span class="line">    <span class="keyword">this</span>.register(annotatedClasses);</span><br><span class="line">    <span class="comment">// 3. 更新容器</span></span><br><span class="line">    <span class="keyword">this</span>.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>this(); 默认先调用父类无参构造函数,构建初始对象<strong>DefaultListableBeanFactory</strong>,最基础的BeanFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.customClassLoader = <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">this</span>.refreshed = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line">     <span class="keyword">this</span>.beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>再调用当前类this();创建读取器和扫描器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//BeanDefinition解析器; 用来解析带注解的bean</span></span><br><span class="line">     <span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>);</span><br><span class="line">     <span class="comment">//ClassPath下的BeanDefinition的扫描器(用来扫描类)</span></span><br><span class="line">     <span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建注解模式下的BeanDefinition解析器AnnotatedBeanDefinitionReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, Environment environment)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// BeanName产生器</span></span><br><span class="line">     <span class="keyword">this</span>.beanNameGenerator = <span class="keyword">new</span> AnnotationBeanNameGenerator();</span><br><span class="line">     <span class="comment">// 作用域元数据解析器</span></span><br><span class="line">     <span class="keyword">this</span>.scopeMetadataResolver = <span class="keyword">new</span> AnnotationScopeMetadataResolver();</span><br><span class="line">     Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">     Assert.notNull(environment, <span class="string">"Environment must not be null"</span>);</span><br><span class="line">     <span class="keyword">this</span>.registry = registry;</span><br><span class="line">     <span class="comment">// @Conditionl条件表达式鉴别器</span></span><br><span class="line">     <span class="keyword">this</span>.conditionEvaluator = <span class="keyword">new</span> ConditionEvaluator(registry, environment, (ResourceLoader)<span class="keyword">null</span>);</span><br><span class="line">     AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>跟进AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">registerAnnotationConfigProcessors</span><span class="params">(BeanDefinitionRegistry registry, Object source)</span> </span>&#123;</span><br><span class="line">     DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">     <span class="keyword">if</span> (beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">             beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">             beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="keyword">new</span> LinkedHashSet(<span class="number">4</span>);</span><br><span class="line">     RootBeanDefinition def;</span><br><span class="line">     <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">"org.springframework.context.annotation.internalConfigurationAnnotationProcessor"</span>)) &#123;</span><br><span class="line">         <span class="comment">// 注册主配置类的后置处理器</span></span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.annotation.internalConfigurationAnnotationProcessor"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">"org.springframework.context.annotation.internalAutowiredAnnotationProcessor"</span>)) &#123;</span><br><span class="line">         <span class="comment">// 注册处理@Autowired注解的后置处理器</span></span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.annotation.internalAutowiredAnnotationProcessor"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">"org.springframework.context.annotation.internalRequiredAnnotationProcessor"</span>)) &#123;</span><br><span class="line">         <span class="comment">// 注册处理@Required注解的后置处理器</span></span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.annotation.internalRequiredAnnotationProcessor"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (jsr250Present &amp;&amp; !registry.containsBeanDefinition(<span class="string">"org.springframework.context.annotation.internalCommonAnnotationProcessor"</span>)) &#123;</span><br><span class="line">         <span class="comment">// 注册处理JSR规范注解的后置处理器</span></span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.annotation.internalCommonAnnotationProcessor"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注册处理jpa的后置处理器</span></span><br><span class="line">     <span class="keyword">if</span> (jpaPresent &amp;&amp; !registry.containsBeanDefinition(<span class="string">"org.springframework.context.annotation.internalPersistenceAnnotationProcessor"</span>)) &#123;</span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             def.setBeanClass(ClassUtils.forName(<span class="string">"org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"</span>, AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ClassNotFoundException var6) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot load optional framework class: org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"</span>, var6);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.annotation.internalPersistenceAnnotationProcessor"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注册处理事件监听方法的处理器</span></span><br><span class="line">     <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">"org.springframework.context.event.internalEventListenerProcessor"</span>)) &#123;</span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition(EventListenerMethodProcessor.class);</span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.event.internalEventListenerProcessor"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注册事件监听工厂</span></span><br><span class="line">     <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">"org.springframework.context.event.internalEventListenerFactory"</span>)) &#123;</span><br><span class="line">         def = <span class="keyword">new</span> RootBeanDefinition(DefaultEventListenerFactory.class);</span><br><span class="line">         def.setSource(source);</span><br><span class="line">         beanDefs.add(registerPostProcessor(registry, def, <span class="string">"org.springframework.context.event.internalEventListenerFactory"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//完成spring自身的后置处理器注册</span></span><br><span class="line">     <span class="comment">//到这一步, BeanDefinitionMap中已经保存了一些spring自带的后置处理器的定义信息了</span></span><br><span class="line">     <span class="keyword">return</span> beanDefs;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建ClassPath下的BeanDefinition的扫描器ClassPathBeanDefinitionScanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry, <span class="keyword">boolean</span> useDefaultFilters, Environment environment, ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.beanDefinitionDefaults = <span class="keyword">new</span> BeanDefinitionDefaults();</span><br><span class="line">     <span class="keyword">this</span>.beanNameGenerator = <span class="keyword">new</span> AnnotationBeanNameGenerator();</span><br><span class="line">     <span class="keyword">this</span>.scopeMetadataResolver = <span class="keyword">new</span> AnnotationScopeMetadataResolver();</span><br><span class="line">     <span class="keyword">this</span>.includeAnnotationConfig = <span class="keyword">true</span>;</span><br><span class="line">     Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">     <span class="comment">//设置加载BeanDefinition的注册器</span></span><br><span class="line">     <span class="keyword">this</span>.registry = registry;</span><br><span class="line">     <span class="comment">//是否使用默认的过滤规则</span></span><br><span class="line">     <span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">         <span class="keyword">this</span>.registerDefaultFilters();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//设置环境</span></span><br><span class="line">     <span class="keyword">this</span>.setEnvironment(environment);</span><br><span class="line">     <span class="comment">//设置资源加载器</span></span><br><span class="line">     <span class="keyword">this</span>.setResourceLoader(resourceLoader);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>跟进this.registerDefaultFilters();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 向includeFilters中添加所有@Component注解的类(其他的一些Bean注解也都有@Component)</span></span><br><span class="line">     <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component.class));</span><br><span class="line">     ClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(ClassUtils.forName(<span class="string">"javax.annotation.ManagedBean"</span>, cl), <span class="keyword">false</span>));</span><br><span class="line">         <span class="keyword">this</span>.logger.debug(<span class="string">"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (ClassNotFoundException var4) &#123;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> <span class="function">AnnotationTypeFil        <span class="title">ter</span><span class="params">(ClassUtils.forName(<span class="string">"javax.inject.Named"</span>, cl)</span>, <span class="keyword">false</span>))</span>;</span><br><span class="line">         <span class="keyword">this</span>.logger.debug(<span class="string">"JSR-330 'javax.inject.Named' annotation found and supported for component scanning"</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>注册Bean配置类register(annotatedClasses)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class&lt;?&gt; annotatedClass, String name, Class... qualifiers)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 将Bean配置信息转换成AnnotatedGenericBeanDefinition  注解通用BeanDefinition</span></span><br><span class="line">     AnnotatedGenericBeanDefinition abd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line">     <span class="comment">// 判断@Conditionl条件是否有跳过注册的</span></span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">         <span class="comment">// 解析@Scope作用域, 没有则默认Singleton</span></span><br><span class="line">         ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">         <span class="comment">// 将作用域信息添加到BeanDefinition</span></span><br><span class="line">         abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">         <span class="comment">// 设置beanName</span></span><br><span class="line">         String beanName = name != <span class="keyword">null</span> ? name : <span class="keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="keyword">this</span>.registry);</span><br><span class="line">         AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">         <span class="comment">// 解析@Qualifier</span></span><br><span class="line">         <span class="keyword">if</span> (qualifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line">             Class[] var7 = qualifiers;</span><br><span class="line">             <span class="keyword">int</span> var8 = qualifiers.length;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> var9 = <span class="number">0</span>; var9 &lt; var8; ++var9) &#123;</span><br><span class="line">                 Class&lt;? extends Annotation&gt; qualifier = var7[var9];</span><br><span class="line">                 <span class="comment">// 如果有@Primary注解,向BeanDefinition中写入首选bean</span></span><br><span class="line">                 <span class="keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">                     abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">                 <span class="comment">// 如果有@Lazy注解, 设置懒加载</span></span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">                     abd.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     abd.addQualifier(<span class="keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 封装一个BeanName和BeanDefinition之间的映射关系</span></span><br><span class="line">         BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line">         <span class="comment">// 创建代理对象</span></span><br><span class="line">         definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">         <span class="comment">// 按BeanName将BeanDefinition注册到容器中</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>refresh();  IoC容器启动的核心</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">     <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">         <span class="comment">// 1. 刷新上下文之前的准备工作</span></span><br><span class="line">         <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">         <span class="comment">// 2. 获取初始化BeanFactory</span></span><br><span class="line">         ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">         <span class="comment">// 3. 对BeanFactory进行属性填充</span></span><br><span class="line">         <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 4. 模板方法，注册自己添加的BeanPostFactoryProcessor</span></span><br><span class="line">             <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">             <span class="comment">// 5. 执行BeanFactory后置处理器</span></span><br><span class="line">             <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">             <span class="comment">// 6. 注册Bean后置注册器</span></span><br><span class="line">             <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">             <span class="comment">// 7. 初始化国际化资源处理器</span></span><br><span class="line">             <span class="keyword">this</span>.initMessageSource();</span><br><span class="line">             <span class="comment">// 8. 初始化应用事件多播器</span></span><br><span class="line">             <span class="keyword">this</span>.initApplicationEventMulticaster();</span><br><span class="line">             <span class="comment">// 9. 模板方法，调用某些特殊的bean的初始化，springboot中在这个地方启动tomcat</span></span><br><span class="line">             <span class="keyword">this</span>.onRefresh();</span><br><span class="line">             <span class="comment">// 10. 注册监听器到多播器上</span></span><br><span class="line">             <span class="keyword">this</span>.registerListeners();</span><br><span class="line">             <span class="comment">// 11. 实例化所有非懒加载的单例Bean</span></span><br><span class="line">             <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">             <span class="comment">// 12. 初始化容器生命周期事件处理器，并发布容器的生命周期事件</span></span><br><span class="line">             <span class="keyword">this</span>.finishRefresh();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (BeansException var9) &#123;</span><br><span class="line">             <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                 <span class="keyword">this</span>.logger.warn(<span class="string">"Exception encountered during context initialization - cancelling refresh attempt: "</span> + var9);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">             <span class="keyword">this</span>.cancelRefresh(var9);</span><br><span class="line">             <span class="keyword">throw</span> var9;</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.resetCommonCaches();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 对代码进行进一步跟进,看看每一步中都做了什么</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1. prepareRefresh()</span></span><br><span class="line"><span class="comment">    1. this.startupDate = System.currentTimeMillis();设置启动时间</span></span><br><span class="line"><span class="comment">    2. initPropertySources();自定义属性设置</span></span><br><span class="line"><span class="comment">    3. getEnvironment().validateRequiredProperties();检验属性的合法性</span></span><br><span class="line"><span class="comment">    4. earlyApplicationEvents = new LinkedHashSet();创建早期应用事件集合</span></span><br><span class="line"><span class="comment"> 2. beanFactory = this.obtainFreshBeanFactory();</span></span><br><span class="line"><span class="comment">    1. this.beanFactory.setSerializationId(this.getId());设置BeanFactoryID</span></span><br><span class="line"><span class="comment"> 3. prepareBeanFactory(beanFactory);</span></span><br><span class="line"><span class="comment">    1. addBeanPostProcessor(new ApplicationContextAwareProcessor(this));添加一个ApplicationContextAwareProcessor</span></span><br><span class="line"><span class="comment">    2. ignoreDependencyInterface(XXX.class); 设置忽略注入的接口实现类</span></span><br><span class="line"><span class="comment">    3. registerResolvableDependency(XXX.class,beanFactory); 注册可解析的注入的组件</span></span><br><span class="line"><span class="comment">    4. 添加编译时的AOP组件</span></span><br><span class="line"><span class="comment">    5. 注册环境组件,系统属性组件,系统环境组件</span></span><br><span class="line"><span class="comment"> 4. postProcessBeanFactory(beanFactory);</span></span><br><span class="line"><span class="comment">    1. 子类重写这个方法,在BeanFactory准备完成创建之前做最后的步骤</span></span><br><span class="line"><span class="comment"> 5. invokeBeanFactoryPostProcessors(beanFactory);</span></span><br><span class="line"><span class="comment">    1. 执行BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">       1. 获取所有BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">       2. 先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">       3. 再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">       4. 最后执行其他的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">    2. 执行BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">       1. 获取所有BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">       2. 先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">       3. 再执行实现了Ordered顺序接口的BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">       4. 最后执行其他的BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment"> 6. registerBeanPostProcessors(beanFactory);</span></span><br><span class="line"><span class="comment">    1. 获取所有的BeanPostProcessor</span></span><br><span class="line"><span class="comment">    2. 先BeanPostProcessor</span></span><br><span class="line"><span class="comment">    3. 注册MergedBeanDefinitionPostProcessor</span></span><br><span class="line"><span class="comment">    4. 最后创建一个ApplicationListenerDetector;检查是ApplicationListener的bean</span></span><br><span class="line"><span class="comment"> 7. initMessageSource();</span></span><br><span class="line"><span class="comment">    1. 获取BeanFactory</span></span><br><span class="line"><span class="comment">    2. 判断容器中是否有MessageSource的组件</span></span><br><span class="line"><span class="comment">    3. 如果有则取用, 没有则创建DelegatingMessageSource</span></span><br><span class="line"><span class="comment">    4. 将国际化组件祖册到容器</span></span><br><span class="line"><span class="comment"> 8. initApplicationEventMulticaster();</span></span><br><span class="line"><span class="comment">    1. 获取BeanFactory</span></span><br><span class="line"><span class="comment">    2. 判断容器是否有ApplicationEventMulticaster</span></span><br><span class="line"><span class="comment">    3. 如果有取用, 没有则创建SimpleApplicationEventMulticaster</span></span><br><span class="line"><span class="comment">    4. 将ApplicationEventMulticaster组件添加到BeanFactory</span></span><br><span class="line"><span class="comment"> 9. onRefresh();</span></span><br><span class="line"><span class="comment">    1.  留给子类,子类重写这个方法, 在容器刷新时可以自定义一些逻辑</span></span><br><span class="line"><span class="comment"> 10. registerListeners();</span></span><br><span class="line"><span class="comment">     1.  获取容器中的ApplicationListener</span></span><br><span class="line"><span class="comment">     2.  将所有ApplicationListener添加到ApplicationEventMulticaster</span></span><br><span class="line"><span class="comment">     3.  派发早期事件earlyApplicationEvents</span></span><br><span class="line"><span class="comment"> 11. finishBeanFactoryInitialization(beanFactory);</span></span><br><span class="line"><span class="comment">     1.  preInstantiateSingletons;初始化剩下的所有单实例Bean</span></span><br><span class="line"><span class="comment">         1.  获取容器中的单例beanName</span></span><br><span class="line"><span class="comment">         2.  如果beanName对应的bean不是抽象不是懒加载不是多实例的</span></span><br><span class="line"><span class="comment">         3.  getBean(beanName);</span></span><br><span class="line"><span class="comment">         4.  doGetBean(beanName);</span></span><br><span class="line"><span class="comment">         5.  标记要创建bean了,保证线程安全</span></span><br><span class="line"><span class="comment">         6.  getMergedLocalBeanDefinition(beanName);获得BeanDefinition</span></span><br><span class="line"><span class="comment">         7.  getDependsOn();获取依赖</span></span><br><span class="line"><span class="comment">         8.  递归getBean;创建所依赖Bean</span></span><br><span class="line"><span class="comment">         9.  将获取的依赖bean注册到denpendsOn集合</span></span><br><span class="line"><span class="comment">         10. createBean(beanName, ex1, args);创建bean</span></span><br><span class="line"><span class="comment">         11. doCreateBean(beanName, mbdToUse, args);</span></span><br><span class="line"><span class="comment">             1.  createBeanInstance(beanName, mbd, args);</span></span><br><span class="line"><span class="comment">             2.  调用前置处理器</span></span><br><span class="line"><span class="comment">             3.  属性赋值</span></span><br><span class="line"><span class="comment">             4.  执行初始化</span></span><br><span class="line"><span class="comment">             5.  执行后置处理器</span></span><br><span class="line"><span class="comment">             6.  注册bean销毁方法</span></span><br><span class="line"><span class="comment">             7.  添加到单例bean集合</span></span><br><span class="line"><span class="comment"> 12. finishRefresh();</span></span><br><span class="line"><span class="comment">     1.  初始化生命周期有关后置处理器</span></span><br><span class="line"><span class="comment">     2.  执行容器刷新完成事件</span></span><br><span class="line"><span class="comment">     3.  将ApplicationContext注册到视图中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h5><blockquote><ol><li>Spring容器在启动时,会先加载有关Bean定义信息的配置文件或者配置类(xml注册bean/注解注册bean)</li><li>BeanDefinitionReader将配置文件或者配置类解析成BeanDefinition,并存入容器中BeanDefinitionRegistry</li><li>Spring容器扫描BeanDefinitionRegistry中的所有BeanDefinition,使用BeanFactoryPostProcessor对它们进行加工, 主要是依赖处理和属性赋值</li><li>实例化Bean时,封装Bean然后完成对Bean的属性设置工作</li><li>利用Bean后置处理器,对完成的Bean进行加工</li></ol></blockquote><h5 id="重要组件"><a href="#重要组件" class="headerlink" title="重要组件"></a>重要组件</h5><ol><li><p>Resource<br>xml、properties资源文件的抽象</p></li><li><p>ResourceLoader<br>资源的加载, 解析xml、properties返回Resource</p></li><li><p>BeanDefinition<br>保存了从配置文件中读取到的bean的各种信息,一个bean对应一个BeanDefinition<br>有beanClass、scope、lazyInit等属性</p></li><li><p>BeanDefinitionReader<br>定义读取组件，从Resource资源中读取出BeanDefinition</p></li><li><p>BeanDefinitionRegistry<br>BeanFactory的实现类需要实现这个接口，所以所有BeanFactory都有注册BeanDefinition的功能<br>其内部维护了一个Map，可以将BeanDefinition和beanName的对应关系添加进去</p></li><li><p>Enviroment<br>环境，保存了程序运行的环境参数（JDK版本，jre等等）</p></li><li><p>BeanFactoryPostProcessor接口<br>BeanFactory后置处理器, 扩展切口, 允许它的实现类在容器初始化前后进行相应操作<br>典型的有PropertyPlaceholderConfigurer,占位符配置处理器</p></li><li><p>Aware接口<br>对于实现了XXXXAware的bean,spring会注入相应的XXXX, 通过重写setXXXX的方法</p></li><li><p>BeanPostProcessor接口<br>允许实现它的bean,在实例化前后做相应操作,在最前最后位置</p></li><li><p>InitializingBean接口<br>允许实现它的bean,在实例化前后做相应操作, 在处理器before之后和after之前</p></li><li><p>DisposableBean接口<br>允许实现它的bean,在摧毁前后做相应操作</p></li><li><p>FactoryBean接口<br>允许实现它的bean,在beanFactory.getBean()获取该bean时, 会调用这个bean中重写的方法getObject,而不是直接返回该bean<br>工厂模式的体现</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringIoC详解&quot;&gt;&lt;a href=&quot;#SpringIoC详解&quot; class=&quot;headerlink&quot; title=&quot;SpringIoC详解&quot;&gt;&lt;/a&gt;SpringIoC详解&lt;/h2&gt;&lt;h3 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="JavaWeb框架" scheme="https://yimchengjie.github.io/categories/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JavaWeb框架" scheme="https://yimchengjie.github.io/tags/JavaWeb%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://yimchengjie.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://yimchengjie.github.io/2019/07/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/07/02/设计模式/代理模式/</id>
    <published>2019-07-02T11:35:45.000Z</published>
    <updated>2020-01-03T04:51:06.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式(Proxy)"></a>代理模式(Proxy)</h2><p>属于结构型模式</p><p>Proxy-代理模式是指为其他对象提供一种代理,来控制对这个对象的访问</p><p>即对A对象进行代理后, 本来A对象的功能交给代理B来做; 代理就是原实例前后添加一层处理.</p><h3 id="为什么使用代理模式"><a href="#为什么使用代理模式" class="headerlink" title="为什么使用代理模式"></a>为什么使用代理模式</h3><ul><li>授权机制: 不同级别的用户对于同一对象的访问权限是不同的, 要用代理实现对不同用户的访问权限的控制</li><li>某个客户端不能直接操作一个对象, 但又要和那个对象互动, 也要通过代理实现间接互动</li><li>代理类为委托类预处理消息,过滤消息,把消息传递给委托类, 以及事后对返回结果的处理等.</li></ul><h3 id="3种代理模式"><a href="#3种代理模式" class="headerlink" title="3种代理模式"></a>3种代理模式</h3><h4 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h4><p>实现步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步:创建服务类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步:实现服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步:创建代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(<span class="keyword">final</span> UserService userService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService=userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备登录"</span>);</span><br><span class="line">        userService.login();</span><br><span class="line">        System.out.println(<span class="string">"登录完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四步:测试运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        UserServiceProxy userServiceProxy=<span class="keyword">new</span> UserServiceProxy(userService);</span><br><span class="line">        userServiceProxy.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代理可以做到符合开闭原则的对目标对象进行功能扩展, 但是工作量大, 要给每个对象创建代理类, 而且不易管理, 接口发生改变, 代理类也要改变</p><h4 id="2-JDK动态代理"><a href="#2-JDK动态代理" class="headerlink" title="2. JDK动态代理"></a>2. JDK动态代理</h4><p>动态代理中, 不需要手动创建代理类了, 只要编写一个动态处理器就OK了</p><p>实现步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步:编写动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(<span class="keyword">final</span> Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object[] agrs)</span><span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备"</span>);</span><br><span class="line">        Object result=method.invoke(Object,args);</span><br><span class="line">        System.out.println(<span class="string">"完成"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步:编写测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        UserService userServiceProxy=(UserService)Proxy.newProxyInstnce(UserService.class.getClassLoader(),<span class="keyword">new</span> Class[]&#123;UserService.class&#125;,<span class="keyword">new</span> DynamicProxyHandler(userService));</span><br><span class="line">        userServiceProxy.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-CGLIB代理"><a href="#3-CGLIB代理" class="headerlink" title="3. CGLIB代理"></a>3. CGLIB代理</h4><p>JDK实现动态代理需要实现类通过接口定义业务的方法, 对于没有接口的类就不能实现代理.这就需要CGLIB了</p><p>实现步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步:创建CGLIB代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> Object</span></span></span><br><span class="line"><span class="function"><span class="params">    target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(This.target.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] args,MeyhodProxy methodProxy)</span><span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备"</span>);</span><br><span class="line">        Object result=method.invoke(object,args);</span><br><span class="line">        System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步:创建测试类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibDynamicProxyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        CglibProxy cglibProxy=<span class="keyword">new</span> CglibProxy();</span><br><span class="line">        UserService userServiceProxy=(UserService)cglibProxy.getInstance(userService1;)</span><br><span class="line">        userServiceProxy.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CGLIB代理比JDK代理的性能更高,但是CGLIB比JDK创建代理的耗时要更高,所以单例对象CGLIB更合适, 反之JDK更合适.</p><p><img src="/2019/07/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/CGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="CGLIB动态代理执行流程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代理模式-Proxy&quot;&gt;&lt;a href=&quot;#代理模式-Proxy&quot; class=&quot;headerlink&quot; title=&quot;代理模式(Proxy)&quot;&gt;&lt;/a&gt;代理模式(Proxy)&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;Proxy-代理模式是指为其他对象提供一种
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ入门</title>
    <link href="https://yimchengjie.github.io/2019/06/30/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/ActiveMQ%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/06/30/消息中间件/ActiveMQ入门/</id>
    <published>2019-06-30T14:10:45.000Z</published>
    <updated>2020-01-07T07:45:33.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ入门"><a href="#ActiveMQ入门" class="headerlink" title="ActiveMQ入门"></a>ActiveMQ入门</h2><p>ActiveMQ是Apache出品, 是一个完全支持JMS1.1和J2EE 1.4规范的JMS Provider实现<br>尽管JMS已经出台很久, 但在J2EE中仍然扮演者重要角色</p><h3 id="ActiveMQ特性"><a href="#ActiveMQ特性" class="headerlink" title="ActiveMQ特性"></a>ActiveMQ特性</h3><ol><li>支持多种编程语言</li><li>支持多种传输协议</li><li>支持多种持久化方式(文件系统/数据库)</li></ol><h3 id="ActiveMQ的安装"><a href="#ActiveMQ的安装" class="headerlink" title="ActiveMQ的安装"></a>ActiveMQ的安装</h3><ol><li>从官网下载ActiveMQ</li><li>利用Xftp将文件传到服务器</li><li>解压到<code>/var</code>目录下</li><li>修改文件名为<code>activemq</code></li></ol><h3 id="ActiveMQ启动"><a href="#ActiveMQ启动" class="headerlink" title="ActiveMQ启动"></a>ActiveMQ启动</h3><p>在activemq文件下使用命令<code>./bin/activemq start</code> 后台启动ActiveMQ</p><p>但最好是将ActiveMQ作为一个服务来启动,这样可以使activemq在系统启动时自动启动</p><h4 id="创建ActiveMQ服务"><a href="#创建ActiveMQ服务" class="headerlink" title="创建ActiveMQ服务"></a>创建ActiveMQ服务</h4><ol><li><p>使用vim创建一个服务文件<br><code>vi /usr/lib/systemd/system/activemq.service</code></p></li><li><p>输入内容</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ActiveMQ service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/var/activemq/bin/activemq start</span><br><span class="line">ExecStop=/var/activemq/bin/activemq stop</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=9</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=activemq</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/var/activemq/bin/env</code>文件<br> 将JAVA_HOME的注释删除,然后填入系统jdk的安装路径</p></li><li><p>启动ActiveMQ服务<br> 使用<code>systemctl start activemq</code>来启动服务</p></li><li><p>查看服务状态<br> 使用命令<code>systemctl status activemq</code></p></li><li><p>设置开机自动启动<br> <code>ln -s /usr/lib/systemd/system/activemq.service/etc/systemd/system/multi-user.target.wants/activemq.service</code><br> <code>systemctl enable activemq</code></p></li><li><p>在防火墙添加ActiveMQ的Web管理端口和通讯端口</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Web管理端口默认为8161,通讯端口默认为61616</span><br><span class="line">ufw allow 8161</span><br><span class="line">ufw allow 61616</span><br><span class="line"># 部分服务器需要在对应的服务提供商管理页面修改出入站规则</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问<code>http://服务IP:8161/admin</code>进入管理平台<br>账户默认:admin<br>密码默认:admin</p></li></ol><h4 id="Web管理平台配置"><a href="#Web管理平台配置" class="headerlink" title="Web管理平台配置"></a>Web管理平台配置</h4><p>ActiveMQ的Web管理平台是基于jetty运行,因此在/var/activemq/conf目录可以查看jetty的配置文件</p><p>在<code>/var/activemq/conf/jetty.xml</code>文件中,可以进行修改端口,密码等内容</p><h3 id="使用ActiveMQ"><a href="#使用ActiveMQ" class="headerlink" title="使用ActiveMQ"></a>使用ActiveMQ</h3><p>在Java中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ProducerThread(<span class="string">"tcp://119.3.218.159:61616"</span>, <span class="string">"queue1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        String brokerUrl;</span><br><span class="line">        String destinationUrl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// brokerUrl中间件url地址, destinationUrl队列url</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProducerThread</span><span class="params">(String brokerUrl, String destinationUrl)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.brokerUrl = brokerUrl;</span><br><span class="line">            <span class="keyword">this</span>.destinationUrl = destinationUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ActiveMQConnectionFactory connectionFactory;</span><br><span class="line">            Connection conn;</span><br><span class="line">            Session session;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1、创建连接工厂</span></span><br><span class="line">                connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(brokerUrl);</span><br><span class="line">                <span class="comment">// 2、创建连接对象md</span></span><br><span class="line">                conn = connectionFactory.createConnection();</span><br><span class="line">                conn.start();</span><br><span class="line">                <span class="comment">// 3、创建会话</span></span><br><span class="line">                session = conn.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">                <span class="comment">// 4、创建点对点发送的目标</span></span><br><span class="line">                Destination destination = session.createQueue(destinationUrl);</span><br><span class="line">                <span class="comment">// 5、创建生产者消息</span></span><br><span class="line">                MessageProducer producer = session.createProducer(destination);</span><br><span class="line">                <span class="comment">// 设置生产者的模式，有两种可选 持久化 / 不持久化</span></span><br><span class="line">                producer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 6、创建一条文本消息</span></span><br><span class="line">                String text = <span class="string">"Hello world!"</span>;</span><br><span class="line">                TextMessage message = session.createTextMessage(text);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="comment">// 7、发送消息</span></span><br><span class="line">                    producer.send(message);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 8、 关闭连接</span></span><br><span class="line">                session.close();</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// http://activemq.apache.org/consumer-features.html</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ConsumerThread(<span class="string">"tcp://119.3.218.159:61616"</span>, <span class="string">"queue1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> ConsumerThread(<span class="string">"tcp://119.3.218.159:61616"</span>, <span class="string">"queue1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String brokerUrl;</span><br><span class="line">        String destinationUrl;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConsumerThread</span><span class="params">(String brokerUrl, String destinationUrl)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.brokerUrl = brokerUrl;</span><br><span class="line">            <span class="keyword">this</span>.destinationUrl = destinationUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ActiveMQConnectionFactory connectionFactory;</span><br><span class="line">            Connection conn;</span><br><span class="line">            Session session;</span><br><span class="line">            MessageConsumer consumer;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// brokerURL http://activemq.apache.org/connection-configuration-uri.html</span></span><br><span class="line">                <span class="comment">// 1、创建连接工厂</span></span><br><span class="line">                connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="keyword">this</span>.brokerUrl);</span><br><span class="line">                <span class="comment">// 2、创建连接对象</span></span><br><span class="line">                conn = connectionFactory.createConnection();</span><br><span class="line">                conn.start(); <span class="comment">// 一定要启动</span></span><br><span class="line">                <span class="comment">// 3、创建会话（可以创建一个或者多个session）</span></span><br><span class="line">                session = conn.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">                <span class="comment">// 4、创建点对点接收的目标，queue - 点对点</span></span><br><span class="line">                Destination destination = session.createQueue(destinationUrl);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 5、创建消费者消息 http://activemq.apache.org/destination-options.html</span></span><br><span class="line">                consumer = session.createConsumer(destination);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 6、接收消息(没有消息就持续等待)</span></span><br><span class="line">                Message message = consumer.receive();</span><br><span class="line">                <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"收到文本消息："</span> + ((TextMessage) message).getText());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                consumer.close();</span><br><span class="line">                session.close();</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-broker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>geronimo-jms_1.1_spec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.geronimo.specs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web控制台"><a href="#web控制台" class="headerlink" title="web控制台"></a>web控制台</h3><p>activemq支持web控制台<br><code>http://host:8161/admin</code> 默认账号admin,密码admin</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>ActiveMQ的消息持久化机制有JDBC，AMQ,KahaDB和LevelDB，无论使用哪种持久化，消息的存储逻辑都是一致的</p><ol><li>Queue(消息队列)类型的持久化机制</li><li>Topic(消息订阅)类型的持久化机制</li></ol><h4 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h4><ol><li>JDBC: 存入数据库,方便管理,性能低</li><li>AMQ: 基于文件的存储方式,写入速度快,且易于恢复,但是建索引时间长</li><li>KahaDB: 默认方式,相比AMQ恢复更快,并且占用数据量更少</li><li>LevelDB: 谷歌开发的持久化高性能类库.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ActiveMQ入门&quot;&gt;&lt;a href=&quot;#ActiveMQ入门&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ入门&quot;&gt;&lt;/a&gt;ActiveMQ入门&lt;/h2&gt;&lt;p&gt;ActiveMQ是Apache出品, 是一个完全支持JMS1.1和J2EE 
      
    
    </summary>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="消息中间件" scheme="https://yimchengjie.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="ActiveMQ" scheme="https://yimchengjie.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
</feed>
