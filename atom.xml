<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycjBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yimchengjie.github.io/"/>
  <updated>2020-03-04T09:19:23.564Z</updated>
  <id>https://yimchengjie.github.io/</id>
  
  <author>
    <name>yanchengjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中String在jvm内存中位置</title>
    <link href="https://yimchengjie.github.io/2020/03/04/JavaSE/Java%E4%B8%ADString%E5%9C%A8jvm%E5%86%85%E5%AD%98%E4%B8%AD%E4%BD%8D%E7%BD%AE/"/>
    <id>https://yimchengjie.github.io/2020/03/04/JavaSE/Java中String在jvm内存中位置/</id>
    <published>2020-03-04T09:14:33.000Z</published>
    <updated>2020-03-04T09:19:23.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中String在jvm内存中位置"><a href="#Java中String在jvm内存中位置" class="headerlink" title="Java中String在jvm内存中位置"></a>Java中String在jvm内存中位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//intern 如果存在在常量池, 返回常量池中的,</span></span><br><span class="line">        <span class="comment">//       如果存在在堆, 返回堆中的对象引用</span></span><br><span class="line">        String a=<span class="string">"hello"</span>;  <span class="comment">//在常量池</span></span><br><span class="line">        String b=<span class="string">"hello"</span>;  <span class="comment">//在常量池</span></span><br><span class="line">        System.out.println(a==b);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        String c=<span class="keyword">new</span> String(<span class="string">"hello"</span>);  <span class="comment">//在堆</span></span><br><span class="line">        System.out.println(b==c);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        String d=<span class="string">"world"</span>; <span class="comment">//在常量池</span></span><br><span class="line"></span><br><span class="line">        String aa=a+d;  <span class="comment">//在常量池</span></span><br><span class="line">        String bb=c+d;  <span class="comment">//在堆</span></span><br><span class="line">        System.out.println(aa==bb); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        bb.intern();  <span class="comment">//将堆中引用创建到常量池</span></span><br><span class="line">        String cc=<span class="keyword">new</span> String(<span class="string">"helloworld"</span>); <span class="comment">//创建在堆中</span></span><br><span class="line">        System.out.println(bb==cc);    <span class="comment">//false</span></span><br><span class="line">        System.out.println(bb==cc.intern());  <span class="comment">//true   cc.intern()发现了在常量池中bb创建的引用,并返回</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结:<br><code>String str=new String(&quot;abc&quot;);</code> 会在常量池和堆中都创建abc, str指向堆中的abc<br><code>String str=&quot;abc&quot;;</code>只在常量池创建abc<br><code>String str=new String(&quot;abc&quot;)+&quot;def&quot;;</code>在常量池中创建abc,def;在堆中创建abc和abcdef; str指向堆中abcdef;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java中String在jvm内存中位置&quot;&gt;&lt;a href=&quot;#Java中String在jvm内存中位置&quot; class=&quot;headerlink&quot; title=&quot;Java中String在jvm内存中位置&quot;&gt;&lt;/a&gt;Java中String在jvm内存中位置&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="JavaSE" scheme="https://yimchengjie.github.io/categories/JavaSE/"/>
    
    
      <category term="JVM" scheme="https://yimchengjie.github.io/tags/JVM/"/>
    
      <category term="JavaSE" scheme="https://yimchengjie.github.io/tags/JavaSE/"/>
    
      <category term="String" scheme="https://yimchengjie.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>词典分词</title>
    <link href="https://yimchengjie.github.io/2020/02/17/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%AF%8D%E5%85%B8%E5%88%86%E8%AF%8D/"/>
    <id>https://yimchengjie.github.io/2020/02/17/自然语言处理/词典分词/</id>
    <published>2020-02-17T05:09:54.000Z</published>
    <updated>2020-03-07T16:21:33.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词典分词"><a href="#词典分词" class="headerlink" title="词典分词"></a>词典分词</h2><hr><p>词典分词是基于规则的分词手段<br>给定一部词典,词典分词就是一个确定的查词和输出的规则系统.</p><h3 id="什么是词"><a href="#什么是词" class="headerlink" title="什么是词"></a>什么是词</h3><h4 id="词的定义"><a href="#词的定义" class="headerlink" title="词的定义"></a>词的定义</h4><p>在语言学上,词语的定义是具备独立意义的最小单位. 但是对于一些词,比如”吃饭”,有些人会认为”吃饭”是一个词, 有些人会认为,应该拆分为”吃”,”饭”;由于没有统一标准,所以语言学上的定义没有实施效果.</p><p>在中文分词当中,词的定义就是字典中的字符串;因此不在字典中的字就不属于词了.而词是不断变化的,数量也是无穷无尽的.</p><h4 id="齐夫定律"><a href="#齐夫定律" class="headerlink" title="齐夫定律"></a>齐夫定律</h4><p>齐夫定律: 一个单词的词频和它的词频排名成反比.<br>这意味着, 排面越靠后的单词, 它的词频会越来越接近 0.</p><p>所以词典把词频较高的部分收录,就能解决大部分的分词了.</p><h3 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h3><p>一般一部分词词典的其中一条数据有这样的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单词 词性 词频 --&gt;</span><br><span class="line">希望 v 386 n 96</span><br></pre></td></tr></table></figure><h3 id="切分算法"><a href="#切分算法" class="headerlink" title="切分算法"></a>切分算法</h3><ol><li><p>完全切分<br>完全切分就是将一段文本中的所有单词,中所有可能的词都切分开来, 具体的做法就是双循环遍历所有可能的词.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentFully</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; wordList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= text.length(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            String word = text.substring(i, j);</span><br><span class="line">            <span class="keyword">if</span> (dictionary.containsKey(word))</span><br><span class="line">            &#123;</span><br><span class="line">                wordList.add(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正向最长匹配<br>在完全切分的基础上, 优化为优先输出更长的单词, 正向最长指的是下标的扫描是从前往后, 二层循环中, 循环一次最多保存一个最长词.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentForwardLongest</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">     List&lt;String&gt; wordList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); )</span><br><span class="line">     &#123;</span><br><span class="line">         String longestWord = text.substring(i, i + <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= text.length(); ++j)</span><br><span class="line">         &#123;</span><br><span class="line">             String word = text.substring(i, j);</span><br><span class="line">             <span class="keyword">if</span> (dictionary.containsKey(word))</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (word.length() &gt; longestWord.length())</span><br><span class="line">                 &#123;</span><br><span class="line">                     longestWord = word;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         wordList.add(longestWord);</span><br><span class="line">         i += longestWord.length();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逆向最长匹配<br>与正向最长匹配的区别是下标扫描从后往前,正向是从短的单词扫描到长的单词,逆向是从最长的词扫描到最短的词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentBackwardLongest</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">     List&lt;String&gt; wordList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = text.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; )</span><br><span class="line">     &#123;</span><br><span class="line">         String longestWord = text.substring(i, i + <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line">         &#123;</span><br><span class="line">             String word = text.substring(j, i + <span class="number">1</span>);</span><br><span class="line">             <span class="keyword">if</span> (dictionary.containsKey(word))</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (word.length() &gt; longestWord.length())</span><br><span class="line">                 &#123;</span><br><span class="line">                     longestWord = word;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         wordList.add(<span class="number">0</span>, longestWord);</span><br><span class="line">         i -= longestWord.length();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向最长匹配<br>双向最长匹配就是将正向最长和逆向最长结合起来<br><strong>同时执行</strong>正向和逆向<br><strong>返回词数少的</strong>那个,<br>或者<strong>返回单个字少的</strong>那个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">segmentBidirectional</span><span class="params">(String text, Map&lt;String, CoreDictionary.Attribute&gt; dictionary)</span></span>&#123;</span><br><span class="line">     List&lt;String&gt; forwardLongest = segmentForwardLongest(text, dictionary);</span><br><span class="line">     List&lt;String&gt; backwardLongest = segmentBackwardLongest(text, dictionary);</span><br><span class="line">     <span class="keyword">if</span> (forwardLongest.size() &lt; backwardLongest.size())</span><br><span class="line">         <span class="keyword">return</span> forwardLongest;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (forwardLongest.size() &gt; backwardLongest.size())</span><br><span class="line">         <span class="keyword">return</span> backwardLongest;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (countSingleChar(forwardLongest) &lt; countSingleChar(backwardLongest))</span><br><span class="line">             <span class="keyword">return</span> forwardLongest;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             <span class="keyword">return</span> backwardLongest;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 统计分词结果中的单字数量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countSingleChar</span><span class="params">(List&lt;String&gt; wordList)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (String word : wordList)&#123;</span><br><span class="line">         <span class="keyword">if</span> (word.length() == <span class="number">1</span>)</span><br><span class="line">             ++size;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> size;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;词典分词&quot;&gt;&lt;a href=&quot;#词典分词&quot; class=&quot;headerlink&quot; title=&quot;词典分词&quot;&gt;&lt;/a&gt;词典分词&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;词典分词是基于规则的分词手段&lt;br&gt;给定一部词典,词典分词就是一个确定的查词和输出的规则系统.&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理入门</title>
    <link href="https://yimchengjie.github.io/2020/02/13/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/02/13/自然语言处理/自然语言处理入门/</id>
    <published>2020-02-13T03:53:11.000Z</published>
    <updated>2020-03-02T03:52:26.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自然语言处理入门"><a href="#自然语言处理入门" class="headerlink" title="自然语言处理入门"></a>自然语言处理入门</h2><hr><p>自然语言处理是一门融合了计算机科学,人工智能以及语言学的交叉学科, 这门学科研究的是如何通过机器学习等技术,让计算机学会处理人类的语言,最终实现理解人类语言</p><h3 id="自然语言处理的层次"><a href="#自然语言处理的层次" class="headerlink" title="自然语言处理的层次"></a>自然语言处理的层次</h3><ol><li><p>语音,图像和文本<br>在自然语言处理中,语音和图像都会通过处理,如语音识别,光学字符识别等转化为文本,然后再开始自然语言处理任务</p></li><li><p>中文分词,词性标注和命名实体识别<br>这三个人物都是围绕词语进行,统称为<strong>词法分析</strong>, 其主要任务就是将文本分隔为有意义的词语(中文分词),确定每个词语的词性和浅层的歧义消除(词性标注),并且识别一些较长的专有名词(命名实体识别)</p></li><li><p>信息抽取<br>词法分析结束以后,文本呈现的是结构化的单词列表, 信息抽取通过算法抽取出需要的信息,比如抽取出文本中所有公司, 抽取出句子的关键词</p></li><li><p>文本分类和文本聚类<br>文本分类是将文本分门别类整理出来<br>文本聚类是将相似的文本归档,排除重复文档,而不关系文档具体类别</p></li><li><p>句法分析<br>词法分析只能得到零散的词汇, 还不知道词与词之间的联系, 句法分析就是得到词语词之间的关系</p></li><li><p>语义分析与篇章分析<br>语义分析区别于语法分析,侧重语义而非语法,包括词义消歧(确定一个多义词在句子中的意思),语义角色标注(标注谓语与句子其他成分的关系),语义依存分析(分析句子中词语之间的语义关系)</p></li></ol><h3 id="自然语言处理的历史"><a href="#自然语言处理的历史" class="headerlink" title="自然语言处理的历史"></a>自然语言处理的历史</h3><table><thead><tr><th>基础研究</th><th>基于规则的专家系统</th><th>基于统计的学习方法</th><th>深度学习</th></tr></thead><tbody><tr><td>1950 年首次提出”机器能否思考”</td><td>1980 年第一个基于规则的专家系统</td><td>1990 年,统计模型语料库</td><td>2010 年后,深层神经网络</td></tr></tbody></table><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习是指: 不直接编程却能赋予计算机提高能力的方法;</p><p>指计算机通过某项任务的经验数据提高了在该项任务上的能力.</p><h4 id="机器学习的重要概念"><a href="#机器学习的重要概念" class="headerlink" title="机器学习的重要概念"></a>机器学习的重要概念</h4><ol><li><p>模型: 模型是对现实问题的数学抽象,由一个假设函数以及一系列参数构成<br>在机器学习中, 算法指机器学习的方法, 模型指被机器学习的算法<br>模型参数指特征权重或特征优先级</p></li><li><p>特征: 特征是指事物的特点转化成的数值(要提取事物的哪些特征需要取决于具体的问题)<br>提取特征的过程称为特征提取<br>自动提取特征的模板称为特征模板<br>设计特征模板的过程称为特征过程</p></li><li><p>数据集: 数据集可以理解为机器学习的习题集, 在自然语言处理中称为<strong>语料库</strong>, 数据集中的一个实例称为样本</p></li><li><p>监督学习: 数据集附带标准答案,机器通过与答案的对比,慢慢修正模型参数, 迭代学习<br>迭代学习的过程称为训练<br>训练用到的数据集称为训练集<br>利用训练后的模型进行计算的过程称为预测</p></li><li><p>无监督学习: 没有答案的训练<br>无监督学习一般用于聚类和降为, 两者不需要标注数据</p></li></ol><h5 id="语料库"><a href="#语料库" class="headerlink" title="语料库"></a>语料库</h5><p>语料库作为自然语言处理的数据集, 是机器学习不可或缺的习题集, 每个语料库都有不同用途; 语料规则难以制定,规范难以执行.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自然语言处理入门&quot;&gt;&lt;a href=&quot;#自然语言处理入门&quot; class=&quot;headerlink&quot; title=&quot;自然语言处理入门&quot;&gt;&lt;/a&gt;自然语言处理入门&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;自然语言处理是一门融合了计算机科学,人工智能以及语言学的交叉学科, 这门学科研究的
      
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://yimchengjie.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLP" scheme="https://yimchengjie.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Electron+Vue入门</title>
    <link href="https://yimchengjie.github.io/2020/02/07/Vue.js/Electron+Vue%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/02/07/Vue.js/Electron+Vue入门/</id>
    <published>2020-02-07T08:24:19.000Z</published>
    <updated>2020-03-02T02:52:59.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Electron-Vue入门"><a href="#Electron-Vue入门" class="headerlink" title="Electron+Vue入门"></a>Electron+Vue入门</h2><hr><h3 id="了解Electron"><a href="#了解Electron" class="headerlink" title="了解Electron"></a>了解Electron</h3><p>Electron是由Github开发，<strong>用HTML，CSS和JavaScript来构建跨平台桌面应用程序</strong>的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><p>Electron使用Web页面来作为桌面应用的GUI,所以可以把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器</p><h3 id="Electron-Vue结合使用"><a href="#Electron-Vue结合使用" class="headerlink" title="Electron+Vue结合使用"></a>Electron+Vue结合使用</h3><p>Vue的开发环境,node.js,npm就可以进行Electron开发</p><h4 id="使用Electron-vue框架"><a href="#使用Electron-vue框架" class="headerlink" title="使用Electron-vue框架"></a>使用Electron-vue框架</h4><p>Electron-vue是基于electron和vue结合搭建的开发脚手架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/Vue.js/Electron+Vue%E5%85%A5%E9%97%A8/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="脚手架构建项目"></p><h4 id="Electron主进程和渲染进程"><a href="#Electron主进程和渲染进程" class="headerlink" title="Electron主进程和渲染进程"></a>Electron主进程和渲染进程</h4><p>Electron项目启动后,会先找到<code>package.json</code>中的main,找到主进程<code>main.js</code>,在主进程中运行的脚本通过创建Web页面来展示用户界面.Web页面运行在渲染进程. 一个Electron应用总是有且只有一个主进程.</p><p>主要模块:</p><p><img src="/2020/02/07/Vue.js/Electron+Vue%E5%85%A5%E9%97%A8/%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97.png" alt="主要模块"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Electron-Vue入门&quot;&gt;&lt;a href=&quot;#Electron-Vue入门&quot; class=&quot;headerlink&quot; title=&quot;Electron+Vue入门&quot;&gt;&lt;/a&gt;Electron+Vue入门&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;了解Electron&quot;&gt;
      
    
    </summary>
    
    
      <category term="Vue.js" scheme="https://yimchengjie.github.io/categories/Vue-js/"/>
    
    
      <category term="前端框架" scheme="https://yimchengjie.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Electron" scheme="https://yimchengjie.github.io/tags/Electron/"/>
    
      <category term="Vue.js" scheme="https://yimchengjie.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Shiro权限管理</title>
    <link href="https://yimchengjie.github.io/2020/02/07/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Shiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://yimchengjie.github.io/2020/02/07/分布式开发技术/Shiro权限管理/</id>
    <published>2020-02-06T17:30:49.000Z</published>
    <updated>2020-02-27T12:27:22.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shiro权限管理"><a href="#Shiro权限管理" class="headerlink" title="Shiro权限管理"></a>Shiro权限管理</h2><p>Shiro是一款强大灵活的安全框架,可以处理身份<strong>认证</strong>,<strong>授权</strong>,<strong>加密</strong>和<strong>会话管理</strong></p><h3 id="权限管理概念"><a href="#权限管理概念" class="headerlink" title="权限管理概念"></a>权限管理概念</h3><p>一般有用户参与的系统,都需要权限管理,权限管理<strong>实现了对用户访问系统的控制</strong></p><ol><li><p>用户认证</p><p> 用户认证,即用户访问系统时,会被验证用户身份的合法性</p></li><li><p>用户授权</p><p> 在用户认证通过后,系统对用户访问资源进行控制,用户拥有资源的权限时,才可以进行访问</p></li></ol><h4 id="权限管理组成"><a href="#权限管理组成" class="headerlink" title="权限管理组成"></a>权限管理组成</h4><ol><li>主体(账号、密码)</li><li>权限(权限名称、资源名称、资源访问地址)</li><li>角色(角色名称)</li><li>角色和权限的关系(角色id、权限id)</li><li>主体和角色的关系(主体id、角色id)</li></ol><h4 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h4><p>用户需要分配相应的权限才可以访问相应资源<br>通常给用户分配资源权限需要将权限信息持久化保存,比如存到关系型数据库</p><p>然后实现访问控制</p><ol><li><p>基于角色的访问控制</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user.hasRole(<span class="string">"部门经理"</span>))&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 基于角色的访问控制,不利于代码的维护,扩展性差,因为判断角色的条件都写死在代码中</p></li><li><p>基于资源的访问控制</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user.hasPermission (<span class="string">'用户报表查看（权限标识符）'</span>))&#123;</span><br><span class="line">    <span class="comment">//系统资源内容</span></span><br><span class="line">    <span class="comment">//用户报表查看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 资源在系统中不变,建议使用基于资源的访问控制</p></li></ol><h3 id="Shiro架构"><a href="#Shiro架构" class="headerlink" title="Shiro架构"></a>Shiro架构</h3><ol><li>Subject: 当前用户</li><li>SecurityManager: 管理啊所有Subject,SecurityManager是Shiro架构的核心</li><li>Realms: 用户进行权限信息的验证,可以自己实现,它封装了与数据源连接的细节,在配置Shiro的时候,必须指定至少一个Realm来实现认证/授权</li></ol><h4 id="Shiro认证过程"><a href="#Shiro认证过程" class="headerlink" title="Shiro认证过程"></a>Shiro认证过程</h4><ol><li>创建SecurityManager</li><li>Subject提交认证</li><li>SecurityManager认证</li><li>Authenticator认证</li><li>Realm认证</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 框架提供默认Realm</span></span><br><span class="line">    SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">"ycj"</span>,<span class="string">"123456"</span>,<span class="string">"admin"</span>,<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建SecurityManager</span></span><br><span class="line">        DefaultSecurityManager securityManager=<span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//   1.1 为SecurityManager设置Realm</span></span><br><span class="line">        securityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">        <span class="comment">//   2.1 为SecurityUtils注入securityManager</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//   2.2 获取当前Subject</span></span><br><span class="line">        Subject subject=SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//   2.3 收集用户名和凭证</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"ycj"</span>,<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   2.4 将用户名和凭证提交到SecurityManager,获取认证</span></span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="comment">//判断认证状态</span></span><br><span class="line">        System.out.println(<span class="string">"isAuthenticated:"</span> + subject.isAuthenticated());</span><br><span class="line">        <span class="comment">//判断是否有以下角色权限</span></span><br><span class="line">        subject.checkRoles(<span class="string">"admin"</span>,<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//退出,取消授权</span></span><br><span class="line">        subject.logout();</span><br><span class="line">        System.out.println(<span class="string">"isAuthenticated:"</span> + subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shiro权限管理&quot;&gt;&lt;a href=&quot;#Shiro权限管理&quot; class=&quot;headerlink&quot; title=&quot;Shiro权限管理&quot;&gt;&lt;/a&gt;Shiro权限管理&lt;/h2&gt;&lt;p&gt;Shiro是一款强大灵活的安全框架,可以处理身份&lt;strong&gt;认证&lt;/strong
      
    
    </summary>
    
    
      <category term="分布式开发技术" scheme="https://yimchengjie.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Shiro" scheme="https://yimchengjie.github.io/tags/Shiro/"/>
    
      <category term="权限管理" scheme="https://yimchengjie.github.io/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门篇</title>
    <link href="https://yimchengjie.github.io/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>https://yimchengjie.github.io/2020/02/03/容器化技术/Docker入门篇/</id>
    <published>2020-02-02T17:30:49.000Z</published>
    <updated>2020-02-28T08:14:25.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker入门篇"><a href="#Docker入门篇" class="headerlink" title="Docker入门篇"></a>Docker入门篇</h2><hr><p>Docker是世界领先的软件容器平台,利用Docker可以消除协作编码时”在我的机器上可以正常工作”的问题</p><p>Docker将一整套环境打包封装成镜像,无需重复配置环境,解决了环境带来的种种问题. Docker容器间是进程隔离的,互不影响</p><h3 id="Docker术语"><a href="#Docker术语" class="headerlink" title="Docker术语"></a>Docker术语</h3><ol><li>镜像: 系统的环境整个打包</li><li>容器: 镜像启动后的实例</li><li>仓库: 专门存放镜像的地方</li></ol><h3 id="第一个Docker"><a href="#第一个Docker" class="headerlink" title="第一个Docker"></a>第一个Docker</h3><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">官方链接</a></p><p>安装环境: Ubuntu 16.04</p><ol><li><p>更新包索引</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装软件包,允许在HTTPS上使用存储库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg-agent \</span><br><span class="line">software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加Docker的官方GPC秘钥</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p> 通过查看指纹最后8位,以验证是否拥有带指纹的秘钥</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><p> <img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/%E6%A3%80%E9%AA%8C%E7%A7%98%E9%92%A5.png" alt="检验秘钥"></p></li><li><p>设置稳定存储库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">$</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">stable"</span><br></pre></td></tr></table></figure></li><li><p>安装Docker引擎</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 先更新一遍索引包 --&gt;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">&lt;!-- 安装最新版本Docker引擎,Docker社区,Docker容器 --&gt;</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>查看Docker版本</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p> <img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/Docker%E7%89%88%E6%9C%AC.png" alt="Docker版本"></p></li><li><p>运行HelloWorld镜像</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p> <img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/DockerHelloWorld.png" alt="DockerHelloWorld"></p><p> 运行<code>docker run hello-world</code>的过程</p><ol><li>本地找hello-world</li><li>没有,去DockerHub拉取一份hello-world镜像,并运行</li></ol></li></ol><h3 id="配置镜像地址"><a href="#配置镜像地址" class="headerlink" title="配置镜像地址"></a>配置镜像地址</h3><p>Docker默认的镜像地址DockerHub在国外,访问慢,这里添加阿里云的加速</p><p><img src="/2020/02/03/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E5%85%A5%E9%97%A8%E7%AF%87/%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F.png" alt="配置加速"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker入门篇&quot;&gt;&lt;a href=&quot;#Docker入门篇&quot; class=&quot;headerlink&quot; title=&quot;Docker入门篇&quot;&gt;&lt;/a&gt;Docker入门篇&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Docker是世界领先的软件容器平台,利用Docker可以消除协作编码时”
      
    
    </summary>
    
    
      <category term="容器化技术" scheme="https://yimchengjie.github.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://yimchengjie.github.io/tags/Docker/"/>
    
      <category term="容器" scheme="https://yimchengjie.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Selenium在爬虫中的应用</title>
    <link href="https://yimchengjie.github.io/2020/01/30/%E7%88%AC%E8%99%AB/Selenium%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/30/爬虫/Selenium在爬虫中的应用/</id>
    <published>2020-01-30T13:30:22.000Z</published>
    <updated>2020-02-26T14:41:13.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Selenium-在爬虫中的应用"><a href="#Selenium-在爬虫中的应用" class="headerlink" title="Selenium 在爬虫中的应用"></a>Selenium 在爬虫中的应用</h2><hr><h3 id="什么是-Selenium"><a href="#什么是-Selenium" class="headerlink" title="什么是 Selenium"></a>什么是 Selenium</h3><p>Selenium 是目前用的最广泛的 Web UI 自动化测试框架。<br>核心功能是在多个浏览器上进行自动化测试<br>支持跨平台,支持多种语言.</p><h3 id="在-Java-中使用-Selenium"><a href="#在-Java-中使用-Selenium" class="headerlink" title="在 Java 中使用 Selenium"></a>在 Java 中使用 Selenium</h3><p>在学习爬虫实践的过程中,发现很多网站使用 js 渲染,且 api 调用需要秘钥,导致无法爬取, 这时候就用到了 Selenium, 通过 Selenium 我们能得到经过浏览器渲染后产生的 HTML 文档.毕竟浏览器最终呈现的都是解析后的. 这样我们就能获得完整的 HTML 文档了</p><ol><li><p>在 maven 中导入包</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--selenium--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用浏览器调试工具</p><p> 要使用 WebUI 自动化测试, 需要使用浏览器的驱动<br> 工具系统安装的浏览器,选择对应版本的驱动<br> <a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">谷歌浏览器驱动下载地址</a></p></li><li><p>使用 WebDriver</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 得到WebDriver实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebDriver <span class="title">initWebDriber</span><span class="params">(String diverPath)</span> </span>&#123;</span><br><span class="line">    System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, diverPath);<span class="comment">// diverPath是chromedriver服务地址</span></span><br><span class="line">    WebDriver webDriver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">    <span class="keyword">return</span> webDriver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 打开页面</span></span><br><span class="line">webDriver.get(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 进行操作(比如登录,打开隐藏窗口等)</span></span><br><span class="line">driver.findElement(By.className(<span class="string">"UG_box"</span>));<span class="comment">//找到要操作的element</span></span><br><span class="line">webElement.click(); <span class="comment">//使用获得的element进行点击操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 下载页面</span></span><br><span class="line">String html = webDriver.getPageSource();</span><br><span class="line"><span class="comment">// 得到String格式的HTML文档</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="findElement-findElements详解"><a href="#findElement-findElements详解" class="headerlink" title="findElement/findElements详解"></a>findElement/findElements详解</h4><p>通过findElement/findElements可以定位element,获取element进行后续操作<br>通常使用By与之结合, By是一个类,里面封装了获取element的方法.</p><ol><li><p>By.id()</p><p> 根据标签的<strong>id</strong>获取</p></li><li><p>By.name()</p><p> 通过标签的<strong>name</strong>获取</p></li><li><p>By.tagName()</p><p> 根据 标签 获取</p></li><li><p>By.className()</p><p> 根据标签中<strong>类class</strong>的<strong>值</strong>获取</p></li><li><p>By.lintText()</p><p> 通过页面中<strong>超链接包含的文字</strong>来定位</p></li><li><p>By.xpath()</p><p> 通过Xpath语法定位</p></li></ol><h4 id="对于浏览器窗口的操作"><a href="#对于浏览器窗口的操作" class="headerlink" title="对于浏览器窗口的操作"></a>对于浏览器窗口的操作</h4><p>有时候不是所有操作都能用HTML定位来做,比如浏览器弹出的各种窗口</p><ol><li><p>操作弹出窗口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取弹出窗口</span></span><br><span class="line">Alert al = driver.switchTo().alert();</span><br><span class="line"><span class="comment">// 选择确定按钮</span></span><br><span class="line">al.accept();</span><br><span class="line"><span class="comment">// 选择取消按钮</span></span><br><span class="line">al.dismiss();</span><br></pre></td></tr></table></figure></li><li><p>浏览器全屏</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.manage().window().maximize();</span><br></pre></td></tr></table></figure></li><li><p>关闭浏览器窗口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.quit();</span><br><span class="line"></span><br><span class="line">driver.close();</span><br></pre></td></tr></table></figure></li><li><p>刷新/前进/回退</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刷新</span></span><br><span class="line">driver.navigate().refresh();</span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line">driver.navigate().forward();</span><br><span class="line"><span class="comment">// 回退</span></span><br><span class="line">driver.navigate().back();</span><br></pre></td></tr></table></figure></li></ol><h4 id="程序等待方式"><a href="#程序等待方式" class="headerlink" title="程序等待方式"></a>程序等待方式</h4><ol><li><p>sleep();</p><p> 强制等待,设置睡眠时间</p></li><li><p>implicitlyWait()：隐式等待，等待元素被发现、命令完成，超出了设置的时间则跑出异常</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line"><span class="comment">//设置脚本在查找元素时的最大等待时间</span></span><br><span class="line">driver.manage().timeouts().implicitlyWait(<span class="number">15</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></li><li><p>WebDriverWait</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置等待的时长，最长10s</span></span><br><span class="line">WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(driver, <span class="number">10</span>);  </span><br><span class="line">wait.until(ExpectedConditions.presenceOfElementLocated(By.id(<span class="string">"app"</span>))));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Selenium-在爬虫中的应用&quot;&gt;&lt;a href=&quot;#Selenium-在爬虫中的应用&quot; class=&quot;headerlink&quot; title=&quot;Selenium 在爬虫中的应用&quot;&gt;&lt;/a&gt;Selenium 在爬虫中的应用&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;什么是-
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://yimchengjie.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic入门</title>
    <link href="https://yimchengjie.github.io/2020/01/17/%E7%88%AC%E8%99%AB/WebMagic%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/17/爬虫/WebMagic入门/</id>
    <published>2020-01-17T13:39:19.000Z</published>
    <updated>2020-02-26T14:41:31.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebMagic-入门"><a href="#WebMagic-入门" class="headerlink" title="WebMagic 入门"></a>WebMagic 入门</h2><p>WebMagic 采用完全模块化的设计，有着强大的可扩展性,基于 HttpClient 和 Jsoup<br>核心简单但却涵盖了爬虫的全部流程。<br>有着丰富的页面抽取 API<br>支持多线程分布式，支持爬取动态 js<br>没有框架依赖</p><h3 id="WebMagic-架构"><a href="#WebMagic-架构" class="headerlink" title="WebMagic 架构"></a>WebMagic 架构</h3><p>WebMagic 框架包含四个组件，PageProcessor、Scheduler、Downloader 和 Pipeline。这四大组件对应爬虫生命周期中的处理、管理、下载和持久化等功能。<br>这四个组件都是 Spider 中的属性，爬虫框架通过 Spider 启动和管理。</p><ol><li>Downloader: 负责从互联网上下载页面,以便后续处理.一般无需自己实现</li><li>Scheduler: 负责管理待抓取的 URL,以及一些去重工作.一般无需自己实现</li><li>PageProcessor: 负责解析页面,抽取目标信息,以及发现新 URL,需要自定义</li><li>Pipeline: 负责抽取结果的处理,包括计算,持久化等.</li></ol><h4 id="数据流转的对象"><a href="#数据流转的对象" class="headerlink" title="数据流转的对象"></a>数据流转的对象</h4><ol><li>Request: 是对 URL 地址的一层封装,一个 Request 对象对应一个 URL 地址</li><li>Page: 代表了从 Downloader 下载到的一个页面,可能是 HTML 页面也可能是其他文本内容(XML,JSON)</li><li>ResultItems: 相当于一个 MAP,保存了 PageProcessor 处理的结果,供 Pipeline 使用</li></ol><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>maven 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--webmagic--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>在 WebMagic 中,实现爬虫只需要编写一个类,实现 PageProcessor 接口即可,这个类基本上包含了抓取一个网站,所需要写的所有代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPageProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 部分一：抓取网站的相关配置，包括编码、抓取间隔、重试次数等</span></span><br><span class="line">  <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="comment">// process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 部分二：定义如何抽取页面信息，并保存下来</span></span><br><span class="line">      page.putField(<span class="string">"author"</span>, page.getUrl().regex(<span class="string">"https://github\\.com/(\\w+)/.*"</span>).toString());</span><br><span class="line">      page.putField(<span class="string">"name"</span>, page.getHtml().xpath(<span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>).toString());</span><br><span class="line">      <span class="keyword">if</span> (page.getResultItems().get(<span class="string">"name"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//skip this page</span></span><br><span class="line">          page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      page.putField(<span class="string">"readme"</span>, page.getHtml().xpath(<span class="string">"//div[@id='readme']/tidyText()"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 部分三：从页面发现后续的url地址来抓取</span></span><br><span class="line">      page.addTargetRequests(page.getHtml().links().regex(<span class="string">"(https://github\\.com/[\\w\\-]+/[\\w\\-]+)"</span>).all());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> site;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Spider.create(<span class="keyword">new</span> TestPageProcessor())</span><br><span class="line">              <span class="comment">//从"https://github.com/code4craft"开始抓</span></span><br><span class="line">              .addUrl(<span class="string">"https://github.com/code4craft"</span>)</span><br><span class="line">              <span class="comment">//开启5个线程抓取</span></span><br><span class="line">              .thread(<span class="number">5</span>)</span><br><span class="line">              <span class="comment">//启动爬虫</span></span><br><span class="line">              .run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解模式开发"><a href="#注解模式开发" class="headerlink" title="注解模式开发"></a>注解模式开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetUrl</span>(<span class="string">"https://github.com/\\w+/\\w+"</span>)   <span class="comment">//要抓取的目标url</span></span><br><span class="line"><span class="comment">// 在TargetUrl页面得到的URL,只要符合TargetUrl的格式,也会被下载</span></span><br><span class="line"><span class="comment">//  TargetUrl还支持定义sourceRegion，这个参数是一个XPath表达式，指定了这个URL从哪里得到——不在sourceRegion的URL不会被抽取。</span></span><br><span class="line"><span class="meta">@HelpUrl</span>(<span class="string">"https://github.com/\\w+"</span>)   <span class="comment">// 为了访问目标url需要访问的url</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    对于博客页，HelpUrl是列表页，TargetUrl是文章页。</span></span><br><span class="line"><span class="comment">    对于论坛，HelpUrl是帖子列表，TargetUrl是帖子详情。</span></span><br><span class="line"><span class="comment">    对于电商网站，HelpUrl是分类列表，TargetUrl是商品详情。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExtractBy注解主要作用于字段，它表示“使用这个抽取规则，将抽取到的结果保存到这个字段中”。</span></span><br><span class="line">    <span class="meta">@ExtractBy</span>(value = <span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>, notNull = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractByUrl</span>(<span class="string">"https://github\\.com/(\\w+)/.*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractBy</span>(<span class="string">"//div[@id='readme']/tidyText()"</span>)</span><br><span class="line">    <span class="keyword">private</span> String readme;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OOSpider.create(Site.me().setSleepTime(<span class="number">1000</span>)</span><br><span class="line">                , <span class="keyword">new</span> ConsolePageModelPipeline(), GithubRepo.class)</span><br><span class="line">                .addUrl(<span class="string">"https://github.com/code4craft"</span>).thread(<span class="number">5</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一个完整流程"><a href="#一个完整流程" class="headerlink" title="一个完整流程"></a>一个完整流程</h5><ol><li><p>编写爬虫</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetUrl</span>(<span class="string">"https://github.com/\\w+/\\w+"</span>)</span><br><span class="line"><span class="meta">@HelpUrl</span>(<span class="string">"https://github.com/\\w+"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractBy</span>(value = <span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>, notNull = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractByUrl</span>(<span class="string">"https://github\\.com/(\\w+)/.*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExtractBy</span>(<span class="string">"//div[@id='readme']/tidyText()"</span>)</span><br><span class="line">    <span class="keyword">private</span> String readme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OOSpider是入口, 参数分别为, 请求参数, 结果处理链, 爬虫类</span></span><br><span class="line">    OOSpider.create(Site.me().setSleepTime(<span class="number">1000</span>)</span><br><span class="line">            , <span class="keyword">new</span> ConsolePageModelPipeline(), GithubRepo.class)</span><br><span class="line">            .addUrl(<span class="string">"https://github.com/code4craft"</span>).thread(<span class="number">5</span>).run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebMagic-入门&quot;&gt;&lt;a href=&quot;#WebMagic-入门&quot; class=&quot;headerlink&quot; title=&quot;WebMagic 入门&quot;&gt;&lt;/a&gt;WebMagic 入门&lt;/h2&gt;&lt;p&gt;WebMagic 采用完全模块化的设计，有着强大的可扩展性,基于 H
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="WebMagic" scheme="https://yimchengjie.github.io/tags/WebMagic/"/>
    
  </entry>
  
  <entry>
    <title>线性结构</title>
    <link href="https://yimchengjie.github.io/2020/01/16/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
    <id>https://yimchengjie.github.io/2020/01/16/算法与数据结构/线性结构/</id>
    <published>2020-01-16T04:06:37.000Z</published>
    <updated>2020-03-07T07:02:16.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><hr><p>线性表是具有 n 个相同类型元素的有限序列</p><h3 id="常见的线性表"><a href="#常见的线性表" class="headerlink" title="常见的线性表"></a>常见的线性表</h3><ol><li><p><strong>顺序表</strong>:</p><ul><li><strong>动态数组</strong><ul><li>数组是一种顺序存储的线性表, 所有元素的内存地址都是连续的;</li><li>开辟,销毁内存空间的次数相对较少,但可能造成内存空间浪费(可以采取缩容机制)</li></ul></li></ul></li><li><p><strong>链表</strong>:</p><ul><li><strong>单链表</strong><ul><li>HashMap中用到了单链表</li></ul></li><li><strong>双链表</strong><ul><li>开辟,销毁内存空间的次数相对较多,但不会造成内存空间浪费</li></ul></li><li><strong>循环链表</strong></li><li><strong>静态链表</strong></li></ul></li><li><p><strong>栈</strong>:</p></li><li><p><strong>队列</strong>:</p><ul><li><strong>顺序队列</strong></li><li><strong>双端队列</strong></li><li><strong>循环队列</strong></li></ul></li></ol><h4 id="双链表vs动态数组"><a href="#双链表vs动态数组" class="headerlink" title="双链表vs动态数组"></a>双链表vs动态数组</h4><p>如果频繁在<strong>尾部</strong>进行<strong>添加,删除</strong>操作, 选择<strong>动态数组</strong><br>如果频繁在<strong>头部</strong>进行<strong>添加,删除</strong>,使用<strong>双链表</strong><br>如果有频繁的<strong>任意位置的添加,删除</strong>,选择<strong>双链表</strong><br>如果频繁的<strong>查询</strong>,选择<strong>动态数组</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线性结构&quot;&gt;&lt;a href=&quot;#线性结构&quot; class=&quot;headerlink&quot; title=&quot;线性结构&quot;&gt;&lt;/a&gt;线性结构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;线性表是具有 n 个相同类型元素的有限序列&lt;/p&gt;
&lt;h3 id=&quot;常见的线性表&quot;&gt;&lt;a href=&quot;#常见的线性
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://yimchengjie.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线性表" scheme="https://yimchengjie.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://yimchengjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度和空间复杂度</title>
    <link href="https://yimchengjie.github.io/2020/01/14/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://yimchengjie.github.io/2020/01/14/算法与数据结构/时间复杂度和空间复杂度/</id>
    <published>2020-01-14T08:44:37.000Z</published>
    <updated>2020-02-21T17:59:20.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h2><p>算法的时间复杂度和空间复杂度是用来描述算法优劣的两个指标</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的时间复杂度反应了算法执行时间随输入规模增长而增长的量级,通常的时间复杂度指的是最坏时间复杂度</p><h4 id="时间复杂度预估步骤"><a href="#时间复杂度预估步骤" class="headerlink" title="时间复杂度预估步骤"></a>时间复杂度预估步骤</h4><ol><li>找出基准语句,即算法中执行次数最多的那条语句</li><li>计算基本语句的执行次数的数量级</li><li>用O()表示算法的时间性能,括号内为基准语句执行次数的数量级</li></ol><h4 id="预估时间复杂度的具体实例"><a href="#预估时间复杂度的具体实例" class="headerlink" title="预估时间复杂度的具体实例"></a>预估时间复杂度的具体实例</h4><p>注: 只计算时间复杂度</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度 O(1)</span></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"n &gt; 10"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">5</span>) &#123; <span class="comment">// 2</span></span><br><span class="line">    System.out.println(<span class="string">"n &gt; 5"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"n &lt;= 5"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环内语句最大执行次数: 15*n</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环内语句最大执行次数: n^2</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="comment">// java中整形数值相除当x&lt;y时x/y=0</span></span><br><span class="line"><span class="keyword">while</span> ((n = n / <span class="number">2</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n除几次2=1  -&gt;  log2(n)</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="keyword">while</span> ((n = n / <span class="number">5</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环内语句最大执行次数: n除几次5=1  -&gt;  log5(n)</span></span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i = i * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 外层循环执行次数: log2(n)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 单独内层循环语句执行次数为: n</span></span><br><span class="line">        <span class="comment">// 基准语句最大执行次数为: n*log2(n)</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>算法的空间复杂度是算法在运行时间内临时占用的内存空间的大小,但一般的程序只要满足占用空间小于可用空间即可. 所以尝尝牺牲空间复杂度来满足时间复杂度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间复杂度和空间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度和空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度和空间复杂度&quot;&gt;&lt;/a&gt;时间复杂度和空间复杂度&lt;/h2&gt;&lt;p&gt;算法的时间复杂度和空间复杂度是用来描述算法优劣的两个指标&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://yimchengjie.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="时间复杂度" scheme="https://yimchengjie.github.io/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
      <category term="空间复杂度" scheme="https://yimchengjie.github.io/tags/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup技术入门</title>
    <link href="https://yimchengjie.github.io/2020/01/03/%E7%88%AC%E8%99%AB/Jsoup%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2020/01/03/爬虫/Jsoup技术入门/</id>
    <published>2020-01-03T14:11:13.000Z</published>
    <updated>2020-02-21T17:58:47.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup技术入门"><a href="#Jsoup技术入门" class="headerlink" title="Jsoup技术入门"></a>Jsoup技术入门</h2><p>在使用Jsoup之前,解析响应通常使用字符串和正则表达式来获取目标数据, 但是正则表达式还是相对麻烦.</p><p>Jsoup是一款Java的HTML解析器,可以直接解析某个URL地址,HTML内容. Jsoup提供了丰富的API,可以向前端一样通过DOM等操作方法获取目标数据</p><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>虽然Jsoup也可以直接通过URL抓取内容, 但不用来做爬虫,因为开发中往往需要使用多线程,连接池等技术, Jsoup的支持并不好, 所以Jsoup通常依赖解析数据</p><h4 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUrl</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Jsoup解析URL地址</span></span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com"</span>),<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 使用标签选择器获取标题</span></span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析String"><a href="#解析String" class="headerlink" title="解析String"></a>解析String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html=SpiderFirst.getSpider(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析File"><a href="#解析File" class="headerlink" title="解析File"></a>解析File</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\yanchengjie\\Desktop\\baidu.html"</span>),<span class="string">"utf8"</span>);</span><br><span class="line">    String title = document.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line">    System.out.println(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDOM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html = SpiderFirst.getSpider(<span class="string">"http://www.itcast.cn/"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    Element element = document.getElementById(<span class="string">"webim"</span>);</span><br><span class="line">    System.out.println(element.toString());</span><br><span class="line">    <span class="comment">// 获取id值</span></span><br><span class="line">    String id = element.id();</span><br><span class="line">    String id_ = element.attr(<span class="string">"id"</span>);</span><br><span class="line">    System.out.println(id + <span class="string">" "</span> + id_);</span><br><span class="line">    <span class="comment">// 获取className</span></span><br><span class="line">    String className = element.child(<span class="number">0</span>).className();</span><br><span class="line">    String className_ = element.child(<span class="number">0</span>).attr(<span class="string">"class"</span>);</span><br><span class="line">    System.out.println(className+<span class="string">" "</span>+className_);</span><br><span class="line">    <span class="comment">// 获取所有元素</span></span><br><span class="line">    Attributes attrs = element.child(<span class="number">0</span>).child(<span class="number">0</span>).child(<span class="number">0</span>).attributes();</span><br><span class="line">    System.out.println(attrs.toString());</span><br><span class="line">    <span class="comment">// 获取文本内容</span></span><br><span class="line">    String text = element.child(<span class="number">0</span>).child(<span class="number">0</span>).child(<span class="number">0</span>).text();</span><br><span class="line">    System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择器操作"><a href="#选择器操作" class="headerlink" title="选择器操作"></a>选择器操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装好的HttpClient爬虫</span></span><br><span class="line">    String html = SpiderFirst.getSpider(<span class="string">"http://www.itcast.cn/"</span>);</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line">    <span class="comment">// 使用标签选择器</span></span><br><span class="line">    Elements elements = document.select(<span class="string">"span"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element: elements)&#123;</span><br><span class="line">        System.out.println(element.text());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用id选择器</span></span><br><span class="line">    Element element = document.select(<span class="string">"#webim"</span>).first();</span><br><span class="line">    System.out.println(element.toString());</span><br><span class="line">    <span class="comment">// 使用类选择器</span></span><br><span class="line">    Elements elements1 = document.select(<span class="string">".a_default"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element1: elements1)&#123;</span><br><span class="line">        System.out.println(element1.text());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 元素选择器</span></span><br><span class="line">    Elements elements2 = document.select(<span class="string">"[class=slogan]"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element2: elements2)&#123;</span><br><span class="line">        System.out.println(element2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组合选择器</span></span><br><span class="line">    Elements elements3 = document.select(<span class="string">"img.slogan"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element3: elements3)&#123;</span><br><span class="line">        System.out.println(element3.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Elements elements4 = document.select(<span class="string">".box_hd &gt; h2"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element element4: elements4)&#123;</span><br><span class="line">        System.out.println(element4.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup技术入门&quot;&gt;&lt;a href=&quot;#Jsoup技术入门&quot; class=&quot;headerlink&quot; title=&quot;Jsoup技术入门&quot;&gt;&lt;/a&gt;Jsoup技术入门&lt;/h2&gt;&lt;p&gt;在使用Jsoup之前,解析响应通常使用字符串和正则表达式来获取目标数据, 但是正则表
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="Jsoup" scheme="https://yimchengjie.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL之MongoDB</title>
    <link href="https://yimchengjie.github.io/2020/01/03/%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL%E4%B9%8BMongoDB/"/>
    <id>https://yimchengjie.github.io/2020/01/03/数据库/NoSQL之MongoDB/</id>
    <published>2020-01-03T09:21:16.000Z</published>
    <updated>2020-02-26T14:54:20.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NoSQL-之-MongoDB"><a href="#NoSQL-之-MongoDB" class="headerlink" title="NoSQL 之 MongoDB"></a>NoSQL 之 MongoDB</h2><hr><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><p>以 Ubuntu 为例</p><p><code>sudo apt install mongodb</code>–安装命令</p><p><code>systemctl status mongodb</code>–检查服务</p><h3 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h3><table><thead><tr><th>SQL 术语</th><th>MongoDB 术语</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>表/集合</td></tr><tr><td>row</td><td>document</td><td>记录行/文档</td></tr><tr><td>column</td><td>field</td><td>字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td>-</td><td>连表查询/MongoDB 不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB 自动将_id 字段设置为主键</td></tr></tbody></table><h3 id="MongoDB-Java"><a href="#MongoDB-Java" class="headerlink" title="MongoDB Java"></a>MongoDB Java</h3><p>在 Java 中使用 MongoDB</p><p>直接使用 Spring Data MongoDB</p><ol><li><p>添加 spring-boot-starter-data-mongodb 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># user:用户名,</span><br><span class="line"># mongo1.example.com:host地址,</span><br><span class="line"># 27017:端口号</span><br><span class="line"># test:数据库名</span><br><span class="line">spring.data.mongodb.uri=mongodb:<span class="comment">//user:secret@mongo1.example.com:27017/test</span></span><br></pre></td></tr></table></figure></li><li><p>使用 MongoTemplate</p></li></ol><p>MongoTemplate 提供了增删改查的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MongoCollection mongoCollection = mongoTemplate.getCollection(<span class="string">"weibo"</span>);</span><br><span class="line">        String index=mongoCollection.createIndex(<span class="keyword">new</span> Document().append(<span class="string">"text"</span>, <span class="number">1</span>));</span><br><span class="line">        Long count=mongoCollection.countDocuments();</span><br><span class="line">        mongoTemplate.createCollection(<span class="string">""</span>);</span><br><span class="line">        System.out.println(index+<span class="string">"  "</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NoSQL-之-MongoDB&quot;&gt;&lt;a href=&quot;#NoSQL-之-MongoDB&quot; class=&quot;headerlink&quot; title=&quot;NoSQL 之 MongoDB&quot;&gt;&lt;/a&gt;NoSQL 之 MongoDB&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;MongoDB 将数据存储
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="NoSQL" scheme="https://yimchengjie.github.io/tags/NoSQL/"/>
    
      <category term="MongoDB" scheme="https://yimchengjie.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>HttpClient技术入门</title>
    <link href="https://yimchengjie.github.io/2019/12/30/%E7%88%AC%E8%99%AB/HttpClient%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/12/30/爬虫/HttpClient技术入门/</id>
    <published>2019-12-30T12:05:53.000Z</published>
    <updated>2020-02-21T17:58:15.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HttpClient技术入门"><a href="#HttpClient技术入门" class="headerlink" title="HttpClient技术入门"></a>HttpClient技术入门</h2><p>网络爬虫通常都是使用Http协议访问互联网,所以HttpClient这个同样是Http协议的客户端技术就被运用到了爬虫技术中<br>只需要在maven引入HttpClient就可以使用</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建HttpClient对象(Default默认设置的)</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">// 2.创建请求对象,需要Url参数</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    <span class="comment">// 3.发起请求,接收响应</span></span><br><span class="line">    CloseableHttpResponse httpResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpResponse = httpClient.execute(httpGet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.解析请求,获取数据</span></span><br><span class="line">    <span class="comment">// 4.1 判断状态码</span></span><br><span class="line">    <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">// 4.2 获取主体数据</span></span><br><span class="line">        HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4.3 数据转码</span></span><br><span class="line">            String context = EntityUtils.toString(httpEntity,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(context);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-构建HTTP请求"><a href="#1-构建HTTP请求" class="headerlink" title="1. 构建HTTP请求"></a>1. 构建HTTP请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">URI uri = <span class="keyword">new</span> URIBuilder().setScheme(<span class="string">"http"</span>)</span><br><span class="line">                          .setHost(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">                          .setPath(<span class="string">"/s"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"ie"</span>,<span class="string">"utf-8"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"f"</span>,<span class="string">"8"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"rsv_bp"</span>,<span class="string">"1"</span>)</span><br><span class="line">                          .setParameter(<span class="string">"tn"</span>,<span class="string">"80035161_2_dg"</span>)</span><br><span class="line">                          .build();</span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(uri);</span><br></pre></td></tr></table></figure><h4 id="2-添加消息头"><a href="#2-添加消息头" class="headerlink" title="2. 添加消息头"></a>2. 添加消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpResponse response = <span class="keyword">new</span> BasicHttpResponse(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,<span class="string">"OK"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>,<span class="string">"c1=a; path=/; domain=localhost"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>,<span class="string">"c2=b; path=\"/\", c3=c; domain=\"localhost\""</span>);</span><br><span class="line">Header h1 = response.getFirstHeader(<span class="string">"Set-Cookie"</span>);</span><br><span class="line">Header h2 = response.getLastHeader(<span class="string">"Set-Cookie"</span>);</span><br><span class="line">Header[] hs = response.getHeaders(<span class="string">"Set-Cookie"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-生成HTTP实体"><a href="#3-生成HTTP实体" class="headerlink" title="3. 生成HTTP实体"></a>3. 生成HTTP实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. String类型的实体</span></span><br><span class="line">StringEntity myEntity = <span class="keyword">new</span> StringEntity(<span class="string">"important message"</span>,ContentType.create(<span class="string">"text/plain"</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. File类型实体</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"onefile.txt"</span>);</span><br><span class="line">FileEntity entity = <span class="keyword">new</span> FileEntity(file,contentType.create(<span class="string">"text/plain"</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 表单实体</span></span><br><span class="line">List&lt;NameValuePair&gt; formparam = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">formparam.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param1"</span>,<span class="string">"value1"</span>));</span><br><span class="line">formparam.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"param2"</span>,<span class="string">"value2"</span>));</span><br><span class="line">UrlEncodeFormEntity entity = <span class="keyword">new</span> UrlEncodedFormEntity(formparam,Consts.UTF_8);</span><br></pre></td></tr></table></figure><h4 id="4-配置请求信息"><a href="#4-配置请求信息" class="headerlink" title="4. 配置请求信息"></a>4. 配置请求信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置请求信息</span></span><br><span class="line">RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">        .setConnectTimeout(<span class="number">1000</span>)   <span class="comment">// 创建连接的最长时间</span></span><br><span class="line">        .setConnectionRequestTimeout(<span class="number">500</span>)    <span class="comment">// 设置获取连接的最长时间</span></span><br><span class="line">        .setSocketTimeout(<span class="number">10</span>*<span class="number">1000</span>)    <span class="comment">// 设置数据传输的最长时间</span></span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 添加配置对象</span></span><br><span class="line">httpGet.setConfig(requestConfig);</span><br></pre></td></tr></table></figure><h3 id="连接池的应用"><a href="#连接池的应用" class="headerlink" title="连接池的应用"></a>连接池的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建连接池管理器</span></span><br><span class="line">    PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line">    <span class="comment">// 2. 使用连接池管理器发起请求</span></span><br><span class="line">    doGet(poolingHttpClientConnectionManager,<span class="string">"https://www.baidu.com/s"</span>,<span class="string">"wt"</span>,<span class="string">"httpclient"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(PoolingHttpClientConnectionManager poolingHttpClientConnectionManager,String url,String...param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从连接池中获取HttpClient</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(poolingHttpClientConnectionManager).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1 创建URI对象(带参的URL)</span></span><br><span class="line">    URIBuilder uriBuilder;</span><br><span class="line">    HttpGet httpGet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        uriBuilder = <span class="keyword">new</span> URIBuilder(url);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;(i+<span class="number">1</span>)&lt;param.length;i+=<span class="number">2</span>)</span><br><span class="line">            uriBuilder.setParameter(param[i],param[i+<span class="number">1</span>]);</span><br><span class="line">        httpGet = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.发起请求,接收响应</span></span><br><span class="line">    CloseableHttpResponse httpResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpResponse = httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 4.解析请求,获取数据</span></span><br><span class="line">        <span class="comment">// 4.1 判断状态码</span></span><br><span class="line">        <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// 4.2 获取主体数据</span></span><br><span class="line">            HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">            <span class="comment">// 4.3 数据转码</span></span><br><span class="line">            String context = EntityUtils.toString(httpEntity,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(context);</span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpResponse.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 交给连接池管理, 不用关闭</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            httpClient.close();</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HttpClient技术入门&quot;&gt;&lt;a href=&quot;#HttpClient技术入门&quot; class=&quot;headerlink&quot; title=&quot;HttpClient技术入门&quot;&gt;&lt;/a&gt;HttpClient技术入门&lt;/h2&gt;&lt;p&gt;网络爬虫通常都是使用Http协议访问互联网,
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
      <category term="HttpClient" scheme="https://yimchengjie.github.io/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>初探Java爬虫</title>
    <link href="https://yimchengjie.github.io/2019/12/27/%E7%88%AC%E8%99%AB/%E5%88%9D%E6%8E%A2Java%E7%88%AC%E8%99%AB/"/>
    <id>https://yimchengjie.github.io/2019/12/27/爬虫/初探Java爬虫/</id>
    <published>2019-12-27T13:09:53.000Z</published>
    <updated>2020-02-21T17:58:58.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初探Java爬虫"><a href="#初探Java爬虫" class="headerlink" title="初探Java爬虫"></a>初探Java爬虫</h2><p>既然学的是Java,那就用Java来学爬虫.</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">spiderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 爬取的目标url</span></span><br><span class="line">        String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        <span class="comment">// 空字符串,用于后续接收内容</span></span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 将字符串url转换成URL类型</span></span><br><span class="line">            URL readUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            <span class="comment">// 进行链接初始化</span></span><br><span class="line">            URLConnection connection = readUrl.openConnection();</span><br><span class="line">            <span class="comment">// 开始连接</span></span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// 创建一个输入流来读取响应内容</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">            <span class="comment">// 创建读取临时变量(读取缓存)</span></span><br><span class="line">            String tempStr = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> ((tempStr = in.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                result.append(tempStr);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"爬取结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果<br><img src="/2019/12/27/%E7%88%AC%E8%99%AB/%E5%88%9D%E6%8E%A2Java%E7%88%AC%E8%99%AB/%E7%88%AC%E5%8F%96%E7%BB%93%E6%9D%9F.png" alt="爬取结束"></p><p>可以看到, 上述程序连接到URL,然后读取了响应, 也就是baidu首页的源码</p><p>那么如何获取更细的内容呢.</p><h3 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpiderDemo spiderDemo = <span class="keyword">new</span> SpiderDemo();</span><br><span class="line">       <span class="comment">// 爬取的目标url</span></span><br><span class="line">       String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">       <span class="comment">// 将爬取功能封装</span></span><br><span class="line">       String result = spiderDemo.spiderMan(url);</span><br><span class="line">       <span class="comment">// 定义样式模板,匹配&lt;img&gt;标签</span></span><br><span class="line">       String patternStr = <span class="string">"&lt;img.*src\\s*=\\s*(.*?)[^&gt;]*?&gt;"</span>;</span><br><span class="line">       <span class="comment">// 要匹配的目标字符串</span></span><br><span class="line">       String targetStr = result;</span><br><span class="line">       <span class="comment">// 将样式模板字符串转型</span></span><br><span class="line">       Pattern pattern = Pattern.compile(patternStr);</span><br><span class="line">       <span class="comment">// 定义匹配对象进行匹配</span></span><br><span class="line">       Matcher matcher = pattern.matcher(targetStr);</span><br><span class="line">       <span class="comment">// 如果匹配成功</span></span><br><span class="line">       <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">           System.out.println(<span class="string">"匹配成功"</span>);</span><br><span class="line">           System.out.println(matcher.group());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>正则表达式是爬虫获取精确内容的重要基础</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初探Java爬虫&quot;&gt;&lt;a href=&quot;#初探Java爬虫&quot; class=&quot;headerlink&quot; title=&quot;初探Java爬虫&quot;&gt;&lt;/a&gt;初探Java爬虫&lt;/h2&gt;&lt;p&gt;既然学的是Java,那就用Java来学爬虫.&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java爬虫" scheme="https://yimchengjie.github.io/tags/Java%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="https://yimchengjie.github.io/2019/12/11/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/12/11/爬虫/爬虫入门/</id>
    <published>2019-12-10T16:12:45.000Z</published>
    <updated>2020-02-20T14:39:40.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h2><h3 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h3><p>爬虫即网络爬虫,其作用是自动爬取互联网数据的程序.<br>数据是互联网的石油,没有数据时,爬虫就能发挥重要作用.<br>搜索引擎也可以看成是一个爬虫,它网络了互联网上的内容.</p><h3 id="爬虫的基本流程"><a href="#爬虫的基本流程" class="headerlink" title="爬虫的基本流程"></a>爬虫的基本流程</h3><ol><li>分析网站,得到目标url</li><li>根据url,发起请求,获取HTML源码</li><li>从HTML源码中提取数据<ol><li>提取源码中的目标数据,并持久化保存</li><li>提取源码中的新Url地址,重复第2步操作</li></ol></li><li>爬虫结束,所有目标url提取完毕,并且目标数据保存完成</li></ol><h3 id="实现爬虫的基本步骤"><a href="#实现爬虫的基本步骤" class="headerlink" title="实现爬虫的基本步骤"></a>实现爬虫的基本步骤</h3><ol><li>建立连接,爬取数据</li><li>建立正则表达式规范</li><li>使用正则匹配目标数据</li></ol><h3 id="Url的组成"><a href="#Url的组成" class="headerlink" title="Url的组成"></a>Url的组成</h3><ol><li>scheme:协议(http,https,ftp)</li><li>host:服务器地址</li><li>port:服务器端口</li><li>path:访问的资源路径</li><li>query-string:参数</li></ol><h3 id="常见请求状态码"><a href="#常见请求状态码" class="headerlink" title="常见请求状态码"></a>常见请求状态码</h3><p>200:请求成功<br>301:永久重定向<br>302:临时重定向<br>400:客户端错误<br>401:未授权<br>403:服务器拒绝访问<br>404:找不到页面<br>405:请求方式错误<br>408:请求超时<br>500:服务器错误<br>503:服务不可用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爬虫入门&quot;&gt;&lt;a href=&quot;#爬虫入门&quot; class=&quot;headerlink&quot; title=&quot;爬虫入门&quot;&gt;&lt;/a&gt;爬虫入门&lt;/h2&gt;&lt;h3 id=&quot;爬虫是什么&quot;&gt;&lt;a href=&quot;#爬虫是什么&quot; class=&quot;headerlink&quot; title=&quot;爬虫是什么&quot;&gt;
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://yimchengjie.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门</title>
    <link href="https://yimchengjie.github.io/2019/11/25/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/SpringCloud%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/11/25/分布式开发技术/SpringCloud入门/</id>
    <published>2019-11-25T11:30:49.000Z</published>
    <updated>2020-02-26T17:58:04.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringCloud入门"><a href="#SpringCloud入门" class="headerlink" title="SpringCloud入门"></a>SpringCloud入门</h2><p>SpringCloud是一套用于分布式/微服务的框架</p><p>分布式简单的来说,就是将业务拆分,并部署到不同的服务器上</p><p>分布式系统面临的问题就叫CAP,即数据一致性,可用性,容错率</p><h3 id="SpringCloud的基础功能"><a href="#SpringCloud的基础功能" class="headerlink" title="SpringCloud的基础功能"></a>SpringCloud的基础功能</h3><ul><li>服务治理: SpringCloud Eureka</li><li>客户端负载均衡: SpringCloud Ribbon</li><li>服务容错保护: SpringCloud Hystrix</li><li>声明式服务调用: SpringCloud Feign</li><li>API网关服务: SpringCloud ZuuI</li><li>分布式配置中心: SpringCloud Config</li></ul><h3 id="SpringCloud-Eureka"><a href="#SpringCloud-Eureka" class="headerlink" title="SpringCloud Eureka"></a>SpringCloud Eureka</h3><p>分布式/微服务的系统,由于不同模块在物理层面被分开,运行在不同的服务器. 那么模块与模块之间的调用,或者说通讯(信息交互), 就需要用到<strong>远程调用</strong><br>远程调用就会有很多的地址配置, 比如IP地址, 一旦IP地址发生改变, 维护就变得很麻烦</p><p><strong>服务治理框架</strong>就是围绕着服务注册和服务发现机制来完成对微服务应用实例的自动化管理工具</p><p>系统服务器将自己的id和IP注册到Eureka服务上, 这样系统间调用就只需要通过id, 而IP则由Eureka维护</p><p>我们把<strong>提供Eureka的服务器</strong>称为<strong>Eureka服务端</strong>, 那些<strong>将服务注册到Eureka服务端</strong>的的服务器成为<strong>Eureka客户端</strong></p><h4 id="1-Eureka-Server的配置"><a href="#1-Eureka-Server的配置" class="headerlink" title="1. Eureka Server的配置"></a>1. Eureka Server的配置</h4><p>Eureka Server可以看成是Zookeeper</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line"><span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己就是注册中心，不需要去检索服务</span></span><br></pre></td></tr></table></figure><h4 id="2-Eureka-Client的配置"><a href="#2-Eureka-Client的配置" class="headerlink" title="2. Eureka Client的配置"></a>2. Eureka Client的配置</h4><p>Eureka Client分为服务提供者和服务消费者, 也可以既是提供者也是消费者</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># 当前微服务不注册到eureka中(消费端) 如果是服务端就改为true</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="3-Eureka的治理机制"><a href="#3-Eureka的治理机制" class="headerlink" title="3. Eureka的治理机制"></a>3. Eureka的治理机制</h4><ol><li>服务提供者<ol><li><strong>服务注册</strong>: 启动时发送请求将自己注册到Eureka Server上</li><li><strong>服务续约</strong>: 在注册完服务后,服务提供者会维护一个心跳来告诉Eureka Server服务状态可用</li><li><strong>服务下线</strong>: 当服务不可用时,会触发下线请求,通知Eureka Server</li></ol></li><li>服务消费者<ol><li><strong>获取服务</strong>: 启动消费者时, 它会发生请求给Eureka Server, 获取上面注册的服务清单</li><li><strong>服务调用</strong>: 消费者获取服务清单以后,通过服务名调用具体的服务实例.在进行服务调用的时候,会优先访问同处于一个地区的服务提供方(同一服务多台服务器集群的情况)</li></ol></li><li>Eureka Server<ol><li><strong>失效剔除</strong>: 默认每隔一段时间将当前注册的服务清单中没有续约的服务剔除</li><li><strong>自我保护</strong>: Eureka Server在运行期间,会统计心跳失效的比例,如果一段时间内的心跳成功比例过低,,Eureka Server会将这个提供者的信息保存起来</li></ol></li></ol><h4 id="4-RestTemplate提交REST请求"><a href="#4-RestTemplate提交REST请求" class="headerlink" title="4. RestTemplate提交REST请求"></a>4. RestTemplate提交REST请求</h4><p>RestTemplate是SpringCloud封装的工具类,实现获取具体服务实例的IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的方式，直接显示写死IP是不好的！</span></span><br><span class="line"><span class="comment">//private static final String REST_URL_PREFIX = "http://localhost:8001";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务实例名, 这里只是名字,不是IP</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">"http://MICROSERVICECLOUD-DEPT"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用 使用restTemplate访问restful接口非常的简单</span></span><br><span class="line"><span class="comment">  * (url, requestMap, ResponseBean.class)这三个参数分别代表 REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer/dept/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="string">"/dept/add"</span>, dept, Boolean.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringCloud-Ribbon"><a href="#SpringCloud-Ribbon" class="headerlink" title="SpringCloud Ribbon"></a>SpringCloud Ribbon</h3><p>为了实现服务的高可用, 往往会使用集群的方式部署一个服务,而如何让集群合理分摊请求,就涉及到<strong>负载均衡</strong></p><p>Ribbon是SpringCloud支持的<strong>客户端的负载均衡</strong></p><p>通常的负载均衡都在服务端,比如Nginx</p><p>所谓的客户端负载均衡,就是由<strong>获取了服务清单的消费者,来进行负载均衡算法的分配</strong></p><h4 id="Ribbon的配置"><a href="#Ribbon的配置" class="headerlink" title="Ribbon的配置"></a>Ribbon的配置</h4><p>Ribbon是支持负载均衡,默认的负载均衡策略是采用<strong>轮询</strong>的方式,也可以自定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//return new RandomRule();// Ribbon默认是轮询，自定义为随机</span></span><br><span class="line">        <span class="comment">//return new RoundRobinRule();// Ribbon默认是轮询，自定义为随机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule_ZY();<span class="comment">// 自定义为每台机器5次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的方式很简单,继承<strong>AbstractLoadBalancerRule</strong>,重写<code>public Server choose(ILoadBalancer lb, Object key)</code>即可</p><h3 id="SpringCloud-Hystrix"><a href="#SpringCloud-Hystrix" class="headerlink" title="SpringCloud Hystrix"></a>SpringCloud Hystrix</h3><p><strong>Hystrix</strong>是SpringCloud的容错机制</p><p>虽然实现了服务注册和发现,以及集群负载均衡</p><p>但是,如果有一个请求,需要调用多个服务,而有一个服务出现了问题,比如网络延迟,那会导致这个请求不可用, 如果是高并发式的请求, 那<strong>所有的请求都会延迟甚至不可用</strong>,进一步,请求的堆积,导致负载均衡饱和,集群资源耗尽,服务器瘫痪, 这就是”<strong>雪崩</strong>“</p><p>Hystrix为了防止这一系列问题,实现了<strong>断路器</strong>、<strong>线程隔离</strong>等一些系列保护机制</p><ol><li><p><strong>断路器</strong></p><p> <strong>Fallback</strong>(失败快速返回):当某个服务节点出现故障(类似电器短路), 断路器的故障监控就会发现他(类似保险丝),向调用方返回一个错误响应,而不是长久等待.这样就不会因为请求时间过长而占用资源,防止了进一步恶化</p></li><li><p><strong>线程隔离</strong></p><p> 为每个依赖服务设立单独的线程池,固定线程数量, 当请求过多(每个请求都会创建线程),线程池饱和就会拒绝请求. 这样就阻断了雪崩</p></li></ol><h4 id="Hystrix仪表盘"><a href="#Hystrix仪表盘" class="headerlink" title="Hystrix仪表盘"></a>Hystrix仪表盘</h4><p>Hystrix仪表盘用于实时监控Hystrix的各项指标信息, 帮助我们发现存在的问题,从而采取相应措施</p><h3 id="SpringCloud-Feign"><a href="#SpringCloud-Feign" class="headerlink" title="SpringCloud Feign"></a>SpringCloud Feign</h3><p>Feign整合了Eurake和Hystrix, 使开发更加便捷</p><p>此外,还提供了<strong>声明式服务调用</strong></p><h4 id="声明式服务调用"><a href="#声明式服务调用" class="headerlink" title="声明式服务调用"></a>声明式服务调用</h4><p>使用声明式服务调用可以实现使用HTTP请求远程服务能与调用本地方法一样的简单遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value ---&gt;指定调用哪个服务</span></span><br><span class="line"><span class="comment">// fallbackFactory---&gt;熔断器的降级提示</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"MICROSERVICECLOUD-DEPT"</span>, fallbackFactory = DeptClientServiceFallbackFactory.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采用Feign我们可以使用SpringMVC的注解来对服务进行绑定！</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/get/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/list"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/add"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Feign中使用断路器</span></span><br><span class="line"><span class="comment"> * 这里主要是处理异常出错的情况(降级/熔断时服务不可用，fallback就会找到这里来)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 不要忘记添加，不要忘记添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">DeptClientService</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptClientService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptClientService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptno(id).setDname(<span class="string">"该ID："</span> + id + <span class="string">"没有没有对应的信息,Consumer客户端提供的降级信息,此刻服务Provider已经关闭"</span>)</span><br><span class="line">                        .setDb_source(<span class="string">"no this database in MySQL"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringCloud-Zuul"><a href="#SpringCloud-Zuul" class="headerlink" title="SpringCloud Zuul"></a>SpringCloud Zuul</h3><p>由于服务的增多,路由规则和实例维护都需要外部负载均衡(nigix)来做<br>而且为了保证所有服务的安全性,每一层都要设立验证</p><p>Zuul网关可以解决上述问题</p><h4 id="如何解决上述问题"><a href="#如何解决上述问题" class="headerlink" title="如何解决上述问题"></a>如何解决上述问题</h4><ol><li><p>Zuul通过与Eureka结合,将自身注册到Eureka,同时获得了所有注册服务的清单.外层的请求,都要经过Zuul,这就使维护服务实例的任务交给了服务治理框架自己完成</p></li><li><p>在Zuul网关上进行统一调用验证服务,实现对微服务接口的拦截和校验</p></li></ol><p>Zuul是整个系统对外暴露的唯一接口,解决的是外部请求调用的问题,Ribbo和Fegin虽然也有负载均衡的功能,但解决的是内部各个服务之间的调用问题</p><p>Zuul和Nginx并不冲突,可以同时使用</p><h3 id="SpringCloud-Config"><a href="#SpringCloud-Config" class="headerlink" title="SpringCloud Config"></a>SpringCloud Config</h3><p>随着业务的扩展,服务越来越多, 每个服务都要存在配置文件, 而配置文件往往是修改频繁的地方.</p><p>Config可以解决分布式系统配置的管理问题,它包含Client和Server两部分</p><p>Config将所有的配置文件存放到统一的位置管理(Server端),其他的服务(Client)通过接口获取自己的配置</p><p>Config通常用Git来做Server端</p><p>Config实现了实时配置管理,结合 SpringCloud Bus,可以实现服务动态刷新配置(不需要重启)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringCloud入门&quot;&gt;&lt;a href=&quot;#SpringCloud入门&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud入门&quot;&gt;&lt;/a&gt;SpringCloud入门&lt;/h2&gt;&lt;p&gt;SpringCloud是一套用于分布式/微服务的框架
      
    
    </summary>
    
    
      <category term="分布式开发技术" scheme="https://yimchengjie.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="https://yimchengjie.github.io/tags/Spring/"/>
    
      <category term="分布式开发技术" scheme="https://yimchengjie.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="SpringCloud" scheme="https://yimchengjie.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>JPA-SpringData入门</title>
    <link href="https://yimchengjie.github.io/2019/11/12/Java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/JPA-SpringData%E5%85%A5%E9%97%A8/"/>
    <id>https://yimchengjie.github.io/2019/11/12/Java开发框架/JPA-SpringData入门/</id>
    <published>2019-11-12T13:30:45.000Z</published>
    <updated>2020-02-21T11:28:00.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JPA-SpringData入门"><a href="#JPA-SpringData入门" class="headerlink" title="JPA-SpringData入门"></a>JPA-SpringData入门</h2><p>SpringData JPA是基于Spring的ORM框架,采用JPA规范,底层采用了Hibernate,而Hibernate也是基于JPA规范开发的<br>它提供了增删改查等在内的功能,且易于扩展</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>Repository: 标识接口,表明任何继承它的类都是仓库接口类,方便Spring自动扫描</li><li>CrudRepository: 继承了Repository, 实现了CRUD的方法</li><li>PagingAndSortingRepository: 继承了CrudRepository,实现了一组分页排序相关的方法</li><li>JpaRepository: 继承PagingAndSortingRepository,实现了一组JPA规范的方法</li><li>JpaSpecificationExecutor: 不属于Repository体系, 它实现了一组JPA规范的查询相关的方法</li></ol><p>根据功能,可以看到Repository系列组成的模块, 相当于以前的Mapper层(或者Dao层)<br>且提供了基础的增删改查,无需手写, 相比Mybatis方便很多</p><h4 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h4><p>JpaRepository继承了PagingAndSortingRepository,间接也继承了CrudRepository<br>所以JpaRepository的功能是非常全面的,一般数据访问层的接口实现这个接口<br>它的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;<span class="comment">//查询所有对象，不排序</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;<span class="comment">//查询所有对象，并排序</span></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; entities)</span></span>;<span class="comment">//批量保存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;<span class="comment">//强制缓存与数据库同步</span></span><br><span class="line">    <span class="function">T <span class="title">saveAndFlush</span><span class="params">(T entity)</span></span>;<span class="comment">//保存并强制同步</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; entities)</span></span>;<span class="comment">//批量删除</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;<span class="comment">//删除所有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何执行SQL"><a href="#如何执行SQL" class="headerlink" title="如何执行SQL"></a>如何执行SQL</h3><p>JPA规范下有HQL,JPQL语句, 一般在复杂查询时使用, 但是如果能直接写SQL还是更好的(更熟悉,更可读)</p><p>JPA下如何执行SQL语句呢</p><ol><li>利用if语句合理拼接SQL</li><li>createNativeQuery()方法可以创建要执行自然SQL语句查询<code>Query query=entityManager.createNativeQuery(sql.toString)</code></li><li>query.getSingleResult()方法执行</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JPA-SpringData入门&quot;&gt;&lt;a href=&quot;#JPA-SpringData入门&quot; class=&quot;headerlink&quot; title=&quot;JPA-SpringData入门&quot;&gt;&lt;/a&gt;JPA-SpringData入门&lt;/h2&gt;&lt;p&gt;SpringData JPA
      
    
    </summary>
    
    
      <category term="Java开发框架" scheme="https://yimchengjie.github.io/categories/Java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://yimchengjie.github.io/tags/Spring/"/>
    
      <category term="Java开发框架" scheme="https://yimchengjie.github.io/tags/Java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JPA" scheme="https://yimchengjie.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="https://yimchengjie.github.io/2019/11/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/11/08/设计模式/享元模式/</id>
    <published>2019-11-08T12:58:21.000Z</published>
    <updated>2020-01-07T13:37:32.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>属于结构型模式</p><p>又叫共享模式, 共享系统对象</p><h3 id="为什么使用享元模式"><a href="#为什么使用享元模式" class="headerlink" title="为什么使用享元模式"></a>为什么使用享元模式</h3><p>解决重复对象的内存浪费的问题</p><p>常用场景为数据库连接池</p><h3 id="使用享元模式"><a href="#使用享元模式" class="headerlink" title="使用享元模式"></a>使用享元模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolObj</span> <span class="keyword">implements</span> <span class="title">Pool</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String db;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoolObj</span><span class="params">(String db)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.db = db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接 "</span>+db);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Pool&gt; pools=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pool <span class="title">getPool</span><span class="params">(String db)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pools.get(db)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> pools.get(db);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Pool pool=<span class="keyword">new</span> PoolObj(db);</span><br><span class="line">            pools.put(db,pool);</span><br><span class="line">            <span class="keyword">return</span> pool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMapCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(pools.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlyWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PoolFactory poolFactory=<span class="keyword">new</span> PoolFactory();</span><br><span class="line">    Pool pool1=poolFactory.getPool(<span class="string">"mysql"</span>);</span><br><span class="line">    Pool pool2=poolFactory.getPool(<span class="string">"oracle"</span>);</span><br><span class="line">    pool1.connect();</span><br><span class="line">    pool2.connect();</span><br><span class="line">    Pool pool3=poolFactory.getPool(<span class="string">"mysql"</span>);</span><br><span class="line">    Pool pool4=poolFactory.getPool(<span class="string">"oracle"</span>);</span><br><span class="line">    pool3.connect();</span><br><span class="line">    pool4.connect();</span><br><span class="line"></span><br><span class="line">    poolFactory.printMapCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;又叫共享模式, 共享系统对象&lt;/p&gt;
&lt;h3 id=&quot;为什么使用享元模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://yimchengjie.github.io/2019/10/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yimchengjie.github.io/2019/10/30/设计模式/外观模式/</id>
    <published>2019-10-30T12:31:05.000Z</published>
    <updated>2020-01-07T13:37:21.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>属于结构型模式</p><p>外观模式其实就是将一段代码中不变的部分提炼出来,做成一个接口暴露给用户</p><h3 id="为什么使用外观模式"><a href="#为什么使用外观模式" class="headerlink" title="为什么使用外观模式"></a>为什么使用外观模式</h3><p>降低访问复杂系统的内部子系统时的复杂度,减少系统相互依赖。提高灵活性.提高安全性</p><h3 id="使用外观模式"><a href="#使用外观模式" class="headerlink" title="使用外观模式"></a>使用外观模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一些列方法封装成接口暴露给用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeviceA deviceA=<span class="keyword">new</span> DeviceA();</span><br><span class="line">    <span class="keyword">private</span> DeviceB deviceB=<span class="keyword">new</span> DeviceB();</span><br><span class="line">    <span class="keyword">private</span> DeviceC deviceC=<span class="keyword">new</span> DeviceC();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        deviceA.method();</span><br><span class="line">        deviceB.method();</span><br><span class="line">        deviceC.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceA的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceB的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DeviceC的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">    facade.methed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h2&gt;&lt;p&gt;属于结构型模式&lt;/p&gt;
&lt;p&gt;外观模式其实就是将一段代码中不变的部分提炼出来,做成一个接口暴露给用户&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yimchengjie.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之索引</title>
    <link href="https://yimchengjie.github.io/2019/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
    <id>https://yimchengjie.github.io/2019/10/28/数据库/MySQL数据库之索引/</id>
    <published>2019-10-28T11:21:16.000Z</published>
    <updated>2020-01-07T12:27:49.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库之索引"><a href="#MySQL数据库之索引" class="headerlink" title="MySQL数据库之索引"></a>MySQL数据库之索引</h2><p>MySQL索引的简历对于MySQL的高效运行至关重要,索引可以大大提高MySQL检索速度</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。所以建立索引会占用磁盘空间的索引文件。</p><p>对表中数据增删改时,索引也要进行相应维护</p><h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><ol><li><p>在创建表的时候创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    author <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    info <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">INDEX</span>(author)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>CREATE INDEX直接创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">index</span> index_name ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> primary <span class="keyword">key</span> ;</span><br></pre></td></tr></table></figure></li><li><p>组合索引和前缀索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用column_list1(4)建立column_list1的前4位的索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list1(<span class="number">4</span>),column_list2,column_list3);</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><h4 id="不走索引的情况"><a href="#不走索引的情况" class="headerlink" title="不走索引的情况"></a>不走索引的情况</h4><ol><li>索引列参与到计算式</li><li>索引列参与到函数运算</li><li>正则表达式匹配</li><li>条件中带or</li><li>like ‘%XX%’</li><li>where中有不等号</li></ol><p>注意: like’XXX%’ 走索引</p><p>索引虽然大大提高了查询速度, 但是降低了更新速度;</p><h3 id="索引技巧"><a href="#索引技巧" class="headerlink" title="索引技巧"></a>索引技巧</h3><ol><li>只要列中有NULL值, 索引就无效</li><li>使用短索引,对长字段建索引时使用前缀建立</li><li>ORDER BY中的列不会使用索引</li><li>使用like语句走索引要用’XXX%’</li><li>不要在列上运算</li><li>索引要建立在经常进行select操作的字段上</li><li>索引要建立在值相对唯一的字段上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据库之索引&quot;&gt;&lt;a href=&quot;#MySQL数据库之索引&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库之索引&quot;&gt;&lt;/a&gt;MySQL数据库之索引&lt;/h2&gt;&lt;p&gt;MySQL索引的简历对于MySQL的高效运行至关重要,索引可以大大提
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://yimchengjie.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://yimchengjie.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
